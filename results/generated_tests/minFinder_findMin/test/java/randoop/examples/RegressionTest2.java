package examples;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-1));
        minFinder44.chval(t49, 100);
        boolean boolean53 = t49.equals((java.lang.Object) 5L);
        minFinder27.add(t49);
        minFinder13.chval(t49, (int) (byte) 10);
        int int57 = t49.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        boolean boolean37 = t35.equals((java.lang.Object) (-1));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        int int56 = t50.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        examples.MinFinder.T[] tArray60 = new examples.MinFinder.T[] { t39, t41, t48, t50, t58 };
        java.util.ArrayList<examples.MinFinder.T> tList61 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList61, tArray60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList61);
        boolean boolean71 = t35.equals((java.lang.Object) minFinder70);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T(3);
        minFinder72.chval(t75, (int) (short) -1);
        boolean boolean78 = t35.equals((java.lang.Object) minFinder72);
        minFinder20.add(t35);
        minFinder0.chval(t35, 4);
        int int82 = t35.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNotNull(tArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t24 = new examples.MinFinder.T(100);
        minFinder22.add(t24);
        examples.MinFinder.T t26 = minFinder22.findMin();
        minFinder2.chval(t26, 32);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNotNull(t26);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t47 = minFinder45.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList71);
        examples.MinFinder.T t87 = new examples.MinFinder.T((int) '#');
        boolean boolean89 = t87.equals((java.lang.Object) 9L);
        minFinder85.add(t87);
        minFinder85.clear();
        examples.MinFinder.T t93 = new examples.MinFinder.T(3);
        minFinder85.chval(t93, (int) (short) 10);
        boolean boolean96 = t47.equals((java.lang.Object) t93);
        java.lang.Class<?> wildcardClass97 = t93.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-1));
        minFinder33.chval(t38, 100);
        java.lang.Class<?> wildcardClass41 = minFinder33.getClass();
        boolean boolean42 = t31.equals((java.lang.Object) wildcardClass41);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t44, t46, t53, t58, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList82);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t90 = minFinder88.findMin();
        boolean boolean91 = t31.equals((java.lang.Object) minFinder88);
        minFinder88.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        int int28 = t27.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T(35);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        int int52 = t51.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t32, t34, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList54);
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        minFinder60.add(t62);
        boolean boolean64 = t30.equals((java.lang.Object) t62);
        boolean boolean65 = t27.equals((java.lang.Object) t30);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t47 = minFinder43.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t47);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        minFinder52.add(t57);
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder52.add(t61);
        examples.MinFinder.T t63 = minFinder52.findMin();
        java.lang.Object obj64 = null;
        boolean boolean65 = t63.equals(obj64);
        minFinder29.chval(t63, (-6));
        minFinder29.clear();
        examples.MinFinder.T t69 = minFinder29.findMin();
        examples.MinFinder.T t70 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t70);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t19 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        int int15 = t13.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder18.clear();
        examples.MinFinder.T t33 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        minFinder18.clear();
        boolean boolean37 = t13.equals((java.lang.Object) minFinder18);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        int int24 = t23.getVal();
        minFinder21.chval(t23, (-100));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        int int56 = t50.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T[] tArray65 = new examples.MinFinder.T[] { t28, t30, t37, t42, t48, t50, t58 };
        java.util.ArrayList<examples.MinFinder.T> tList66 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList66, tArray65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList66);
        minFinder68.clear();
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t73 = minFinder70.findMin();
        minFinder70.clear();
        minFinder70.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-9));
        int int78 = t77.getVal();
        minFinder70.chval(t77, 10);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        minFinder81.clear();
        examples.MinFinder.T t84 = minFinder81.findMin();
        minFinder81.clear();
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        int int88 = t87.getVal();
        int int89 = t87.getVal();
        int int90 = t87.getVal();
        int int91 = t87.getVal();
        minFinder81.chval(t87, 0);
        minFinder70.add(t87);
        minFinder68.add(t87);
        minFinder21.add(t87);
        minFinder21.clear();
        boolean boolean98 = t17.equals((java.lang.Object) minFinder21);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-9) + "'", int24 == (-9));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertNotNull(tArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-9) + "'", int78 == (-9));
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder19.add(t33);
        int int38 = t33.getVal();
        minFinder0.add(t33);
        examples.MinFinder.T t40 = minFinder0.findMin();
        int int41 = t40.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass42 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = null;
        minFinder0.chval(t34, (int) (short) -1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        minFinder38.add(t48);
        examples.MinFinder.T t53 = minFinder38.findMin();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        minFinder54.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder54.add(t68);
        boolean boolean71 = t53.equals((java.lang.Object) t68);
        minFinder0.chval(t68, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        minFinder74.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        minFinder74.add(t79);
        examples.MinFinder.T t83 = new examples.MinFinder.T(1);
        boolean boolean84 = t79.equals((java.lang.Object) t83);
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        minFinder0.add(t83);
        examples.MinFinder.T t88 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(t88);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) (byte) 100);
        int int12 = t11.getVal();
        minFinder0.chval(t11, (-7));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        minFinder44.add(t46);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-1));
        minFinder48.chval(t53, 100);
        java.lang.Class<?> wildcardClass56 = minFinder48.getClass();
        boolean boolean57 = t46.equals((java.lang.Object) wildcardClass56);
        minFinder0.chval(t46, 0);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        minFinder37.add(t51);
        minFinder32.chval(t51, (int) (short) 100);
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t60 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNull(t60);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        boolean boolean14 = t7.equals((java.lang.Object) 0.0d);
        boolean boolean16 = t7.equals((java.lang.Object) (-4.6d));
        minFinder0.chval(t7, 7);
        minFinder0.clear();
        examples.MinFinder.T t20 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(t20);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        minFinder28.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) (short) 0);
        minFinder28.chval(t43, (int) '4');
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        minFinder46.add(t55);
        minFinder46.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 0);
        minFinder46.chval(t61, (int) '4');
        minFinder28.add(t61);
        examples.MinFinder.T t65 = minFinder28.findMin();
        examples.MinFinder.T t66 = minFinder28.findMin();
        int int67 = t66.getVal();
        minFinder13.chval(t66, (-8));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        examples.MinFinder.T t71 = minFinder14.findMin();
        examples.MinFinder.T t72 = null;
        minFinder14.chval(t72, (int) (byte) 100);
        examples.MinFinder.T t75 = minFinder14.findMin();
        examples.MinFinder.T t76 = minFinder14.findMin();
        minFinder14.clear();
        java.lang.Class<?> wildcardClass78 = minFinder14.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        boolean boolean11 = t9.equals((java.lang.Object) (-1));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        int int33 = t32.getVal();
        examples.MinFinder.T[] tArray34 = new examples.MinFinder.T[] { t13, t15, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList35 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList35, tArray34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList35);
        boolean boolean45 = t9.equals((java.lang.Object) minFinder44);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        boolean boolean52 = t9.equals((java.lang.Object) minFinder46);
        minFinder0.add(t9);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        minFinder54.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder54.add(t59);
        minFinder54.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        minFinder54.add(t64);
        minFinder54.clear();
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) (-1));
        int int84 = t81.getVal();
        minFinder67.chval(t81, 0);
        minFinder54.chval(t81, (int) (short) -1);
        minFinder0.add(t81);
        int int90 = t81.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(tArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-8));
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t18 = minFinder4.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        minFinder19.clear();
        boolean boolean33 = t18.equals((java.lang.Object) minFinder19);
        boolean boolean34 = t1.equals((java.lang.Object) boolean33);
        int int35 = t1.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-8) + "'", int35 == (-8));
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder.T t23 = new examples.MinFinder.T(0);
        java.lang.Object obj24 = null;
        boolean boolean25 = t23.equals(obj24);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        java.lang.Class<?> wildcardClass31 = t27.getClass();
        boolean boolean32 = t23.equals((java.lang.Object) t27);
        minFinder0.add(t27);
        java.lang.Class<?> wildcardClass34 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder10.chval(t15, 100);
        boolean boolean19 = t15.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        minFinder20.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 0);
        minFinder20.chval(t35, (int) '4');
        boolean boolean38 = t15.equals((java.lang.Object) minFinder20);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        minFinder20.add(t40);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder45.add(t59);
        examples.MinFinder.T t62 = minFinder45.findMin();
        boolean boolean63 = t40.equals((java.lang.Object) minFinder45);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-1));
        minFinder64.chval(t69, 100);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        minFinder64.add(t73);
        minFinder64.clear();
        boolean boolean78 = t40.equals((java.lang.Object) minFinder64);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t82 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        int int86 = t85.getVal();
        int int87 = t85.getVal();
        int int88 = t85.getVal();
        int int89 = t85.getVal();
        minFinder79.chval(t85, 0);
        int int92 = t85.getVal();
        minFinder64.add(t85);
        minFinder0.add(t85);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        examples.MinFinder.T t22 = minFinder11.findMin();
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        minFinder28.chval(t30, (int) ' ');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        boolean boolean41 = t39.equals((java.lang.Object) 6);
        minFinder28.chval(t39, 97);
        boolean boolean44 = t26.equals((java.lang.Object) t39);
        int int45 = t26.getVal();
        boolean boolean46 = t22.equals((java.lang.Object) t26);
        minFinder0.add(t22);
        examples.MinFinder.T t48 = minFinder0.findMin();
        examples.MinFinder.T t49 = minFinder0.findMin();
        int int50 = t49.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        minFinder36.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        minFinder36.add(t41);
        minFinder30.chval(t41, 5);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        minFinder46.add(t55);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-9));
        minFinder46.add(t60);
        minFinder30.chval(t60, (-10));
        examples.MinFinder.T t64 = minFinder30.findMin();
        examples.MinFinder.T t65 = minFinder30.findMin();
        boolean boolean66 = t25.equals((java.lang.Object) minFinder30);
        examples.MinFinder.T t67 = minFinder30.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(t67);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        minFinder81.clear();
        examples.MinFinder.T t84 = minFinder81.findMin();
        examples.MinFinder.T t86 = new examples.MinFinder.T((-1));
        minFinder81.chval(t86, 100);
        boolean boolean90 = t86.equals((java.lang.Object) 5L);
        // The following exception was thrown during execution in test generation
        try {
            minFinder80.chval(t86, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList25);
        boolean boolean40 = t1.equals((java.lang.Object) tList25);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList25);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        boolean boolean3 = t1.equals((java.lang.Object) 6);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        boolean boolean22 = t1.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) (-1));
        minFinder52.add(t54);
        examples.MinFinder.T t58 = minFinder52.findMin();
        minFinder4.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        java.lang.Class<?> wildcardClass67 = t61.getClass();
        boolean boolean68 = t58.equals((java.lang.Object) wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        java.lang.Class<?> wildcardClass41 = tList37.getClass();
        boolean boolean42 = t13.equals((java.lang.Object) tList37);
        int int43 = t13.getVal();
        minFinder0.chval(t13, (-9));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        int int75 = t69.getVal();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        int int82 = t77.getVal();
        int int83 = t77.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t47, t49, t56, t61, t67, t69, t77 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder.T t89 = new examples.MinFinder.T((-3));
        minFinder87.add(t89);
        java.lang.Object obj91 = null;
        boolean boolean92 = t89.equals(obj91);
        minFinder0.add(t89);
        examples.MinFinder.T t94 = minFinder0.findMin();
        examples.MinFinder.T t95 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertNotNull(t95);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t23 = minFinder13.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t23);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        minFinder12.chval(t18, (int) ' ');
        boolean boolean27 = t9.equals((java.lang.Object) ' ');
        int int28 = t9.getVal();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder29.add(t34);
        examples.MinFinder.T t37 = minFinder29.findMin();
        minFinder29.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        minFinder41.chval(t52, 5);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        minFinder57.add(t66);
        examples.MinFinder.T t71 = new examples.MinFinder.T((-9));
        minFinder57.add(t71);
        minFinder41.chval(t71, (-10));
        boolean boolean75 = t40.equals((java.lang.Object) t71);
        minFinder29.chval(t71, (int) (short) 0);
        minFinder29.clear();
        examples.MinFinder.T t79 = minFinder29.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        minFinder82.clear();
        minFinder82.clear();
        examples.MinFinder.T t87 = new examples.MinFinder.T((int) 'a');
        int int88 = t87.getVal();
        minFinder82.add(t87);
        examples.MinFinder.T t91 = new examples.MinFinder.T(3);
        minFinder82.add(t91);
        boolean boolean93 = t81.equals((java.lang.Object) t91);
        int int94 = t91.getVal();
        int int95 = t91.getVal();
        minFinder29.chval(t91, 4);
        boolean boolean98 = t9.equals((java.lang.Object) minFinder29);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(t37);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 97 + "'", int88 == 97);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 3 + "'", int94 == 3);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t30 = minFinder28.findMin();
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        minFinder31.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        minFinder31.add(t36);
        examples.MinFinder.T t39 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        minFinder49.add(t54);
        minFinder43.chval(t54, 5);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        minFinder59.add(t68);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-9));
        minFinder59.add(t73);
        minFinder43.chval(t73, (-10));
        boolean boolean77 = t42.equals((java.lang.Object) t73);
        minFinder31.chval(t73, (int) (short) 0);
        boolean boolean80 = t30.equals((java.lang.Object) t73);
        int int81 = t30.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(t39);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-1));
        minFinder11.chval(t16, 100);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        minFinder11.add(t20);
        minFinder11.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        boolean boolean28 = t26.equals((java.lang.Object) (-1));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t30, t32, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        boolean boolean62 = t26.equals((java.lang.Object) minFinder61);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        boolean boolean69 = t26.equals((java.lang.Object) minFinder63);
        minFinder11.chval(t26, 97);
        int int72 = t26.getVal();
        java.lang.Object obj73 = null;
        boolean boolean74 = t26.equals(obj73);
        int int75 = t26.getVal();
        minFinder0.add(t26);
        minFinder0.clear();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        examples.MinFinder.T t81 = minFinder78.findMin();
        examples.MinFinder.T t83 = new examples.MinFinder.T((-1));
        minFinder78.chval(t83, 100);
        examples.MinFinder.T t87 = new examples.MinFinder.T(7);
        minFinder78.chval(t87, (int) (byte) -1);
        int int90 = t87.getVal();
        minFinder0.chval(t87, 2);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 7 + "'", int90 == 7);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t47 = minFinder45.findMin();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t53 = minFinder48.findMin();
        examples.MinFinder.T t54 = minFinder48.findMin();
        examples.MinFinder.T t55 = minFinder48.findMin();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        minFinder56.add(t61);
        minFinder56.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        minFinder56.add(t66);
        examples.MinFinder.T t68 = minFinder56.findMin();
        minFinder48.add(t68);
        boolean boolean70 = t47.equals((java.lang.Object) t68);
        java.lang.Class<?> wildcardClass71 = t47.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        examples.MinFinder.T[] tArray71 = new examples.MinFinder.T[] { t34, t36, t43, t48, t54, t56, t64 };
        java.util.ArrayList<examples.MinFinder.T> tList72 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList72, tArray71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T(3);
        minFinder78.chval(t81, (int) (short) -1);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        minFinder84.clear();
        minFinder84.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) 'a');
        int int90 = t89.getVal();
        minFinder84.add(t89);
        minFinder78.chval(t89, 5);
        minFinder77.add(t89);
        minFinder19.chval(t89, 0);
        minFinder0.add(t89);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(tArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 97 + "'", int90 == 97);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) ' ');
        int int4 = t1.getVal();
        examples.MinFinder.T t6 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        minFinder7.chval(t13, 0);
        boolean boolean20 = t6.equals((java.lang.Object) minFinder7);
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) (short) 0);
        int int23 = t22.getVal();
        minFinder7.chval(t22, (-5));
        examples.MinFinder.T t27 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        minFinder28.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        int int34 = t33.getVal();
        minFinder28.add(t33);
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder28.add(t37);
        boolean boolean39 = t27.equals((java.lang.Object) t37);
        int int40 = t37.getVal();
        minFinder7.chval(t37, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        boolean boolean51 = t44.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        minFinder52.chval(t58, 0);
        minFinder52.clear();
        examples.MinFinder.T t66 = minFinder52.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        boolean boolean70 = t68.equals((java.lang.Object) ' ');
        minFinder52.add(t68);
        boolean boolean72 = t44.equals((java.lang.Object) t68);
        minFinder7.add(t44);
        int int74 = t44.getVal();
        boolean boolean75 = t1.equals((java.lang.Object) int74);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 3 + "'", int40 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder0.add(t17);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        int int34 = t31.getVal();
        minFinder17.chval(t31, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) (-1));
        int int84 = t81.getVal();
        minFinder67.chval(t81, 0);
        minFinder66.add(t81);
        examples.MinFinder.T t88 = minFinder66.findMin();
        boolean boolean89 = t31.equals((java.lang.Object) minFinder66);
        minFinder0.add(t31);
        examples.MinFinder.T t91 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t91);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t5);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        examples.MinFinder.T t52 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        minFinder54.chval(t60, 0);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        boolean boolean70 = t68.equals((java.lang.Object) (-1));
        int int71 = t68.getVal();
        minFinder54.chval(t68, 0);
        minFinder41.add(t68);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        minFinder18.chval(t24, (int) ' ');
        minFinder11.add(t24);
        minFinder0.add(t24);
        java.lang.Class<?> wildcardClass35 = t24.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass48 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) (byte) -1);
        minFinder32.add(t66);
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder0.add(t47);
        int int49 = t47.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T(5);
        minFinder28.add(t35);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        java.lang.Class<?> wildcardClass64 = tList60.getClass();
        boolean boolean65 = t35.equals((java.lang.Object) wildcardClass64);
        int int66 = t35.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 5 + "'", int66 == 5);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = minFinder29.findMin();
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(t51);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) (-1));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList50);
        boolean boolean58 = t24.equals((java.lang.Object) minFinder57);
        boolean boolean59 = t19.equals((java.lang.Object) t24);
        int int60 = t19.getVal();
        int int61 = t19.getVal();
        java.lang.Class<?> wildcardClass62 = t19.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        java.lang.Class<?> wildcardClass11 = t5.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        minFinder24.clear();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        minFinder38.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) (short) 0);
        minFinder38.chval(t53, (int) '4');
        minFinder24.add(t53);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        boolean boolean63 = t53.equals((java.lang.Object) t58);
        boolean boolean65 = t58.equals((java.lang.Object) (byte) 0);
        minFinder0.add(t58);
        examples.MinFinder.T t67 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t67);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        examples.MinFinder.T t23 = minFinder20.findMin();
        minFinder20.clear();
        minFinder20.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-9));
        int int28 = t27.getVal();
        minFinder20.chval(t27, 10);
        examples.MinFinder.T t31 = minFinder20.findMin();
        examples.MinFinder.T t32 = minFinder20.findMin();
        boolean boolean33 = t19.equals((java.lang.Object) t32);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-1));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        boolean boolean26 = t18.equals((java.lang.Object) int25);
        int int27 = t18.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        int int20 = t14.getVal();
        int int21 = t14.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        minFinder24.add(t33);
        boolean boolean37 = t23.equals((java.lang.Object) minFinder24);
        examples.MinFinder.T t38 = minFinder24.findMin();
        examples.MinFinder.T t39 = minFinder24.findMin();
        examples.MinFinder.T t40 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) (short) 0);
        int int44 = t43.getVal();
        boolean boolean46 = t43.equals((java.lang.Object) 2);
        int int47 = t43.getVal();
        minFinder24.chval(t43, (-6));
        int int50 = t43.getVal();
        boolean boolean51 = t14.equals((java.lang.Object) int50);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(t38);
        org.junit.Assert.assertNotNull(t39);
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder.T t74 = minFinder73.findMin();
        int int75 = t74.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        minFinder21.chval(t27, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        int int82 = t81.getVal();
        boolean boolean83 = t27.equals((java.lang.Object) t81);
        minFinder0.add(t27);
        java.lang.Object obj85 = null;
        boolean boolean86 = t27.equals(obj85);
        java.lang.Object obj87 = null;
        boolean boolean88 = t27.equals(obj87);
        int int89 = t27.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        examples.MinFinder.T t1 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((int) 'a');
        int int8 = t7.getVal();
        minFinder2.add(t7);
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder2.add(t11);
        boolean boolean13 = t1.equals((java.lang.Object) t11);
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        minFinder12.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) 0);
        minFinder12.chval(t27, (int) '4');
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder30.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 0);
        minFinder30.chval(t45, (int) '4');
        minFinder12.add(t45);
        examples.MinFinder.T t49 = minFinder12.findMin();
        examples.MinFinder.T t50 = minFinder12.findMin();
        minFinder0.chval(t50, 0);
        minFinder0.clear();
        examples.MinFinder.T t54 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNull(t54);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        examples.MinFinder.T[] tArray33 = new examples.MinFinder.T[] { t12, t14, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList34 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList34, tArray33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        minFinder41.chval(t47, 0);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        boolean boolean57 = t55.equals((java.lang.Object) (-1));
        int int58 = t55.getVal();
        minFinder41.chval(t55, 0);
        minFinder40.add(t55);
        minFinder40.clear();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder63.add(t72);
        examples.MinFinder.T t74 = minFinder63.findMin();
        java.lang.Object obj75 = null;
        boolean boolean76 = t74.equals(obj75);
        minFinder40.chval(t74, (-6));
        boolean boolean79 = t1.equals((java.lang.Object) minFinder40);
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) '#');
        minFinder40.add(t81);
        int int83 = t81.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(tArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 35 + "'", int83 == 35);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-9));
        int int71 = t70.getVal();
        minFinder68.chval(t70, (-100));
        minFinder67.add(t70);
        minFinder0.add(t70);
        examples.MinFinder.T t76 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-9) + "'", int71 == (-9));
        org.junit.Assert.assertNotNull(t76);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        boolean boolean20 = t6.equals((java.lang.Object) minFinder7);
        minFinder7.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder7.chval(t23, 1);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t27, t29, t36, t41, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        minFinder67.add(t69);
        minFinder7.chval(t69, (int) (short) 10);
        boolean boolean74 = t69.equals((java.lang.Object) (-6));
        minFinder0.add(t69);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        minFinder12.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) 0);
        minFinder12.chval(t27, (int) '4');
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder30.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 0);
        minFinder30.chval(t45, (int) '4');
        minFinder12.add(t45);
        examples.MinFinder.T t49 = minFinder12.findMin();
        examples.MinFinder.T t50 = minFinder12.findMin();
        minFinder0.chval(t50, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T(1);
        minFinder0.add(t54);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertNotNull(t50);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = null;
        minFinder27.chval(t32, (int) (byte) 10);
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (byte) 1);
        int int37 = t36.getVal();
        minFinder27.add(t36);
        java.lang.Class<?> wildcardClass39 = t36.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T(3);
        minFinder48.chval(t51, (int) (short) -1);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        minFinder48.add(t57);
        minFinder47.add(t57);
        int int62 = t57.getVal();
        minFinder0.chval(t57, (int) (byte) 10);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t67 = null;
        minFinder0.chval(t67, (int) (short) 0);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        minFinder13.add(t27);
        minFinder0.add(t27);
        examples.MinFinder.T t31 = minFinder0.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        boolean boolean47 = t33.equals((java.lang.Object) minFinder34);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder34.add(t49);
        examples.MinFinder.T t52 = minFinder34.findMin();
        minFinder0.add(t52);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(t31);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-9));
        int int32 = t31.getVal();
        minFinder29.chval(t31, (-100));
        minFinder16.chval(t31, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        java.lang.Object obj43 = null;
        boolean boolean44 = t38.equals(obj43);
        minFinder16.add(t38);
        boolean boolean46 = t15.equals((java.lang.Object) t38);
        boolean boolean47 = t9.equals((java.lang.Object) t38);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-9) + "'", int32 == (-9));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        int int31 = t25.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        int int34 = t33.getVal();
        examples.MinFinder.T[] tArray35 = new examples.MinFinder.T[] { t14, t16, t23, t25, t33 };
        java.util.ArrayList<examples.MinFinder.T> tList36 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList36, tArray35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList36);
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        minFinder42.add(t44);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-9));
        int int48 = t47.getVal();
        minFinder42.add(t47);
        minFinder0.chval(t47, (-2));
        java.lang.Class<?> wildcardClass52 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(tArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-9) + "'", int48 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        minFinder48.chval(t54, 0);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) 'a');
        int int76 = t75.getVal();
        minFinder61.add(t75);
        minFinder48.add(t75);
        examples.MinFinder.T t79 = minFinder48.findMin();
        minFinder47.add(t79);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertNotNull(t79);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        minFinder45.add(t59);
        examples.MinFinder.T t61 = minFinder45.findMin();
        minFinder45.clear();
        boolean boolean63 = t1.equals((java.lang.Object) minFinder45);
        examples.MinFinder.T t64 = minFinder45.findMin();
        minFinder45.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(t64);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        boolean boolean42 = t40.equals((java.lang.Object) (-1));
        int int43 = t40.getVal();
        minFinder26.chval(t40, 0);
        minFinder22.add(t40);
        minFinder2.chval(t40, 8);
        examples.MinFinder.T t49 = minFinder2.findMin();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        minFinder50.clear();
        minFinder50.clear();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T(0);
        java.lang.Object obj57 = null;
        boolean boolean58 = t56.equals(obj57);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t60, t62, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList82);
        minFinder91.clear();
        boolean boolean93 = t56.equals((java.lang.Object) minFinder91);
        minFinder50.chval(t56, 5);
        examples.MinFinder.T t97 = new examples.MinFinder.T(8);
        boolean boolean98 = t56.equals((java.lang.Object) t97);
        minFinder2.add(t97);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t49 = minFinder41.findMin();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t49);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-1));
        minFinder17.chval(t22, 100);
        boolean boolean26 = t22.equals((java.lang.Object) 5L);
        minFinder0.add(t22);
        examples.MinFinder.T t28 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass29 = t28.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-9) + "'", int34 == (-9));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-9) + "'", int35 == (-9));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-9) + "'", int36 == (-9));
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-1));
        minFinder11.chval(t16, 100);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        minFinder11.add(t20);
        minFinder11.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        boolean boolean28 = t26.equals((java.lang.Object) (-1));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t30, t32, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        boolean boolean62 = t26.equals((java.lang.Object) minFinder61);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        boolean boolean69 = t26.equals((java.lang.Object) minFinder63);
        minFinder11.chval(t26, 97);
        int int72 = t26.getVal();
        java.lang.Object obj73 = null;
        boolean boolean74 = t26.equals(obj73);
        int int75 = t26.getVal();
        minFinder0.add(t26);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t21 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder.T t37 = minFinder23.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        boolean boolean41 = t39.equals((java.lang.Object) ' ');
        minFinder23.add(t39);
        minFinder16.chval(t39, (int) ' ');
        minFinder14.add(t39);
        java.lang.Object obj46 = null;
        boolean boolean47 = t39.equals(obj46);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder.T t75 = minFinder74.findMin();
        int int76 = t75.getVal();
        boolean boolean77 = t39.equals((java.lang.Object) t75);
        int int78 = t75.getVal();
        boolean boolean79 = t9.equals((java.lang.Object) t75);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        int int4 = t1.getVal();
        java.lang.Object obj5 = null;
        boolean boolean6 = t1.equals(obj5);
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        minFinder7.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        minFinder13.chval(t24, 5);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-9));
        minFinder29.add(t43);
        minFinder13.chval(t43, (-10));
        boolean boolean47 = t12.equals((java.lang.Object) t43);
        minFinder7.chval(t43, 7);
        boolean boolean50 = t1.equals((java.lang.Object) minFinder7);
        java.lang.Class<?> wildcardClass51 = minFinder7.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        java.lang.Class<?> wildcardClass16 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        int int20 = t1.getVal();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        minFinder21.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        minFinder21.add(t26);
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder21.add(t30);
        minFinder21.clear();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        minFinder33.add(t42);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-9));
        minFinder33.add(t47);
        minFinder33.clear();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t52 = new examples.MinFinder.T(100);
        minFinder50.add(t52);
        minFinder33.chval(t52, (int) '#');
        int int56 = t52.getVal();
        minFinder21.add(t52);
        boolean boolean58 = t1.equals((java.lang.Object) minFinder21);
        java.lang.Class<?> wildcardClass59 = minFinder21.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 100 + "'", int56 == 100);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        boolean boolean20 = t6.equals((java.lang.Object) minFinder7);
        minFinder7.clear();
        examples.MinFinder.T t22 = minFinder7.findMin();
        examples.MinFinder.T t23 = minFinder7.findMin();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        minFinder24.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        minFinder24.add(t29);
        examples.MinFinder.T t33 = new examples.MinFinder.T(1);
        boolean boolean34 = t29.equals((java.lang.Object) t33);
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder7.chval(t33, (int) (byte) 0);
        minFinder0.chval(t33, 100);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t47 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t50 = minFinder42.findMin();
        examples.MinFinder.T t51 = minFinder42.findMin();
        examples.MinFinder.T t52 = minFinder42.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        boolean boolean61 = t54.equals((java.lang.Object) 100.0d);
        int int62 = t54.getVal();
        minFinder42.add(t54);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        examples.MinFinder.T t86 = new examples.MinFinder.T(3);
        minFinder83.chval(t86, (int) (short) -1);
        minFinder77.add(t86);
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) 'a');
        int int92 = t91.getVal();
        minFinder77.add(t91);
        minFinder64.add(t91);
        boolean boolean95 = t54.equals((java.lang.Object) minFinder64);
        minFinder41.add(t54);
        minFinder0.chval(t54, (-4));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t2 = minFinder0.findMin();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        minFinder3.chval(t9, 0);
        minFinder3.clear();
        examples.MinFinder.T t17 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t24 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t27 = minFinder19.findMin();
        examples.MinFinder.T t28 = minFinder19.findMin();
        examples.MinFinder.T t29 = minFinder19.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        minFinder19.chval(t31, (-2));
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        int int56 = t50.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        examples.MinFinder.T[] tArray60 = new examples.MinFinder.T[] { t39, t41, t48, t50, t58 };
        java.util.ArrayList<examples.MinFinder.T> tList61 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList61, tArray60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList61);
        java.lang.Class<?> wildcardClass65 = tList61.getClass();
        boolean boolean66 = t37.equals((java.lang.Object) tList61);
        minFinder19.add(t37);
        int int68 = t37.getVal();
        minFinder3.add(t37);
        minFinder0.add(t37);
        org.junit.Assert.assertNull(t2);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNotNull(tArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        int int22 = t21.getVal();
        minFinder7.add(t21);
        examples.MinFinder.T t24 = minFinder7.findMin();
        minFinder0.chval(t24, (-1));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        int int43 = t42.getVal();
        minFinder40.chval(t42, (-100));
        minFinder27.chval(t42, 0);
        int int48 = t42.getVal();
        int int49 = t42.getVal();
        minFinder0.chval(t42, (-5));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(t24);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-9) + "'", int43 == (-9));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-9) + "'", int48 == (-9));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-9) + "'", int49 == (-9));
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        examples.MinFinder.T t77 = minFinder0.findMin();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        minFinder78.add(t83);
        minFinder78.clear();
        examples.MinFinder.T t87 = null;
        minFinder78.chval(t87, 0);
        boolean boolean90 = t77.equals((java.lang.Object) t87);
        int int91 = t77.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t51);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        boolean boolean22 = t15.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder.T t37 = minFinder23.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        boolean boolean41 = t39.equals((java.lang.Object) ' ');
        minFinder23.add(t39);
        boolean boolean43 = t15.equals((java.lang.Object) t39);
        minFinder0.add(t15);
        examples.MinFinder.T t45 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(t45);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) (short) 100);
        minFinder45.add(t48);
        examples.MinFinder.T t50 = minFinder45.findMin();
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        boolean boolean53 = t50.equals((java.lang.Object) t52);
        minFinder0.chval(t52, (int) 'a');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 1);
        minFinder0.chval(t15, (-100));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) -1);
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t43 = minFinder41.findMin();
        examples.MinFinder.T t44 = minFinder41.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList68);
        examples.MinFinder.T t78 = minFinder77.findMin();
        int int79 = t78.getVal();
        minFinder41.add(t78);
        int int81 = t78.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-10));
        int int2 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-10) + "'", int2 == (-10));
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder21.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        minFinder21.add(t35);
        minFinder0.add(t35);
        java.lang.Class<?> wildcardClass39 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        int int40 = t39.getVal();
        examples.MinFinder.T[] tArray41 = new examples.MinFinder.T[] { t20, t22, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList42 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList42, tArray41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList42);
        java.lang.Class<?> wildcardClass46 = tList42.getClass();
        boolean boolean47 = t18.equals((java.lang.Object) tList42);
        minFinder0.add(t18);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        minFinder49.add(t54);
        minFinder49.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        minFinder49.add(t59);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        examples.MinFinder minFinder80 = new examples.MinFinder();
        examples.MinFinder.T t81 = minFinder80.findMin();
        examples.MinFinder.T t83 = new examples.MinFinder.T(3);
        minFinder80.chval(t83, (int) (short) -1);
        minFinder74.add(t83);
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) 'a');
        int int89 = t88.getVal();
        minFinder74.add(t88);
        minFinder61.add(t88);
        boolean boolean92 = t59.equals((java.lang.Object) t88);
        minFinder0.add(t59);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertNotNull(tArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(6);
        int int13 = t12.getVal();
        minFinder0.chval(t12, 97);
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 6 + "'", int13 == 6);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t22 = minFinder17.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        boolean boolean42 = t34.equals((java.lang.Object) (-8.7d));
        minFinder27.chval(t34, (-100));
        boolean boolean45 = t24.equals((java.lang.Object) t34);
        minFinder17.add(t34);
        minFinder0.add(t34);
        examples.MinFinder.T t48 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(t48);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t30 = minFinder28.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        int int52 = t51.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t32, t34, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList54);
        examples.MinFinder.T t58 = minFinder57.findMin();
        java.lang.Class<?> wildcardClass59 = t58.getClass();
        boolean boolean60 = t30.equals((java.lang.Object) t58);
        int int61 = t30.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t19, t21, t28, t33, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        minFinder59.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder61.add(t66);
        examples.MinFinder.T t70 = new examples.MinFinder.T(1);
        boolean boolean71 = t66.equals((java.lang.Object) t70);
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        minFinder59.chval(t70, (int) 'a');
        int int76 = t70.getVal();
        minFinder0.add(t70);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-9));
        int int80 = t79.getVal();
        minFinder0.add(t79);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-9) + "'", int80 == (-9));
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t4 = minFinder0.findMin();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T(3);
        minFinder5.chval(t8, (int) (short) -1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        minFinder5.chval(t16, 5);
        examples.MinFinder.T t21 = minFinder5.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        minFinder22.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        minFinder22.chval(t37, (int) '4');
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder40.add(t49);
        minFinder40.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) (short) 0);
        minFinder40.chval(t55, (int) '4');
        minFinder22.add(t55);
        minFinder5.chval(t55, (-8));
        examples.MinFinder.T t61 = minFinder5.findMin();
        examples.MinFinder.T t62 = minFinder5.findMin();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t73 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        int int81 = t76.getVal();
        int int82 = t76.getVal();
        minFinder70.chval(t76, (int) ' ');
        minFinder63.add(t76);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        int int88 = t87.getVal();
        int int89 = t87.getVal();
        int int90 = t87.getVal();
        int int91 = t87.getVal();
        java.lang.Object obj92 = null;
        boolean boolean93 = t87.equals(obj92);
        minFinder63.add(t87);
        examples.MinFinder.T t95 = minFinder63.findMin();
        examples.MinFinder.T t96 = minFinder63.findMin();
        minFinder5.add(t96);
        minFinder0.chval(t96, (-1));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(t95);
        org.junit.Assert.assertNotNull(t96);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        minFinder53.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) (short) 0);
        minFinder53.chval(t68, (int) '4');
        minFinder41.add(t68);
        int int72 = t68.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        int int23 = t19.getVal();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        boolean boolean40 = t38.equals((java.lang.Object) (-1));
        int int41 = t38.getVal();
        minFinder24.chval(t38, 0);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        minFinder50.add(t55);
        minFinder44.chval(t55, 5);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        examples.MinFinder.T t74 = new examples.MinFinder.T((-9));
        minFinder60.add(t74);
        minFinder44.chval(t74, (-10));
        minFinder24.chval(t74, (-1));
        boolean boolean80 = t19.equals((java.lang.Object) minFinder24);
        int int81 = t19.getVal();
        boolean boolean82 = t1.equals((java.lang.Object) t19);
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        minFinder83.clear();
        examples.MinFinder.T t86 = minFinder83.findMin();
        minFinder83.clear();
        examples.MinFinder.T t88 = minFinder83.findMin();
        examples.MinFinder.T t89 = minFinder83.findMin();
        minFinder83.clear();
        examples.MinFinder.T t92 = new examples.MinFinder.T((-3));
        int int93 = t92.getVal();
        int int94 = t92.getVal();
        minFinder83.add(t92);
        int int96 = t92.getVal();
        boolean boolean97 = t1.equals((java.lang.Object) t92);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertNull(t89);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-3) + "'", int96 == (-3));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        examples.MinFinder.T t34 = null;
        minFinder29.chval(t34, (-9));
        minFinder29.clear();
        examples.MinFinder.T t38 = minFinder29.findMin();
        examples.MinFinder.T t39 = minFinder29.findMin();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        minFinder40.add(t54);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        int int61 = t60.getVal();
        boolean boolean62 = t54.equals((java.lang.Object) int61);
        minFinder29.chval(t54, (int) (short) 100);
        examples.MinFinder.T t65 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t65);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        int int54 = t30.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        minFinder10.chval(t12, (int) ' ');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-9));
        boolean boolean23 = t21.equals((java.lang.Object) 6);
        minFinder10.chval(t21, 97);
        boolean boolean26 = t8.equals((java.lang.Object) t21);
        minFinder0.add(t8);
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        boolean boolean31 = t8.equals((java.lang.Object) t29);
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        java.lang.Class<?> wildcardClass81 = tList77.getClass();
        boolean boolean82 = t53.equals((java.lang.Object) tList77);
        int int83 = t53.getVal();
        minFinder41.add(t53);
        examples.MinFinder.T t85 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertNotNull(t85);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder.T t36 = null;
        minFinder35.chval(t36, 9);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(100);
        minFinder0.add(t2);
        minFinder0.clear();
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 100);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (byte) 100);
        java.lang.Class<?> wildcardClass4 = t3.getClass();
        boolean boolean5 = t1.equals((java.lang.Object) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder minFinder1 = new examples.MinFinder();
        examples.MinFinder.T t2 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t4 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t6 = minFinder1.findMin();
        minFinder1.clear();
        minFinder1.clear();
        examples.MinFinder.T t9 = minFinder1.findMin();
        examples.MinFinder.T t10 = minFinder1.findMin();
        examples.MinFinder.T t11 = minFinder1.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        boolean boolean20 = t13.equals((java.lang.Object) 100.0d);
        int int21 = t13.getVal();
        minFinder1.add(t13);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder36.add(t50);
        minFinder23.add(t50);
        boolean boolean54 = t13.equals((java.lang.Object) minFinder23);
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        minFinder57.chval(t63, 0);
        minFinder57.clear();
        examples.MinFinder.T t71 = minFinder57.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        boolean boolean75 = t73.equals((java.lang.Object) ' ');
        minFinder57.add(t73);
        examples.MinFinder.T t77 = minFinder57.findMin();
        minFinder0.add(t77);
        minFinder0.clear();
        org.junit.Assert.assertNull(t2);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(t77);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        minFinder72.clear();
        examples.MinFinder.T t74 = minFinder72.findMin();
        minFinder72.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t74);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-1));
        minFinder49.chval(t54, 100);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        minFinder49.add(t58);
        minFinder2.add(t58);
        examples.MinFinder.T t63 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(t63);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        minFinder49.add(t52);
        examples.MinFinder.T t54 = minFinder49.findMin();
        minFinder2.add(t54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-9));
        int int59 = t58.getVal();
        minFinder56.chval(t58, (-100));
        minFinder2.add(t58);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        minFinder63.chval(t69, 0);
        minFinder63.clear();
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        examples.MinFinder.T t86 = new examples.MinFinder.T(3);
        minFinder83.chval(t86, (int) (short) -1);
        minFinder77.add(t86);
        minFinder63.add(t86);
        minFinder2.add(t86);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-9) + "'", int59 == (-9));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertNull(t84);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        minFinder24.clear();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        minFinder38.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) (short) 0);
        minFinder38.chval(t53, (int) '4');
        minFinder24.add(t53);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        boolean boolean63 = t53.equals((java.lang.Object) t58);
        boolean boolean65 = t58.equals((java.lang.Object) (byte) 0);
        minFinder0.add(t58);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t22 = minFinder17.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        boolean boolean42 = t34.equals((java.lang.Object) (-8.7d));
        minFinder27.chval(t34, (-100));
        boolean boolean45 = t24.equals((java.lang.Object) t34);
        minFinder17.add(t34);
        minFinder0.add(t34);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        int int46 = t45.getVal();
        boolean boolean48 = t45.equals((java.lang.Object) '4');
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        minFinder49.chval(t55, (int) ' ');
        int int64 = t55.getVal();
        java.lang.Class<?> wildcardClass65 = t55.getClass();
        boolean boolean66 = t45.equals((java.lang.Object) wildcardClass65);
        boolean boolean68 = t45.equals((java.lang.Object) 4);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        minFinder26.chval(t28, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-9));
        boolean boolean39 = t37.equals((java.lang.Object) 6);
        minFinder26.chval(t37, 97);
        int int42 = t37.getVal();
        minFinder13.chval(t37, 0);
        int int45 = t37.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-9) + "'", int45 == (-9));
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        int int5 = t4.getVal();
        int int6 = t4.getVal();
        int int7 = t4.getVal();
        int int8 = t4.getVal();
        int int9 = t4.getVal();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t2, t4, t11, t16, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        minFinder42.add(t44);
        examples.MinFinder.T t46 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder48.add(t57);
        examples.MinFinder.T t59 = minFinder48.findMin();
        minFinder42.add(t59);
        examples.MinFinder.T t61 = minFinder42.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) (short) 100);
        minFinder89.add(t92);
        examples.MinFinder.T t94 = minFinder89.findMin();
        boolean boolean95 = t61.equals((java.lang.Object) minFinder89);
        minFinder0.add(t61);
        examples.MinFinder.T t97 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(t97);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t2 = minFinder0.findMin();
        examples.MinFinder.T t4 = new examples.MinFinder.T((-9));
        boolean boolean6 = t4.equals((java.lang.Object) 6);
        int int7 = t4.getVal();
        minFinder0.chval(t4, (int) '#');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T[] tArray48 = new examples.MinFinder.T[] { t11, t13, t20, t25, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList49 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList49, tArray48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder61.add(t66);
        minFinder55.chval(t66, 5);
        minFinder54.add(t66);
        java.lang.Class<?> wildcardClass72 = minFinder54.getClass();
        boolean boolean73 = t4.equals((java.lang.Object) minFinder54);
        int int74 = t4.getVal();
        org.junit.Assert.assertNull(t2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-9) + "'", int7 == (-9));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(tArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-9) + "'", int74 == (-9));
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T(0);
        java.lang.Object obj7 = null;
        boolean boolean8 = t6.equals(obj7);
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        minFinder41.clear();
        boolean boolean43 = t6.equals((java.lang.Object) minFinder41);
        minFinder0.chval(t6, 5);
        examples.MinFinder.T t46 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(t46);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T(5);
        minFinder28.add(t35);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        java.lang.Class<?> wildcardClass64 = tList60.getClass();
        boolean boolean65 = t35.equals((java.lang.Object) wildcardClass64);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        minFinder66.chval(t72, 0);
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        minFinder66.add(t80);
        examples.MinFinder.T t85 = minFinder66.findMin();
        boolean boolean86 = t35.equals((java.lang.Object) minFinder66);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        int int33 = t32.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        boolean boolean23 = t1.equals((java.lang.Object) t17);
        int int24 = t17.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-9) + "'", int24 == (-9));
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        examples.MinFinder.T t62 = minFinder25.findMin();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        examples.MinFinder.T t71 = minFinder63.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        boolean boolean80 = t73.equals((java.lang.Object) 100.0d);
        minFinder63.add(t73);
        int int82 = t73.getVal();
        minFinder25.add(t73);
        examples.MinFinder.T t84 = minFinder25.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertNotNull(t84);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        int int31 = t25.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        int int34 = t33.getVal();
        examples.MinFinder.T[] tArray35 = new examples.MinFinder.T[] { t14, t16, t23, t25, t33 };
        java.util.ArrayList<examples.MinFinder.T> tList36 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList36, tArray35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList36);
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        minFinder42.add(t44);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-9));
        int int48 = t47.getVal();
        minFinder42.add(t47);
        minFinder0.chval(t47, (-2));
        examples.MinFinder.T t52 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(tArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-9) + "'", int48 == (-9));
        org.junit.Assert.assertNull(t52);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = minFinder29.findMin();
        java.lang.Class<?> wildcardClass52 = t51.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder34.add(t48);
        minFinder33.add(t48);
        examples.MinFinder.T t52 = minFinder33.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) ' ');
        minFinder33.add(t54);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        int int69 = t63.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t33, t35, t42, t47, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        minFinder73.add(t75);
        examples.MinFinder.T t77 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        minFinder79.clear();
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        int int85 = t84.getVal();
        minFinder79.add(t84);
        examples.MinFinder.T t88 = new examples.MinFinder.T(3);
        minFinder79.add(t88);
        examples.MinFinder.T t90 = minFinder79.findMin();
        minFinder73.add(t90);
        java.lang.Class<?> wildcardClass92 = minFinder73.getClass();
        boolean boolean93 = t16.equals((java.lang.Object) minFinder73);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(wildcardClass92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        int int21 = t20.getVal();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-9));
        minFinder22.add(t36);
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        int int71 = t65.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t43, t45, t52, t57, t63, t65, t73 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        minFinder83.add(t85);
        minFinder22.add(t85);
        boolean boolean88 = t20.equals((java.lang.Object) t85);
        int int89 = t85.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(3);
        minFinder9.chval(t12, (int) (short) -1);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        minFinder9.add(t18);
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        minFinder9.add(t23);
        examples.MinFinder.T t25 = minFinder9.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder26.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        minFinder26.add(t36);
        boolean boolean38 = t25.equals((java.lang.Object) t36);
        minFinder0.add(t36);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        minFinder40.chval(t42, (int) ' ');
        examples.MinFinder.T t50 = minFinder40.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(6);
        int int53 = t52.getVal();
        minFinder40.chval(t52, 97);
        minFinder0.add(t52);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNotNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 6 + "'", int53 == 6);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        boolean boolean12 = t1.equals((java.lang.Object) 1L);
        int int13 = t1.getVal();
        int int14 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        examples.MinFinder.T t37 = null;
        minFinder36.chval(t37, (-1));
        minFinder36.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder36.add(t50);
        examples.MinFinder.T t56 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        boolean boolean63 = t56.equals((java.lang.Object) minFinder57);
        int int64 = t56.getVal();
        minFinder36.add(t56);
        boolean boolean66 = t1.equals((java.lang.Object) minFinder36);
        int int67 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder.T t13 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t13);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-1));
        minFinder33.chval(t38, 100);
        java.lang.Class<?> wildcardClass41 = minFinder33.getClass();
        boolean boolean42 = t31.equals((java.lang.Object) wildcardClass41);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t44, t46, t53, t58, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList82);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t90 = minFinder88.findMin();
        boolean boolean91 = t31.equals((java.lang.Object) minFinder88);
        int int92 = t31.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        int int25 = t19.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        examples.MinFinder.T[] tArray29 = new examples.MinFinder.T[] { t8, t10, t17, t19, t27 };
        java.util.ArrayList<examples.MinFinder.T> tList30 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList30, tArray29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList30);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList30);
        examples.MinFinder.T t44 = minFinder43.findMin();
        int int45 = t44.getVal();
        minFinder0.chval(t44, (-4));
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(tArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        java.lang.Class<?> wildcardClass39 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t91 = minFinder76.findMin();
        minFinder76.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(t91);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        int int33 = t17.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList57);
        examples.MinFinder.T t71 = minFinder70.findMin();
        int int72 = t71.getVal();
        boolean boolean73 = t17.equals((java.lang.Object) t71);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        boolean boolean83 = t75.equals((java.lang.Object) 0.0f);
        java.lang.Class<?> wildcardClass84 = t75.getClass();
        boolean boolean85 = t71.equals((java.lang.Object) wildcardClass84);
        java.lang.Class<?> wildcardClass86 = t71.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-1));
        minFinder19.chval(t34, (int) (byte) 1);
        minFinder0.add(t34);
        examples.MinFinder.T t38 = minFinder0.findMin();
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        minFinder45.chval(t51, 0);
        minFinder45.clear();
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        minFinder59.add(t68);
        minFinder59.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) (short) 0);
        minFinder59.chval(t74, (int) '4');
        minFinder45.add(t74);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        int int80 = t79.getVal();
        int int81 = t79.getVal();
        int int82 = t79.getVal();
        int int83 = t79.getVal();
        boolean boolean84 = t74.equals((java.lang.Object) t79);
        int int85 = t74.getVal();
        boolean boolean86 = t42.equals((java.lang.Object) t74);
        int int87 = t74.getVal();
        int int88 = t74.getVal();
        boolean boolean89 = t38.equals((java.lang.Object) int88);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNotNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        boolean boolean74 = t31.equals((java.lang.Object) minFinder68);
        examples.MinFinder.T t75 = minFinder68.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        minFinder68.add(t77);
        minFinder29.add(t77);
        java.lang.Class<?> wildcardClass84 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        boolean boolean37 = t35.equals((java.lang.Object) ' ');
        minFinder0.add(t35);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        minFinder39.chval(t41, (int) ' ');
        examples.MinFinder.T t49 = minFinder39.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T(6);
        int int52 = t51.getVal();
        minFinder39.chval(t51, 97);
        boolean boolean55 = t35.equals((java.lang.Object) 97);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 6 + "'", int52 == 6);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        int int71 = t9.getVal();
        boolean boolean73 = t9.equals((java.lang.Object) (short) 1);
        int int74 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 3 + "'", int71 == 3);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        examples.MinFinder.T[] tArray71 = new examples.MinFinder.T[] { t34, t36, t43, t48, t54, t56, t64 };
        java.util.ArrayList<examples.MinFinder.T> tList72 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList72, tArray71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList72);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        minFinder74.add(t76);
        minFinder0.add(t76);
        examples.MinFinder.T t79 = minFinder0.findMin();
        examples.MinFinder.T t80 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass81 = t80.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(tArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        int int29 = t28.getVal();
        minFinder23.add(t28);
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder23.add(t32);
        examples.MinFinder.T t34 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        boolean boolean39 = t37.equals((java.lang.Object) ' ');
        minFinder23.add(t37);
        examples.MinFinder.T t41 = minFinder23.findMin();
        boolean boolean42 = t9.equals((java.lang.Object) t41);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(t41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 100);
        examples.MinFinder.T t12 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = t12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t12);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-5));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        minFinder0.add(t10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-5) + "'", int11 == (-5));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-5) + "'", int12 == (-5));
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        java.lang.Class<?> wildcardClass47 = t41.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t26, t28, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList48);
        examples.MinFinder.T t58 = null;
        minFinder57.chval(t58, (-1));
        minFinder57.clear();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        minFinder57.add(t71);
        examples.MinFinder.T t77 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        examples.MinFinder.T t81 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        boolean boolean84 = t77.equals((java.lang.Object) minFinder78);
        int int85 = t77.getVal();
        minFinder57.add(t77);
        boolean boolean87 = t10.equals((java.lang.Object) t77);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 10 + "'", int85 == 10);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-100));
        minFinder0.chval(t19, 35);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        examples.MinFinder.T t71 = minFinder14.findMin();
        examples.MinFinder.T t72 = null;
        minFinder14.chval(t72, (int) (byte) 100);
        minFinder14.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t71);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        minFinder32.clear();
        examples.MinFinder.T t66 = minFinder32.findMin();
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t66);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        minFinder11.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        minFinder11.add(t21);
        int int23 = t21.getVal();
        minFinder0.chval(t21, 4);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t34 = minFinder17.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-2));
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t43 = null;
        minFinder37.add(t43);
        minFinder37.clear();
        minFinder37.clear();
        boolean boolean47 = t36.equals((java.lang.Object) minFinder37);
        minFinder17.chval(t36, (-1));
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        int int2 = t1.getVal();
        java.lang.Class<?> wildcardClass3 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35 + "'", int2 == 35);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-1));
        minFinder24.chval(t29, 100);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        minFinder24.add(t33);
        minFinder24.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        boolean boolean41 = t39.equals((java.lang.Object) (-1));
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList65);
        boolean boolean75 = t39.equals((java.lang.Object) minFinder74);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T(3);
        minFinder76.chval(t79, (int) (short) -1);
        boolean boolean82 = t39.equals((java.lang.Object) minFinder76);
        minFinder24.chval(t39, 97);
        minFinder24.clear();
        boolean boolean86 = t23.equals((java.lang.Object) minFinder24);
        minFinder0.add(t23);
        java.lang.Class<?> wildcardClass88 = t23.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        java.lang.Object obj16 = null;
        boolean boolean17 = t11.equals(obj16);
        int int18 = t11.getVal();
        minFinder0.chval(t11, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t22, t24, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        minFinder46.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) (short) 100);
        minFinder75.add(t78);
        examples.MinFinder.T t80 = minFinder75.findMin();
        minFinder46.chval(t80, (-6));
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        boolean boolean86 = t80.equals((java.lang.Object) t84);
        minFinder0.chval(t84, (-7));
        examples.MinFinder.T t89 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(t89);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        int int76 = t73.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T(3);
        minFinder5.chval(t8, (int) (short) -1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T(3);
        minFinder11.chval(t14, (int) (short) -1);
        minFinder5.add(t14);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-9));
        minFinder5.add(t19);
        minFinder5.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t24 = new examples.MinFinder.T(100);
        minFinder22.add(t24);
        minFinder5.chval(t24, (int) '#');
        minFinder5.clear();
        boolean boolean29 = t1.equals((java.lang.Object) minFinder5);
        minFinder5.clear();
        examples.MinFinder.T t31 = minFinder5.findMin();
        minFinder5.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(t31);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder.T t57 = minFinder0.findMin();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t61 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        minFinder65.chval(t71, (int) ' ');
        minFinder58.add(t71);
        examples.MinFinder.T t82 = new examples.MinFinder.T((-3));
        int int83 = t82.getVal();
        int int84 = t82.getVal();
        int int85 = t82.getVal();
        int int86 = t82.getVal();
        java.lang.Object obj87 = null;
        boolean boolean88 = t82.equals(obj87);
        minFinder58.add(t82);
        examples.MinFinder.T t90 = minFinder58.findMin();
        examples.MinFinder.T t91 = minFinder58.findMin();
        minFinder0.add(t91);
        examples.MinFinder.T t93 = minFinder0.findMin();
        examples.MinFinder.T t94 = minFinder0.findMin();
        int int95 = t94.getVal();
        java.lang.Class<?> wildcardClass96 = t94.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        examples.MinFinder.T t39 = minFinder0.findMin();
        examples.MinFinder.T t40 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t40);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        java.lang.Object obj16 = null;
        boolean boolean17 = t11.equals(obj16);
        int int18 = t11.getVal();
        minFinder0.chval(t11, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t22, t24, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList44);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder.T t82 = minFinder81.findMin();
        int int83 = t82.getVal();
        minFinder53.add(t82);
        examples.MinFinder.T t85 = minFinder53.findMin();
        boolean boolean86 = t11.equals((java.lang.Object) minFinder53);
        minFinder53.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder.T t19 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass20 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t7 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        minFinder2.chval(t25, (int) ' ');
        minFinder0.add(t25);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        minFinder0.clear();
        examples.MinFinder.T t48 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-1));
        minFinder18.chval(t23, 100);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        boolean boolean35 = t33.equals((java.lang.Object) (-1));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        int int54 = t48.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t37, t39, t46, t48, t56 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList59);
        boolean boolean69 = t33.equals((java.lang.Object) minFinder68);
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder70.chval(t73, (int) (short) -1);
        boolean boolean76 = t33.equals((java.lang.Object) minFinder70);
        minFinder18.chval(t33, 97);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t81 = new examples.MinFinder.T(100);
        minFinder79.add(t81);
        minFinder18.add(t81);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        minFinder84.clear();
        examples.MinFinder.T t87 = minFinder84.findMin();
        minFinder84.clear();
        examples.MinFinder.T t89 = minFinder84.findMin();
        examples.MinFinder.T t90 = minFinder84.findMin();
        minFinder84.clear();
        examples.MinFinder.T t93 = new examples.MinFinder.T((-3));
        int int94 = t93.getVal();
        int int95 = t93.getVal();
        minFinder84.add(t93);
        minFinder18.add(t93);
        examples.MinFinder.T t98 = minFinder18.findMin();
        minFinder0.add(t98);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertNull(t89);
        org.junit.Assert.assertNull(t90);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertNotNull(t98);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        java.lang.Object obj12 = null;
        boolean boolean13 = t11.equals(obj12);
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        minFinder17.chval(t19, (int) ' ');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        boolean boolean30 = t28.equals((java.lang.Object) 6);
        minFinder17.chval(t28, 97);
        boolean boolean33 = t15.equals((java.lang.Object) t28);
        int int34 = t15.getVal();
        boolean boolean35 = t11.equals((java.lang.Object) t15);
        int int36 = t11.getVal();
        java.lang.Class<?> wildcardClass37 = t11.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder2.chval(t13, 5);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        minFinder18.add(t32);
        minFinder2.chval(t32, (-10));
        boolean boolean36 = t1.equals((java.lang.Object) t32);
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-9) + "'", int37 == (-9));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-9) + "'", int38 == (-9));
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        minFinder78.clear();
        java.lang.Class<?> wildcardClass80 = minFinder78.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        minFinder29.clear();
        minFinder29.clear();
        java.lang.Class<?> wildcardClass32 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (byte) 1);
        int int77 = t76.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder73.chval(t76, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        examples.MinFinder.T t67 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNotNull(t67);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t39 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder.T t42 = minFinder34.findMin();
        examples.MinFinder.T t43 = minFinder34.findMin();
        examples.MinFinder.T t44 = minFinder34.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        minFinder34.chval(t46, (-2));
        examples.MinFinder.T t51 = minFinder34.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        boolean boolean55 = t53.equals((java.lang.Object) 6);
        int int56 = t53.getVal();
        minFinder34.add(t53);
        minFinder0.chval(t53, 9);
        minFinder0.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        minFinder61.add(t75);
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        minFinder0.chval(t75, (int) (byte) 100);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-9) + "'", int56 == (-9));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        minFinder38.add(t47);
        examples.MinFinder.T t53 = minFinder38.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNotNull(t53);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t13, t15, t22, t27, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        minFinder53.add(t55);
        examples.MinFinder.T t57 = minFinder53.findMin();
        int int58 = t57.getVal();
        boolean boolean60 = t57.equals((java.lang.Object) '4');
        int int61 = t57.getVal();
        minFinder0.add(t57);
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(t57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        examples.MinFinder.T t22 = minFinder11.findMin();
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        minFinder28.chval(t30, (int) ' ');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        boolean boolean41 = t39.equals((java.lang.Object) 6);
        minFinder28.chval(t39, 97);
        boolean boolean44 = t26.equals((java.lang.Object) t39);
        int int45 = t26.getVal();
        boolean boolean46 = t22.equals((java.lang.Object) t26);
        minFinder0.add(t22);
        examples.MinFinder.T t48 = null;
        minFinder0.chval(t48, 5);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        java.lang.Object obj21 = null;
        boolean boolean22 = t15.equals(obj21);
        java.lang.Class<?> wildcardClass23 = t15.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        minFinder3.chval(t9, 0);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        int int20 = t17.getVal();
        minFinder3.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t24, t26, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList46);
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) (-1));
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        int int75 = t69.getVal();
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) 'a');
        int int78 = t77.getVal();
        examples.MinFinder.T[] tArray79 = new examples.MinFinder.T[] { t58, t60, t67, t69, t77 };
        java.util.ArrayList<examples.MinFinder.T> tList80 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList80, tArray79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList80);
        boolean boolean90 = t54.equals((java.lang.Object) minFinder89);
        boolean boolean91 = t52.equals((java.lang.Object) boolean90);
        minFinder3.add(t52);
        minFinder0.add(t52);
        int int94 = t52.getVal();
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertNotNull(tArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) '#');
        int int41 = t40.getVal();
        minFinder38.add(t40);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 35 + "'", int41 == 35);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder.T t49 = minFinder48.findMin();
        int int50 = t49.getVal();
        minFinder0.add(t49);
        examples.MinFinder.T t52 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNotNull(t52);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-9));
        int int46 = t45.getVal();
        minFinder43.add(t45);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(1);
        boolean boolean58 = t53.equals((java.lang.Object) t57);
        minFinder43.add(t53);
        examples.MinFinder.T t60 = minFinder43.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-9) + "'", int46 == (-9));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(t60);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        minFinder36.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        int int65 = t64.getVal();
        examples.MinFinder.T[] tArray66 = new examples.MinFinder.T[] { t45, t47, t54, t56, t64 };
        java.util.ArrayList<examples.MinFinder.T> tList67 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList67, tArray66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList67);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList67);
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        boolean boolean76 = t74.equals((java.lang.Object) (-1));
        minFinder72.add(t74);
        minFinder41.add(t74);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 97 + "'", int65 == 97);
        org.junit.Assert.assertNotNull(tArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        int int33 = t24.getVal();
        java.lang.Class<?> wildcardClass34 = t24.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        int int31 = t25.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        int int34 = t33.getVal();
        examples.MinFinder.T[] tArray35 = new examples.MinFinder.T[] { t14, t16, t23, t25, t33 };
        java.util.ArrayList<examples.MinFinder.T> tList36 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList36, tArray35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList36);
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) (short) 100);
        minFinder40.add(t43);
        examples.MinFinder.T t45 = null;
        minFinder40.chval(t45, (int) (byte) 10);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) (byte) 1);
        int int50 = t49.getVal();
        minFinder40.add(t49);
        int int52 = t49.getVal();
        minFinder0.add(t49);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(tArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(t41);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        examples.MinFinder.T t46 = minFinder41.findMin();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-9));
        int int55 = t54.getVal();
        minFinder47.chval(t54, 10);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t61 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        minFinder58.chval(t64, 0);
        minFinder47.add(t64);
        minFinder41.add(t64);
        examples.MinFinder.T t73 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-9) + "'", int55 == (-9));
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertNotNull(t73);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        int int34 = t30.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T(7);
        boolean boolean37 = t30.equals((java.lang.Object) t36);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        examples.MinFinder.T t95 = new examples.MinFinder.T(100);
        minFinder0.add(t95);
        minFinder0.clear();
        examples.MinFinder.T t98 = minFinder0.findMin();
        examples.MinFinder.T t99 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(t98);
        org.junit.Assert.assertNull(t99);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t18 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t20 = minFinder15.findMin();
        minFinder15.clear();
        minFinder15.clear();
        examples.MinFinder.T t23 = minFinder15.findMin();
        examples.MinFinder.T t24 = minFinder15.findMin();
        examples.MinFinder.T t25 = minFinder15.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        boolean boolean29 = t27.equals((java.lang.Object) (-1));
        minFinder15.chval(t27, (-2));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        int int69 = t63.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t33, t35, t42, t47, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        minFinder73.add(t75);
        examples.MinFinder.T t77 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        minFinder79.clear();
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        int int85 = t84.getVal();
        minFinder79.add(t84);
        examples.MinFinder.T t88 = new examples.MinFinder.T(3);
        minFinder79.add(t88);
        examples.MinFinder.T t90 = minFinder79.findMin();
        minFinder73.add(t90);
        minFinder15.add(t90);
        examples.MinFinder.T t93 = minFinder15.findMin();
        minFinder0.add(t93);
        minFinder0.clear();
        examples.MinFinder.T t96 = null;
        minFinder0.add(t96);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t93);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        int int48 = t47.getVal();
        minFinder41.add(t47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean53 = t51.equals((java.lang.Object) 'a');
        int int54 = t51.getVal();
        boolean boolean55 = t47.equals((java.lang.Object) t51);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t58 = new examples.MinFinder.T(0);
        minFinder56.add(t58);
        examples.MinFinder.T t60 = minFinder56.findMin();
        boolean boolean61 = t47.equals((java.lang.Object) minFinder56);
        java.lang.Class<?> wildcardClass62 = t47.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 100 + "'", int54 == 100);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder4.chval(t20, 1);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t24, t26, t33, t38, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder64.add(t66);
        examples.MinFinder.T t68 = minFinder64.findMin();
        minFinder4.add(t68);
        boolean boolean70 = t1.equals((java.lang.Object) minFinder4);
        int int71 = t1.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder0.chval(t64, 1);
        minFinder0.clear();
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        minFinder69.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        minFinder69.add(t74);
        minFinder69.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        minFinder69.add(t79);
        examples.MinFinder.T t82 = new examples.MinFinder.T((-3));
        minFinder69.add(t82);
        minFinder0.add(t82);
        examples.MinFinder.T t85 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(t85);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        boolean boolean66 = t52.equals((java.lang.Object) minFinder53);
        minFinder53.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder53.chval(t69, 1);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-1));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        boolean boolean77 = t69.equals((java.lang.Object) int76);
        minFinder29.add(t69);
        int int79 = t69.getVal();
        int int80 = t69.getVal();
        java.lang.Object obj81 = null;
        boolean boolean82 = t69.equals(obj81);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        int int22 = t21.getVal();
        minFinder7.add(t21);
        examples.MinFinder.T t24 = minFinder7.findMin();
        minFinder0.chval(t24, (-1));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        int int43 = t42.getVal();
        minFinder40.chval(t42, (-100));
        minFinder27.chval(t42, 0);
        int int48 = t42.getVal();
        int int49 = t42.getVal();
        minFinder0.chval(t42, (-5));
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        minFinder58.add(t63);
        minFinder52.chval(t63, 5);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        minFinder68.add(t77);
        examples.MinFinder.T t82 = new examples.MinFinder.T((-9));
        minFinder68.add(t82);
        minFinder52.chval(t82, (-10));
        minFinder0.add(t82);
        minFinder0.clear();
        examples.MinFinder.T t88 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(t24);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-9) + "'", int43 == (-9));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-9) + "'", int48 == (-9));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-9) + "'", int49 == (-9));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t88);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) -1);
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        minFinder12.chval(t18, 0);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        minFinder25.add(t34);
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        int int40 = t39.getVal();
        minFinder25.add(t39);
        minFinder12.add(t39);
        boolean boolean43 = t10.equals((java.lang.Object) t39);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        minFinder44.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder44.add(t49);
        examples.MinFinder.T t52 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        minFinder54.chval(t60, 0);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        minFinder67.add(t81);
        int int86 = t81.getVal();
        minFinder54.add(t81);
        minFinder44.add(t81);
        examples.MinFinder.T t89 = minFinder44.findMin();
        boolean boolean90 = t39.equals((java.lang.Object) minFinder44);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass10 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        boolean boolean9 = t7.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        boolean boolean25 = t17.equals((java.lang.Object) (-8.7d));
        minFinder10.chval(t17, (-100));
        boolean boolean28 = t7.equals((java.lang.Object) t17);
        minFinder0.add(t17);
        minFinder0.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        java.lang.Object obj37 = null;
        boolean boolean38 = t32.equals(obj37);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-1));
        minFinder39.chval(t44, 100);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        minFinder39.add(t48);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t57 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        minFinder52.clear();
        boolean boolean61 = t48.equals((java.lang.Object) minFinder52);
        minFinder52.clear();
        examples.MinFinder.T t63 = minFinder52.findMin();
        examples.MinFinder.T t64 = minFinder52.findMin();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        minFinder65.chval(t67, (int) ' ');
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        boolean boolean78 = t76.equals((java.lang.Object) 6);
        minFinder65.chval(t76, 97);
        int int81 = t76.getVal();
        minFinder52.chval(t76, 0);
        boolean boolean84 = t32.equals((java.lang.Object) t76);
        minFinder0.chval(t76, (-100));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-9) + "'", int81 == (-9));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        minFinder27.add(t41);
        examples.MinFinder.T t47 = new examples.MinFinder.T(5);
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        minFinder27.add(t47);
        java.lang.Class<?> wildcardClass51 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 5 + "'", int48 == 5);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 5 + "'", int49 == 5);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder8.clear();
        minFinder8.clear();
        minFinder8.clear();
        minFinder8.clear();
        boolean boolean18 = t5.equals((java.lang.Object) minFinder8);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        boolean boolean27 = t20.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        examples.MinFinder.T t42 = minFinder28.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder28.add(t44);
        boolean boolean48 = t20.equals((java.lang.Object) t44);
        minFinder8.add(t20);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t53 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t55 = minFinder50.findMin();
        examples.MinFinder.T t56 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        minFinder50.add(t59);
        minFinder8.add(t59);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        minFinder76.clear();
        minFinder76.clear();
        minFinder76.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        int int13 = t6.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList37);
        examples.MinFinder.T t52 = minFinder51.findMin();
        boolean boolean53 = t6.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t9);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        minFinder38.clear();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        minFinder40.clear();
        examples.MinFinder.T t54 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-1));
        minFinder57.chval(t62, 100);
        boolean boolean66 = t62.equals((java.lang.Object) 5L);
        minFinder40.add(t62);
        examples.MinFinder.T t68 = minFinder40.findMin();
        minFinder38.chval(t68, 10);
        int int71 = t68.getVal();
        minFinder0.chval(t68, 52);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        examples.MinFinder.T t22 = minFinder11.findMin();
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        minFinder28.chval(t30, (int) ' ');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        boolean boolean41 = t39.equals((java.lang.Object) 6);
        minFinder28.chval(t39, 97);
        boolean boolean44 = t26.equals((java.lang.Object) t39);
        int int45 = t26.getVal();
        boolean boolean46 = t22.equals((java.lang.Object) t26);
        minFinder0.add(t22);
        examples.MinFinder.T t48 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        boolean boolean3 = t1.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) '#');
        int int24 = t23.getVal();
        minFinder4.chval(t23, (int) (byte) 0);
        examples.MinFinder.T t27 = minFinder4.findMin();
        boolean boolean28 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t30, t32, t39, t44, t50, t52, t60 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder.T t71 = minFinder70.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        boolean boolean81 = t73.equals((java.lang.Object) 0.0f);
        minFinder70.add(t73);
        boolean boolean83 = t1.equals((java.lang.Object) t73);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        int int29 = t28.getVal();
        minFinder26.chval(t28, (-100));
        minFinder13.chval(t28, 0);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        java.lang.Object obj40 = null;
        boolean boolean41 = t35.equals(obj40);
        minFinder13.add(t35);
        boolean boolean43 = t12.equals((java.lang.Object) t35);
        int int44 = t35.getVal();
        int int45 = t35.getVal();
        minFinder2.chval(t35, 8);
        minFinder2.clear();
        java.lang.Class<?> wildcardClass49 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t46 = minFinder38.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList70);
        examples.MinFinder.T t84 = minFinder83.findMin();
        examples.MinFinder minFinder85 = new examples.MinFinder();
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        int int88 = t87.getVal();
        int int89 = t87.getVal();
        int int90 = t87.getVal();
        int int91 = t87.getVal();
        int int92 = t87.getVal();
        minFinder85.chval(t87, (int) ' ');
        boolean boolean95 = t84.equals((java.lang.Object) t87);
        minFinder38.chval(t87, 8);
        int int98 = t87.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-3) + "'", int98 == (-3));
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        minFinder10.chval(t12, (int) ' ');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-9));
        boolean boolean23 = t21.equals((java.lang.Object) 6);
        minFinder10.chval(t21, 97);
        boolean boolean26 = t8.equals((java.lang.Object) t21);
        minFinder0.add(t8);
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        boolean boolean36 = t29.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        minFinder37.clear();
        examples.MinFinder.T t51 = minFinder37.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        boolean boolean55 = t53.equals((java.lang.Object) ' ');
        minFinder37.add(t53);
        boolean boolean57 = t29.equals((java.lang.Object) t53);
        minFinder0.add(t53);
        int int59 = t53.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) '#');
        boolean boolean3 = t1.equals((java.lang.Object) 9L);
        boolean boolean5 = t1.equals((java.lang.Object) (-100L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        int int6 = t3.getVal();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        minFinder7.chval(t13, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-9));
        int int23 = t22.getVal();
        minFinder20.chval(t22, (-100));
        minFinder7.chval(t22, 0);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T(3);
        minFinder48.chval(t51, (int) (short) -1);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        minFinder48.add(t57);
        minFinder48.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) (short) 0);
        minFinder48.chval(t63, (int) '4');
        minFinder34.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        boolean boolean73 = t63.equals((java.lang.Object) t68);
        int int74 = t63.getVal();
        boolean boolean75 = t31.equals((java.lang.Object) t63);
        minFinder7.add(t63);
        boolean boolean77 = t3.equals((java.lang.Object) minFinder7);
        minFinder7.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-9) + "'", int23 == (-9));
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (short) 100);
        minFinder41.add(t44);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        minFinder46.add(t55);
        minFinder46.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 0);
        minFinder46.chval(t61, (int) '4');
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder64.chval(t67, (int) (short) -1);
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder70.chval(t73, (int) (short) -1);
        minFinder64.add(t73);
        minFinder64.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) (short) 0);
        minFinder64.chval(t79, (int) '4');
        minFinder46.add(t79);
        minFinder41.add(t79);
        minFinder41.clear();
        minFinder41.clear();
        boolean boolean86 = t9.equals((java.lang.Object) minFinder41);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = minFinder27.findMin();
        examples.MinFinder.T t33 = minFinder27.findMin();
        examples.MinFinder.T t34 = minFinder27.findMin();
        int int35 = t34.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        minFinder6.add(t15);
        int int19 = t15.getVal();
        minFinder0.add(t15);
        examples.MinFinder.T t21 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(t21);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        int int5 = t4.getVal();
        int int6 = t4.getVal();
        int int7 = t4.getVal();
        int int8 = t4.getVal();
        int int9 = t4.getVal();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t2, t4, t11, t16, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        minFinder42.add(t44);
        examples.MinFinder.T t46 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder48.add(t57);
        examples.MinFinder.T t59 = minFinder48.findMin();
        minFinder42.add(t59);
        examples.MinFinder.T t61 = minFinder42.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        examples.MinFinder.T[] tArray84 = new examples.MinFinder.T[] { t63, t65, t72, t74, t82 };
        java.util.ArrayList<examples.MinFinder.T> tList85 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList85, tArray84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList85);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList85);
        examples.MinFinder.T t90 = minFinder89.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) (short) 100);
        minFinder89.add(t92);
        examples.MinFinder.T t94 = minFinder89.findMin();
        boolean boolean95 = t61.equals((java.lang.Object) minFinder89);
        minFinder0.add(t61);
        examples.MinFinder.T t97 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass99 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
        org.junit.Assert.assertNotNull(tArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(t97);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t47 = minFinder41.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-7));
        minFinder41.add(t49);
        examples.MinFinder.T t51 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNotNull(t51);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        boolean boolean25 = t18.equals((java.lang.Object) 0.0d);
        boolean boolean27 = t18.equals((java.lang.Object) (-4.6d));
        minFinder0.add(t18);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = null;
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t15, t17, t24, t29, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        minFinder55.add(t57);
        minFinder55.clear();
        minFinder55.clear();
        examples.MinFinder.T t61 = minFinder55.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) (byte) 100);
        int int64 = t63.getVal();
        minFinder55.chval(t63, (int) '4');
        minFinder0.chval(t63, 9);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 100 + "'", int64 == 100);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        boolean boolean51 = t37.equals((java.lang.Object) minFinder38);
        minFinder38.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder38.chval(t54, 1);
        minFinder23.add(t54);
        boolean boolean58 = t19.equals((java.lang.Object) t54);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-1));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        boolean boolean63 = t19.equals((java.lang.Object) t60);
        minFinder0.add(t60);
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        minFinder23.add(t37);
        int int42 = t37.getVal();
        minFinder10.add(t37);
        minFinder0.add(t37);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        minFinder45.chval(t51, 0);
        minFinder45.clear();
        examples.MinFinder.T t59 = minFinder45.findMin();
        minFinder45.clear();
        minFinder45.clear();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-1));
        minFinder62.chval(t67, 100);
        boolean boolean71 = t67.equals((java.lang.Object) 5L);
        minFinder45.add(t67);
        examples.MinFinder.T t73 = minFinder45.findMin();
        minFinder0.add(t73);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder75.chval(t78, (int) (short) -1);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        minFinder81.clear();
        minFinder81.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        int int87 = t86.getVal();
        minFinder81.add(t86);
        minFinder75.chval(t86, 5);
        boolean boolean91 = t73.equals((java.lang.Object) 5);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (short) 100);
        minFinder41.add(t44);
        int int46 = t44.getVal();
        minFinder0.chval(t44, (int) (byte) -1);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t20 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass21 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        minFinder2.clear();
        java.lang.Class<?> wildcardClass22 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder.T t39 = minFinder36.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t39);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t34 = minFinder32.findMin();
        examples.MinFinder.T t35 = minFinder32.findMin();
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t41 = minFinder36.findMin();
        minFinder36.clear();
        minFinder36.clear();
        examples.MinFinder.T t44 = minFinder36.findMin();
        examples.MinFinder.T t45 = minFinder36.findMin();
        examples.MinFinder.T t46 = minFinder36.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) (-1));
        minFinder36.chval(t48, (-2));
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) 'a');
        int int76 = t75.getVal();
        examples.MinFinder.T[] tArray77 = new examples.MinFinder.T[] { t56, t58, t65, t67, t75 };
        java.util.ArrayList<examples.MinFinder.T> tList78 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList78, tArray77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList78);
        java.lang.Class<?> wildcardClass82 = tList78.getClass();
        boolean boolean83 = t54.equals((java.lang.Object) tList78);
        minFinder36.add(t54);
        int int85 = t54.getVal();
        int int86 = t54.getVal();
        minFinder32.add(t54);
        int int88 = t54.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertNotNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertNotNull(tArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 3 + "'", int88 == 3);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t34 = minFinder32.findMin();
        examples.MinFinder.T t35 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        int int60 = t59.getVal();
        minFinder52.chval(t59, 10);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        minFinder63.chval(t69, 0);
        minFinder52.add(t69);
        minFinder41.add(t69);
        examples.MinFinder.T t78 = minFinder41.findMin();
        examples.MinFinder.T t79 = minFinder41.findMin();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertNotNull(t79);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t21 = minFinder0.findMin();
        examples.MinFinder.T t22 = minFinder0.findMin();
        examples.MinFinder.T t23 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t23);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t9);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        int int40 = t39.getVal();
        minFinder34.add(t39);
        examples.MinFinder.T t43 = new examples.MinFinder.T(1);
        boolean boolean44 = t39.equals((java.lang.Object) t43);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        minFinder45.chval(t51, 0);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        boolean boolean61 = t59.equals((java.lang.Object) (-1));
        int int62 = t59.getVal();
        minFinder45.chval(t59, 0);
        minFinder45.clear();
        examples.MinFinder.T t66 = minFinder45.findMin();
        boolean boolean67 = t39.equals((java.lang.Object) t66);
        // The following exception was thrown during execution in test generation
        try {
            minFinder29.add(t66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        boolean boolean39 = t29.equals((java.lang.Object) t34);
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        boolean boolean74 = t60.equals((java.lang.Object) minFinder61);
        minFinder61.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder61.chval(t77, 1);
        minFinder46.add(t77);
        boolean boolean81 = t42.equals((java.lang.Object) t77);
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        minFinder82.clear();
        minFinder82.clear();
        examples.MinFinder.T t87 = new examples.MinFinder.T((int) 'a');
        int int88 = t87.getVal();
        minFinder82.add(t87);
        examples.MinFinder.T t91 = new examples.MinFinder.T(3);
        minFinder82.add(t91);
        examples.MinFinder.T t93 = minFinder82.findMin();
        boolean boolean94 = t77.equals((java.lang.Object) t93);
        boolean boolean95 = t34.equals((java.lang.Object) boolean94);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 97 + "'", int88 == 97);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        minFinder48.clear();
        examples.MinFinder.T t50 = minFinder48.findMin();
        examples.MinFinder.T t51 = minFinder48.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t51);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        boolean boolean55 = t48.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder56.chval(t62, 0);
        minFinder56.clear();
        examples.MinFinder.T t70 = minFinder56.findMin();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        boolean boolean74 = t72.equals((java.lang.Object) ' ');
        minFinder56.add(t72);
        boolean boolean76 = t48.equals((java.lang.Object) t72);
        int int77 = t48.getVal();
        int int78 = t48.getVal();
        minFinder43.add(t48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        examples.MinFinder.T t92 = minFinder41.findMin();
        examples.MinFinder.T t93 = minFinder41.findMin();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertNotNull(t93);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t19, t21, t28, t33, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        minFinder59.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder61.add(t66);
        examples.MinFinder.T t70 = new examples.MinFinder.T(1);
        boolean boolean71 = t66.equals((java.lang.Object) t70);
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        minFinder59.chval(t70, (int) 'a');
        int int76 = t70.getVal();
        minFinder0.add(t70);
        java.lang.Class<?> wildcardClass78 = t70.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t49 = minFinder44.findMin();
        minFinder44.clear();
        minFinder44.clear();
        examples.MinFinder.T t52 = minFinder44.findMin();
        examples.MinFinder.T t53 = null;
        minFinder44.chval(t53, (-9));
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        java.lang.Class<?> wildcardClass85 = tList81.getClass();
        boolean boolean86 = t57.equals((java.lang.Object) tList81);
        int int87 = t57.getVal();
        minFinder44.chval(t57, (-9));
        minFinder41.chval(t57, (-8));
        examples.MinFinder.T t92 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass93 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        int int20 = t1.getVal();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        minFinder21.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        int int29 = t28.getVal();
        minFinder21.chval(t28, 10);
        examples.MinFinder.T t32 = minFinder21.findMin();
        examples.MinFinder.T t33 = minFinder21.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-1));
        minFinder34.chval(t39, 100);
        examples.MinFinder.T t43 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        minFinder44.chval(t50, 0);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        int int60 = t59.getVal();
        minFinder57.chval(t59, (-100));
        minFinder44.chval(t59, 0);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        java.lang.Object obj71 = null;
        boolean boolean72 = t66.equals(obj71);
        minFinder44.add(t66);
        boolean boolean74 = t43.equals((java.lang.Object) t66);
        minFinder34.chval(t43, (int) ' ');
        minFinder21.add(t43);
        java.lang.Class<?> wildcardClass78 = t43.getClass();
        boolean boolean79 = t1.equals((java.lang.Object) t43);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder0.add(t16);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t14);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder19.add(t33);
        int int38 = t33.getVal();
        minFinder0.add(t33);
        int int40 = t33.getVal();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t46 = minFinder41.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        boolean boolean66 = t58.equals((java.lang.Object) (-8.7d));
        minFinder51.chval(t58, (-100));
        boolean boolean69 = t48.equals((java.lang.Object) t58);
        minFinder41.add(t58);
        int int71 = t58.getVal();
        boolean boolean72 = t33.equals((java.lang.Object) t58);
        java.lang.Class<?> wildcardClass73 = t33.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t50 = minFinder48.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertNotNull(t50);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) '#');
        boolean boolean36 = t34.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder37.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 0);
        minFinder37.chval(t52, (int) '4');
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) '#');
        int int57 = t56.getVal();
        minFinder37.chval(t56, (int) (byte) 0);
        examples.MinFinder.T t60 = minFinder37.findMin();
        boolean boolean61 = t34.equals((java.lang.Object) minFinder37);
        int int62 = t34.getVal();
        minFinder0.add(t34);
        examples.MinFinder.T t64 = minFinder0.findMin();
        int int65 = t64.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder0.add(t47);
        examples.MinFinder.T t49 = minFinder0.findMin();
        int int50 = t49.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        minFinder22.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-1));
        minFinder22.chval(t37, (int) (byte) 1);
        minFinder0.chval(t37, (-7));
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) '#');
        int int44 = t43.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        java.lang.Class<?> wildcardClass74 = tList70.getClass();
        boolean boolean75 = t46.equals((java.lang.Object) tList70);
        boolean boolean76 = t43.equals((java.lang.Object) t46);
        minFinder0.chval(t43, 2);
        int int79 = t43.getVal();
        int int80 = t43.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 35 + "'", int79 == 35);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 35 + "'", int80 == 35);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass19 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = null;
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = t12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t12);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder.T t48 = minFinder47.findMin();
        int int49 = t48.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder0.add(t17);
        boolean boolean26 = t17.equals((java.lang.Object) 2L);
        int int27 = t17.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        int int33 = t32.getVal();
        examples.MinFinder.T[] tArray34 = new examples.MinFinder.T[] { t13, t15, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList35 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList35, tArray34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList35);
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        minFinder41.add(t43);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-1));
        minFinder45.chval(t50, 100);
        java.lang.Class<?> wildcardClass53 = minFinder45.getClass();
        boolean boolean54 = t43.equals((java.lang.Object) wildcardClass53);
        minFinder0.add(t43);
        examples.MinFinder.T t56 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(tArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(t56);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        minFinder39.add(t53);
        examples.MinFinder.T t55 = minFinder39.findMin();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-9));
        int int64 = t63.getVal();
        minFinder56.chval(t63, 10);
        int int67 = t63.getVal();
        minFinder39.add(t63);
        examples.MinFinder.T t69 = minFinder39.findMin();
        minFinder0.chval(t69, (int) (short) 100);
        minFinder0.clear();
        examples.MinFinder.T t73 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-9) + "'", int67 == (-9));
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertNull(t73);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        examples.MinFinder.T t36 = minFinder0.findMin();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        int int79 = t74.getVal();
        int int80 = t74.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t44, t46, t53, t58, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder.T t85 = minFinder84.findMin();
        examples.MinFinder.T t86 = minFinder84.findMin();
        examples.MinFinder.T t87 = minFinder84.findMin();
        int int88 = t87.getVal();
        minFinder37.add(t87);
        minFinder0.chval(t87, (-1));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertNotNull(t86);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t12, t14, t21, t26, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList50);
        boolean boolean57 = t1.equals((java.lang.Object) tList50);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList50);
        examples.MinFinder.T t62 = minFinder61.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(t62);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(2);
        minFinder0.add(t85);
        examples.MinFinder.T t87 = minFinder0.findMin();
        int int88 = t87.getVal();
        boolean boolean90 = t87.equals((java.lang.Object) (-8L));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        minFinder12.chval(t18, 0);
        minFinder12.clear();
        examples.MinFinder.T t26 = minFinder12.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) ' ');
        minFinder12.add(t28);
        examples.MinFinder.T t32 = minFinder12.findMin();
        minFinder0.chval(t32, 1);
        examples.MinFinder.T t35 = minFinder0.findMin();
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        minFinder36.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) (short) 0);
        minFinder36.chval(t51, (int) '4');
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) (short) 0);
        int int56 = t55.getVal();
        minFinder36.chval(t55, 100);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-9));
        int int62 = t61.getVal();
        minFinder59.chval(t61, (-100));
        minFinder36.add(t61);
        int int66 = t61.getVal();
        minFinder0.chval(t61, (-6));
        examples.MinFinder.T t69 = null;
        minFinder0.add(t69);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-9) + "'", int66 == (-9));
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        minFinder17.clear();
        examples.MinFinder.T t33 = minFinder17.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass34 = t33.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t33);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        int int56 = t50.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t20, t22, t29, t34, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList58);
        java.lang.Class<?> wildcardClass63 = minFinder62.getClass();
        boolean boolean64 = t18.equals((java.lang.Object) minFinder62);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-1));
        minFinder54.chval(t59, 100);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        minFinder54.add(t63);
        minFinder54.clear();
        boolean boolean68 = t30.equals((java.lang.Object) minFinder54);
        minFinder54.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        minFinder12.chval(t18, (int) ' ');
        boolean boolean27 = t9.equals((java.lang.Object) ' ');
        int int28 = t9.getVal();
        int int29 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 7 + "'", int28 == 7);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 0);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t18 = minFinder4.findMin();
        examples.MinFinder.T t19 = minFinder4.findMin();
        examples.MinFinder.T t20 = minFinder4.findMin();
        examples.MinFinder.T t21 = minFinder4.findMin();
        boolean boolean22 = t1.equals((java.lang.Object) t21);
        int int23 = t1.getVal();
        int int24 = t1.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNotNull(t21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        minFinder16.clear();
        examples.MinFinder.T t30 = minFinder16.findMin();
        minFinder16.clear();
        minFinder16.clear();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-1));
        minFinder33.chval(t38, 100);
        boolean boolean42 = t38.equals((java.lang.Object) 5L);
        minFinder16.add(t38);
        examples.MinFinder.T t44 = minFinder16.findMin();
        minFinder2.chval(t44, (int) (short) 10);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t44);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder2.add(t17);
        examples.MinFinder.T t20 = minFinder2.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t26 = minFinder21.findMin();
        minFinder21.clear();
        minFinder21.clear();
        examples.MinFinder.T t29 = minFinder21.findMin();
        examples.MinFinder.T t30 = minFinder21.findMin();
        examples.MinFinder.T t31 = minFinder21.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        boolean boolean35 = t33.equals((java.lang.Object) (-1));
        minFinder21.chval(t33, (-2));
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t41 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        minFinder38.chval(t44, 0);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        int int54 = t53.getVal();
        minFinder51.chval(t53, (-100));
        minFinder38.chval(t53, 0);
        minFinder21.add(t53);
        examples.MinFinder.T t60 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder62.chval(t68, 0);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-9));
        int int78 = t77.getVal();
        minFinder75.chval(t77, (-100));
        minFinder62.chval(t77, 0);
        examples.MinFinder.T t84 = new examples.MinFinder.T((-3));
        int int85 = t84.getVal();
        int int86 = t84.getVal();
        int int87 = t84.getVal();
        int int88 = t84.getVal();
        java.lang.Object obj89 = null;
        boolean boolean90 = t84.equals(obj89);
        minFinder62.add(t84);
        examples.MinFinder.T t92 = minFinder62.findMin();
        minFinder21.chval(t92, (int) '4');
        minFinder2.add(t92);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-9) + "'", int54 == (-9));
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-9) + "'", int78 == (-9));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(t92);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t14, t16, t23, t28, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder0.add(t59);
        java.lang.Class<?> wildcardClass61 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-1));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Object obj4 = null;
        boolean boolean5 = t1.equals(obj4);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t9 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        minFinder6.chval(t12, 0);
        minFinder6.clear();
        examples.MinFinder.T t20 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder37.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 0);
        minFinder37.chval(t52, (int) '4');
        minFinder23.add(t52);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        boolean boolean62 = t52.equals((java.lang.Object) t57);
        int int63 = t57.getVal();
        minFinder6.add(t57);
        examples.MinFinder.T t65 = minFinder6.findMin();
        boolean boolean66 = t1.equals((java.lang.Object) t65);
        int int67 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        boolean boolean27 = t13.equals((java.lang.Object) minFinder14);
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        int int30 = t29.getVal();
        minFinder14.chval(t29, (-5));
        examples.MinFinder.T t34 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        minFinder35.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        minFinder35.add(t40);
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder35.add(t44);
        boolean boolean46 = t34.equals((java.lang.Object) t44);
        int int47 = t44.getVal();
        minFinder14.chval(t44, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        boolean boolean58 = t51.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        minFinder59.clear();
        examples.MinFinder.T t62 = minFinder59.findMin();
        minFinder59.clear();
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        minFinder59.chval(t65, 0);
        minFinder59.clear();
        examples.MinFinder.T t73 = minFinder59.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        boolean boolean77 = t75.equals((java.lang.Object) ' ');
        minFinder59.add(t75);
        boolean boolean79 = t51.equals((java.lang.Object) t75);
        minFinder14.add(t51);
        int int81 = t51.getVal();
        minFinder0.add(t51);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(10);
        minFinder0.add(t7);
        minFinder0.clear();
        org.junit.Assert.assertNull(t5);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) (-1));
        int int81 = t78.getVal();
        minFinder64.chval(t78, 0);
        minFinder63.add(t78);
        examples.MinFinder.T t85 = minFinder63.findMin();
        int int86 = t85.getVal();
        minFinder0.add(t85);
        java.lang.Class<?> wildcardClass88 = t85.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        minFinder32.clear();
        java.lang.Class<?> wildcardClass35 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) '#');
        boolean boolean41 = t39.equals((java.lang.Object) 9L);
        minFinder37.add(t39);
        examples.MinFinder.T t43 = minFinder37.findMin();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        minFinder44.add(t53);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-9));
        minFinder44.add(t58);
        minFinder44.clear();
        minFinder44.clear();
        minFinder44.clear();
        minFinder44.clear();
        boolean boolean64 = t43.equals((java.lang.Object) minFinder44);
        int int65 = t43.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        int int52 = t50.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-1));
        minFinder49.chval(t54, 100);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        minFinder49.add(t58);
        minFinder2.add(t58);
        minFinder2.clear();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-1));
        minFinder64.chval(t69, 100);
        boolean boolean73 = t69.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        examples.MinFinder minFinder80 = new examples.MinFinder();
        examples.MinFinder.T t81 = minFinder80.findMin();
        examples.MinFinder.T t83 = new examples.MinFinder.T(3);
        minFinder80.chval(t83, (int) (short) -1);
        minFinder74.add(t83);
        minFinder74.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) (short) 0);
        minFinder74.chval(t89, (int) '4');
        boolean boolean92 = t69.equals((java.lang.Object) minFinder74);
        minFinder2.add(t69);
        examples.MinFinder.T t95 = new examples.MinFinder.T(7);
        boolean boolean96 = t69.equals((java.lang.Object) t95);
        int int97 = t69.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder.T t22 = minFinder0.findMin();
        int int23 = t22.getVal();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t29 = minFinder24.findMin();
        minFinder24.clear();
        minFinder24.clear();
        examples.MinFinder.T t32 = minFinder24.findMin();
        examples.MinFinder.T t33 = minFinder24.findMin();
        examples.MinFinder.T t34 = minFinder24.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        boolean boolean38 = t36.equals((java.lang.Object) (-1));
        minFinder24.chval(t36, (-2));
        examples.MinFinder.T t41 = minFinder24.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-9));
        boolean boolean45 = t43.equals((java.lang.Object) 6);
        int int46 = t43.getVal();
        minFinder24.add(t43);
        boolean boolean48 = t22.equals((java.lang.Object) t43);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-9) + "'", int46 == (-9));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        int int17 = t15.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        examples.MinFinder.T t37 = null;
        minFinder36.chval(t37, (-1));
        minFinder36.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder36.add(t50);
        examples.MinFinder.T t56 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        boolean boolean63 = t56.equals((java.lang.Object) minFinder57);
        int int64 = t56.getVal();
        minFinder36.add(t56);
        boolean boolean66 = t1.equals((java.lang.Object) minFinder36);
        minFinder36.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        java.lang.Class<?> wildcardClass79 = tList56.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) (byte) 1);
        minFinder0.chval(t12, 4);
        examples.MinFinder.T t16 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        int int33 = t32.getVal();
        minFinder30.chval(t32, (-100));
        minFinder17.chval(t32, 0);
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        java.lang.Object obj44 = null;
        boolean boolean45 = t39.equals(obj44);
        minFinder17.add(t39);
        boolean boolean47 = t16.equals((java.lang.Object) t39);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList71);
        boolean boolean83 = t16.equals((java.lang.Object) tList71);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder94 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder95 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder96 = new examples.MinFinder(tList71);
        boolean boolean97 = t12.equals((java.lang.Object) tList71);
        examples.MinFinder minFinder98 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder99 = new examples.MinFinder(tList71);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-9) + "'", int33 == (-9));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder0.chval(t64, 1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t73 = minFinder68.findMin();
        examples.MinFinder.T t74 = minFinder68.findMin();
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        minFinder75.clear();
        minFinder75.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) 'a');
        int int81 = t80.getVal();
        minFinder75.add(t80);
        examples.MinFinder.T t84 = new examples.MinFinder.T(3);
        minFinder75.add(t84);
        examples.MinFinder.T t86 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t89 = new examples.MinFinder.T((-3));
        boolean boolean91 = t89.equals((java.lang.Object) ' ');
        minFinder75.add(t89);
        minFinder68.chval(t89, (int) (byte) 10);
        minFinder0.add(t89);
        java.lang.Class<?> wildcardClass96 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(t86);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        int int20 = t19.getVal();
        java.lang.Class<?> wildcardClass21 = t19.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        minFinder21.chval(t27, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        int int82 = t81.getVal();
        boolean boolean83 = t27.equals((java.lang.Object) t81);
        minFinder0.add(t27);
        minFinder0.clear();
        examples.MinFinder.T t86 = minFinder0.findMin();
        examples.MinFinder.T t87 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass88 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        minFinder3.chval(t9, 0);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        int int20 = t17.getVal();
        minFinder3.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t24, t26, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList46);
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) (-1));
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        int int75 = t69.getVal();
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) 'a');
        int int78 = t77.getVal();
        examples.MinFinder.T[] tArray79 = new examples.MinFinder.T[] { t58, t60, t67, t69, t77 };
        java.util.ArrayList<examples.MinFinder.T> tList80 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList80, tArray79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList80);
        boolean boolean90 = t54.equals((java.lang.Object) minFinder89);
        boolean boolean91 = t52.equals((java.lang.Object) boolean90);
        minFinder3.add(t52);
        minFinder0.add(t52);
        minFinder0.clear();
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertNotNull(tArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) '#');
        int int18 = t17.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) int18);
        int int20 = t11.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 35 + "'", int18 == 35);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 97 + "'", int20 == 97);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) (byte) -1);
        minFinder41.add(t51);
        examples.MinFinder.T t53 = minFinder41.findMin();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        minFinder54.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-9));
        minFinder54.add(t68);
        examples.MinFinder.T t70 = minFinder54.findMin();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        minFinder71.clear();
        minFinder71.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        minFinder71.add(t76);
        minFinder71.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        minFinder71.add(t81);
        boolean boolean83 = t70.equals((java.lang.Object) t81);
        minFinder41.add(t81);
        java.lang.Class<?> wildcardClass85 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        boolean boolean11 = t1.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t1.equals((java.lang.Object) minFinder12);
        int int26 = t1.getVal();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t32 = minFinder27.findMin();
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder.T t35 = minFinder27.findMin();
        examples.MinFinder.T t36 = null;
        minFinder27.chval(t36, (-9));
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        minFinder39.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 0);
        minFinder39.chval(t54, (int) '4');
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        minFinder57.add(t66);
        minFinder57.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) (short) 0);
        minFinder57.chval(t72, (int) '4');
        minFinder39.add(t72);
        examples.MinFinder.T t76 = minFinder39.findMin();
        examples.MinFinder.T t77 = minFinder39.findMin();
        minFinder27.chval(t77, 0);
        boolean boolean80 = t1.equals((java.lang.Object) minFinder27);
        minFinder27.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        minFinder38.clear();
        minFinder38.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder21.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        minFinder21.add(t35);
        minFinder0.add(t35);
        int int39 = t35.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t16 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t19 = minFinder11.findMin();
        examples.MinFinder.T t20 = minFinder11.findMin();
        examples.MinFinder.T t21 = minFinder11.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        boolean boolean25 = t23.equals((java.lang.Object) (-1));
        minFinder11.chval(t23, (-2));
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-9));
        int int44 = t43.getVal();
        minFinder41.chval(t43, (-100));
        minFinder28.chval(t43, 0);
        minFinder11.add(t43);
        examples.MinFinder.T t50 = minFinder11.findMin();
        minFinder0.chval(t50, 10);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-9) + "'", int44 == (-9));
        org.junit.Assert.assertNotNull(t50);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass21 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        minFinder45.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t46);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t12, t14, t21, t26, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList50);
        boolean boolean57 = t1.equals((java.lang.Object) tList50);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList50);
        minFinder59.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = minFinder32.findMin();
        java.lang.Class<?> wildcardClass34 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t18, t20, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList40);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t48 = minFinder45.findMin();
        minFinder45.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        minFinder45.chval(t51, 0);
        minFinder45.clear();
        examples.MinFinder.T t59 = minFinder45.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        boolean boolean63 = t61.equals((java.lang.Object) ' ');
        minFinder45.add(t61);
        examples.MinFinder.T t65 = minFinder45.findMin();
        java.lang.Object obj66 = new java.lang.Object();
        boolean boolean67 = t65.equals(obj66);
        minFinder43.add(t65);
        examples.MinFinder.T t69 = minFinder43.findMin();
        minFinder0.chval(t69, 3);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(t69);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-1));
        minFinder4.chval(t9, 100);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        boolean boolean21 = t19.equals((java.lang.Object) (-1));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList45);
        boolean boolean55 = t19.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        boolean boolean62 = t19.equals((java.lang.Object) minFinder56);
        minFinder4.chval(t19, 97);
        minFinder4.clear();
        boolean boolean66 = t1.equals((java.lang.Object) minFinder4);
        boolean boolean68 = t1.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-9) + "'", int2 == (-9));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t31 = minFinder0.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder62.chval(t68, 0);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        boolean boolean78 = t76.equals((java.lang.Object) (-1));
        int int79 = t76.getVal();
        minFinder62.chval(t76, 0);
        minFinder61.add(t76);
        minFinder61.clear();
        boolean boolean84 = t31.equals((java.lang.Object) minFinder61);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNotNull(t31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        boolean boolean23 = t1.equals((java.lang.Object) t17);
        java.lang.Class<?> wildcardClass24 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        int int31 = t25.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        int int34 = t33.getVal();
        examples.MinFinder.T[] tArray35 = new examples.MinFinder.T[] { t14, t16, t23, t25, t33 };
        java.util.ArrayList<examples.MinFinder.T> tList36 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList36, tArray35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList36);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) (-1));
        minFinder41.add(t43);
        examples.MinFinder.T t48 = new examples.MinFinder.T(5);
        minFinder41.add(t48);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t51, t53, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        java.lang.Class<?> wildcardClass77 = tList73.getClass();
        boolean boolean78 = t48.equals((java.lang.Object) wildcardClass77);
        boolean boolean79 = t9.equals((java.lang.Object) t48);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(tArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        int int11 = t5.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 97 + "'", int9 == 97);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t7 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        minFinder2.chval(t25, (int) ' ');
        minFinder0.add(t25);
        java.lang.Object obj32 = null;
        boolean boolean33 = t25.equals(obj32);
        int int34 = t25.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        int int40 = t39.getVal();
        examples.MinFinder.T[] tArray41 = new examples.MinFinder.T[] { t20, t22, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList42 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList42, tArray41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList42);
        java.lang.Class<?> wildcardClass46 = tList42.getClass();
        boolean boolean47 = t18.equals((java.lang.Object) tList42);
        minFinder0.add(t18);
        examples.MinFinder.T t49 = minFinder0.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        boolean boolean58 = t51.equals((java.lang.Object) 0.0d);
        minFinder0.add(t51);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertNotNull(tArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t28 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        minFinder25.chval(t31, 0);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder25.chval(t40, (-5));
        boolean boolean44 = t19.equals((java.lang.Object) minFinder25);
        int int45 = t19.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 100 + "'", int45 == 100);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-1));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Object obj4 = null;
        boolean boolean5 = t1.equals(obj4);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t9 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        minFinder6.chval(t12, 0);
        minFinder6.clear();
        examples.MinFinder.T t20 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder37.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 0);
        minFinder37.chval(t52, (int) '4');
        minFinder23.add(t52);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        boolean boolean62 = t52.equals((java.lang.Object) t57);
        int int63 = t57.getVal();
        minFinder6.add(t57);
        examples.MinFinder.T t65 = minFinder6.findMin();
        boolean boolean66 = t1.equals((java.lang.Object) t65);
        int int67 = t65.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        int int35 = t31.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean39 = t37.equals((java.lang.Object) 'a');
        int int40 = t37.getVal();
        boolean boolean41 = t31.equals((java.lang.Object) t37);
        int int42 = t31.getVal();
        java.lang.Class<?> wildcardClass43 = t31.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t49 = null;
        minFinder41.chval(t49, 100);
        examples.MinFinder.T t52 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass53 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        boolean boolean9 = t7.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        boolean boolean25 = t17.equals((java.lang.Object) (-8.7d));
        minFinder10.chval(t17, (-100));
        boolean boolean28 = t7.equals((java.lang.Object) t17);
        minFinder0.add(t17);
        examples.MinFinder.T t30 = minFinder0.findMin();
        int int31 = t30.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        boolean boolean11 = t9.equals((java.lang.Object) (-1));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        int int33 = t32.getVal();
        examples.MinFinder.T[] tArray34 = new examples.MinFinder.T[] { t13, t15, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList35 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList35, tArray34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList35);
        boolean boolean45 = t9.equals((java.lang.Object) minFinder44);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        boolean boolean52 = t9.equals((java.lang.Object) minFinder46);
        minFinder0.add(t9);
        int int54 = t9.getVal();
        int int55 = t9.getVal();
        int int56 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(tArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t43 = minFinder41.findMin();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t44);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        examples.MinFinder.T t37 = null;
        minFinder36.chval(t37, (-1));
        minFinder36.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder36.add(t50);
        examples.MinFinder.T t56 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        boolean boolean63 = t56.equals((java.lang.Object) minFinder57);
        int int64 = t56.getVal();
        minFinder36.add(t56);
        boolean boolean66 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder.T t68 = new examples.MinFinder.T(6);
        int int69 = t68.getVal();
        minFinder36.add(t68);
        minFinder36.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 10 + "'", int64 == 10);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 6 + "'", int69 == 6);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) '#');
        boolean boolean36 = t34.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder37.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 0);
        minFinder37.chval(t52, (int) '4');
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) '#');
        int int57 = t56.getVal();
        minFinder37.chval(t56, (int) (byte) 0);
        examples.MinFinder.T t60 = minFinder37.findMin();
        boolean boolean61 = t34.equals((java.lang.Object) minFinder37);
        int int62 = t34.getVal();
        minFinder0.add(t34);
        examples.MinFinder.T t64 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 35 + "'", int57 == 35);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 35 + "'", int62 == 35);
        org.junit.Assert.assertNotNull(t64);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        boolean boolean68 = t29.equals((java.lang.Object) boolean67);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t74 = minFinder69.findMin();
        examples.MinFinder.T t75 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        minFinder69.add(t78);
        boolean boolean82 = t29.equals((java.lang.Object) t78);
        int int83 = t78.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        int int15 = t6.getVal();
        int int16 = t6.getVal();
        int int17 = t6.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) 10);
        minFinder13.add(t27);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        examples.MinFinder.T t62 = minFinder25.findMin();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        examples.MinFinder.T t71 = minFinder63.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        boolean boolean80 = t73.equals((java.lang.Object) 100.0d);
        minFinder63.add(t73);
        int int82 = t73.getVal();
        minFinder25.add(t73);
        minFinder25.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        boolean boolean52 = t42.equals((java.lang.Object) t47);
        int int53 = t47.getVal();
        minFinder0.add(t47);
        examples.MinFinder.T t55 = null;
        minFinder0.chval(t55, 97);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList81);
        examples.MinFinder.T t91 = minFinder90.findMin();
        examples.MinFinder.T t92 = minFinder90.findMin();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t92, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertNotNull(t92);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t18 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        minFinder28.clear();
        minFinder28.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList56);
        minFinder85.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        minFinder32.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        minFinder32.chval(t47, (int) '4');
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        minFinder50.clear();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) (short) 0);
        minFinder50.chval(t65, (int) '4');
        minFinder32.add(t65);
        minFinder27.add(t65);
        java.lang.Class<?> wildcardClass70 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        int int29 = t28.getVal();
        minFinder26.chval(t28, (-100));
        minFinder13.chval(t28, 0);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        java.lang.Object obj40 = null;
        boolean boolean41 = t35.equals(obj40);
        minFinder13.add(t35);
        boolean boolean43 = t12.equals((java.lang.Object) t35);
        int int44 = t35.getVal();
        int int45 = t35.getVal();
        minFinder2.chval(t35, 8);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        minFinder48.chval(t54, 0);
        minFinder48.clear();
        examples.MinFinder.T t62 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t69 = minFinder64.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        boolean boolean73 = t71.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        int int86 = t81.getVal();
        int int87 = t81.getVal();
        boolean boolean89 = t81.equals((java.lang.Object) (-8.7d));
        minFinder74.chval(t81, (-100));
        boolean boolean92 = t71.equals((java.lang.Object) t81);
        minFinder64.add(t81);
        examples.MinFinder.T t95 = new examples.MinFinder.T((int) (short) -1);
        minFinder64.add(t95);
        minFinder48.add(t95);
        minFinder2.add(t95);
        examples.MinFinder.T t99 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(t99);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        boolean boolean37 = t35.equals((java.lang.Object) ' ');
        minFinder0.add(t35);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T[] tArray77 = new examples.MinFinder.T[] { t40, t42, t49, t54, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList78 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList78, tArray77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList78);
        minFinder81.clear();
        examples.MinFinder.T t83 = null;
        minFinder81.chval(t83, 0);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-9));
        boolean boolean89 = t87.equals((java.lang.Object) 6);
        int int90 = t87.getVal();
        minFinder81.chval(t87, (int) (byte) 10);
        int int93 = t87.getVal();
        int int94 = t87.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t87, (-3));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertNotNull(tArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-9) + "'", int90 == (-9));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-9) + "'", int93 == (-9));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-9) + "'", int94 == (-9));
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        minFinder43.clear();
        examples.MinFinder.T t45 = minFinder43.findMin();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder46.clear();
        minFinder46.clear();
        minFinder46.clear();
        minFinder46.clear();
        minFinder46.clear();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        minFinder57.add(t62);
        minFinder57.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        minFinder57.add(t67);
        int int69 = t67.getVal();
        minFinder46.chval(t67, 4);
        minFinder43.chval(t67, (int) (short) 0);
        int int74 = t67.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList39);
        java.lang.Class<?> wildcardClass54 = tList39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass54);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(3);
        minFinder9.chval(t12, (int) (short) -1);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        minFinder9.add(t18);
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        minFinder9.add(t23);
        examples.MinFinder.T t25 = minFinder9.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder26.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        minFinder26.add(t36);
        boolean boolean38 = t25.equals((java.lang.Object) t36);
        minFinder0.add(t36);
        java.lang.Class<?> wildcardClass40 = minFinder0.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNotNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t21 = minFinder16.findMin();
        minFinder16.clear();
        minFinder16.clear();
        examples.MinFinder.T t24 = minFinder16.findMin();
        examples.MinFinder.T t25 = minFinder16.findMin();
        examples.MinFinder.T t26 = minFinder16.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        minFinder16.chval(t28, (-2));
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t36, t38, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        java.lang.Class<?> wildcardClass62 = tList58.getClass();
        boolean boolean63 = t34.equals((java.lang.Object) tList58);
        minFinder16.add(t34);
        int int65 = t34.getVal();
        minFinder0.add(t34);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        minFinder44.add(t56);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-1));
        minFinder62.chval(t67, 100);
        boolean boolean71 = t67.equals((java.lang.Object) 5L);
        minFinder44.add(t67);
        minFinder44.clear();
        java.lang.Class<?> wildcardClass74 = minFinder44.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        minFinder0.clear();
        java.lang.Class<?> wildcardClass11 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) '4');
        int int26 = t25.getVal();
        minFinder0.add(t25);
        java.lang.Class<?> wildcardClass28 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass40 = minFinder39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass40);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        minFinder18.chval(t24, (int) ' ');
        minFinder11.add(t24);
        minFinder0.add(t24);
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        minFinder36.clear();
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        minFinder39.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        minFinder39.add(t44);
        minFinder39.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t49);
        minFinder39.clear();
        minFinder39.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        boolean boolean61 = t54.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder62.chval(t68, 0);
        minFinder62.clear();
        examples.MinFinder.T t76 = minFinder62.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) ' ');
        minFinder62.add(t78);
        boolean boolean82 = t54.equals((java.lang.Object) t78);
        minFinder39.add(t54);
        minFinder36.add(t54);
        examples.MinFinder.T t85 = minFinder36.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(t85);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t34 = minFinder32.findMin();
        examples.MinFinder.T t35 = minFinder32.findMin();
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t41 = minFinder36.findMin();
        minFinder36.clear();
        minFinder36.clear();
        examples.MinFinder.T t44 = minFinder36.findMin();
        examples.MinFinder.T t45 = minFinder36.findMin();
        examples.MinFinder.T t46 = minFinder36.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) (-1));
        minFinder36.chval(t48, (-2));
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) 'a');
        int int76 = t75.getVal();
        examples.MinFinder.T[] tArray77 = new examples.MinFinder.T[] { t56, t58, t65, t67, t75 };
        java.util.ArrayList<examples.MinFinder.T> tList78 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList78, tArray77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList78);
        java.lang.Class<?> wildcardClass82 = tList78.getClass();
        boolean boolean83 = t54.equals((java.lang.Object) tList78);
        minFinder36.add(t54);
        int int85 = t54.getVal();
        int int86 = t54.getVal();
        minFinder32.add(t54);
        minFinder32.clear();
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertNotNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 97 + "'", int76 == 97);
        org.junit.Assert.assertNotNull(tArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 3 + "'", int86 == 3);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        examples.MinFinder.T t39 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-1));
        minFinder41.chval(t46, 100);
        examples.MinFinder.T t50 = new examples.MinFinder.T(7);
        minFinder41.chval(t50, (int) (byte) -1);
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        minFinder0.add(t50);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 7 + "'", int54 == 7);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t18 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t8, t10, t17, t22, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList46);
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t52 = minFinder50.findMin();
        int int53 = t52.getVal();
        minFinder0.chval(t52, 100);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        int int33 = t30.getVal();
        minFinder16.chval(t30, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        minFinder42.add(t47);
        minFinder36.chval(t47, 5);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-9));
        minFinder52.add(t66);
        minFinder36.chval(t66, (-10));
        minFinder16.chval(t66, (-1));
        minFinder2.chval(t66, 0);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        minFinder46.clear();
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder60.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 0);
        minFinder60.chval(t75, (int) '4');
        minFinder46.add(t75);
        minFinder41.add(t75);
        examples.MinFinder.T t80 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNotNull(t80);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) (-1));
        int int81 = t78.getVal();
        minFinder64.chval(t78, 0);
        minFinder63.add(t78);
        examples.MinFinder.T t85 = minFinder63.findMin();
        int int86 = t85.getVal();
        minFinder0.add(t85);
        examples.MinFinder.T t89 = new examples.MinFinder.T((-4));
        boolean boolean90 = t85.equals((java.lang.Object) t89);
        int int91 = t89.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-4) + "'", int91 == (-4));
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t19, t21, t28, t33, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        minFinder59.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        minFinder61.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder61.add(t66);
        examples.MinFinder.T t70 = new examples.MinFinder.T(1);
        boolean boolean71 = t66.equals((java.lang.Object) t70);
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        minFinder59.chval(t70, (int) 'a');
        int int76 = t70.getVal();
        minFinder0.add(t70);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t82 = minFinder78.findMin();
        boolean boolean83 = t70.equals((java.lang.Object) t82);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        boolean boolean17 = t10.equals((java.lang.Object) 100.0d);
        minFinder0.add(t10);
        minFinder0.clear();
        examples.MinFinder.T t20 = null;
        minFinder0.add(t20);
        examples.MinFinder.T t22 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) (byte) -1);
        minFinder41.add(t51);
        int int53 = t51.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        minFinder75.clear();
        examples.MinFinder.T t77 = minFinder75.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t77);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        minFinder39.chval(t45, 0);
        int int52 = t45.getVal();
        minFinder0.add(t45);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t20 = minFinder2.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-1));
        minFinder21.chval(t26, 100);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        minFinder21.add(t30);
        minFinder21.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        boolean boolean38 = t36.equals((java.lang.Object) (-1));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList62);
        boolean boolean72 = t36.equals((java.lang.Object) minFinder71);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        boolean boolean79 = t36.equals((java.lang.Object) minFinder73);
        minFinder21.chval(t36, 97);
        int int82 = t36.getVal();
        java.lang.Object obj83 = null;
        boolean boolean84 = t36.equals(obj83);
        minFinder2.add(t36);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder45.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder52.add(t66);
        examples.MinFinder.T t69 = minFinder52.findMin();
        minFinder45.chval(t69, (-1));
        boolean boolean72 = t43.equals((java.lang.Object) (-1));
        int int73 = t43.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        minFinder51.chval(t57, 0);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-9));
        int int67 = t66.getVal();
        minFinder64.chval(t66, (-100));
        minFinder51.chval(t66, 0);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        java.lang.Object obj78 = null;
        boolean boolean79 = t73.equals(obj78);
        minFinder51.add(t73);
        boolean boolean81 = t50.equals((java.lang.Object) t73);
        int int82 = t73.getVal();
        boolean boolean83 = t42.equals((java.lang.Object) t73);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-9) + "'", int67 == (-9));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        examples.MinFinder.T t16 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        boolean boolean54 = t19.equals((java.lang.Object) t50);
        minFinder8.chval(t50, (int) (short) 0);
        minFinder8.clear();
        examples.MinFinder.T t58 = minFinder8.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t60, t62, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder.T t87 = minFinder86.findMin();
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) (short) 100);
        minFinder86.add(t89);
        minFinder8.chval(t89, (int) (byte) 100);
        minFinder0.add(t89);
        int int94 = t89.getVal();
        java.lang.Object obj95 = null;
        boolean boolean96 = t89.equals(obj95);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 100 + "'", int94 == 100);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        minFinder0.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        minFinder0.add(t49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) '#');
        boolean boolean7 = t5.equals((java.lang.Object) 9L);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        minFinder8.add(t17);
        minFinder8.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) (short) 0);
        minFinder8.chval(t23, (int) '4');
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        int int28 = t27.getVal();
        minFinder8.chval(t27, (int) (byte) 0);
        examples.MinFinder.T t31 = minFinder8.findMin();
        boolean boolean32 = t5.equals((java.lang.Object) minFinder8);
        int int33 = t5.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T(35);
        boolean boolean36 = t5.equals((java.lang.Object) t35);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        examples.MinFinder.T t50 = minFinder37.findMin();
        boolean boolean51 = t5.equals((java.lang.Object) t50);
        minFinder0.chval(t50, (-3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 35 + "'", int28 == 35);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-2));
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t7 = minFinder2.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        boolean boolean16 = t9.equals((java.lang.Object) 0.0d);
        boolean boolean18 = t9.equals((java.lang.Object) (-4.6d));
        minFinder2.chval(t9, 7);
        minFinder2.clear();
        boolean boolean22 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-9));
        int int71 = t70.getVal();
        minFinder68.chval(t70, (-100));
        minFinder67.add(t70);
        minFinder0.add(t70);
        examples.MinFinder.T t76 = minFinder0.findMin();
        int int77 = t76.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-9) + "'", int71 == (-9));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        minFinder24.clear();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        minFinder38.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) (short) 0);
        minFinder38.chval(t53, (int) '4');
        minFinder24.add(t53);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        boolean boolean63 = t53.equals((java.lang.Object) t58);
        boolean boolean65 = t58.equals((java.lang.Object) (byte) 0);
        minFinder0.add(t58);
        java.lang.Object obj67 = null;
        boolean boolean68 = t58.equals(obj67);
        int int69 = t58.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(0);
        minFinder0.add(t2);
        examples.MinFinder.T t4 = minFinder0.findMin();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t6, t8, t15, t20, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t50 = minFinder48.findMin();
        int int51 = t50.getVal();
        boolean boolean52 = t4.equals((java.lang.Object) int51);
        org.junit.Assert.assertNotNull(t4);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t27 = minFinder19.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        minFinder30.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        minFinder30.add(t35);
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder30.add(t39);
        boolean boolean41 = t29.equals((java.lang.Object) t39);
        minFinder19.chval(t29, 100);
        int int44 = t29.getVal();
        minFinder0.add(t29);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t78 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        minFinder75.chval(t81, 0);
        examples.MinFinder.T t89 = new examples.MinFinder.T((-3));
        boolean boolean91 = t89.equals((java.lang.Object) (-1));
        int int92 = t89.getVal();
        minFinder75.chval(t89, 0);
        minFinder74.add(t89);
        examples.MinFinder.T t96 = minFinder74.findMin();
        int int97 = t96.getVal();
        int int98 = t96.getVal();
        minFinder42.add(t96);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertNotNull(t96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-3) + "'", int97 == (-3));
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-3) + "'", int98 == (-3));
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 0);
        int int2 = t1.getVal();
        java.lang.Class<?> wildcardClass3 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t46 = minFinder44.findMin();
        minFinder44.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(t46);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder34.add(t48);
        minFinder33.add(t48);
        examples.MinFinder.T t52 = minFinder33.findMin();
        examples.MinFinder.T t53 = minFinder33.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNotNull(t53);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder.T t23 = null;
        minFinder0.add(t23);
        examples.MinFinder.T t25 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t25);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        minFinder7.chval(t13, 0);
        minFinder7.clear();
        examples.MinFinder.T t21 = minFinder7.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        boolean boolean25 = t23.equals((java.lang.Object) ' ');
        minFinder7.add(t23);
        minFinder0.chval(t23, (int) ' ');
        int int29 = t23.getVal();
        int int30 = t23.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        minFinder26.chval(t28, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-9));
        boolean boolean39 = t37.equals((java.lang.Object) 6);
        minFinder26.chval(t37, 97);
        int int42 = t37.getVal();
        minFinder13.chval(t37, 0);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        boolean boolean64 = t56.equals((java.lang.Object) (-8.7d));
        minFinder49.chval(t56, (-100));
        boolean boolean67 = t46.equals((java.lang.Object) t56);
        int int68 = t56.getVal();
        minFinder13.add(t56);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        java.lang.Class<?> wildcardClass56 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        boolean boolean17 = t10.equals((java.lang.Object) 100.0d);
        minFinder0.add(t10);
        minFinder0.clear();
        examples.MinFinder.T t20 = null;
        minFinder0.add(t20);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t25 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        minFinder22.chval(t28, 0);
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        boolean boolean50 = t36.equals((java.lang.Object) minFinder37);
        minFinder37.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder37.chval(t53, 1);
        minFinder22.add(t53);
        examples.MinFinder.T t57 = minFinder22.findMin();
        int int58 = t57.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(t57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t23 = minFinder2.findMin();
        examples.MinFinder.T t24 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t24);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 0);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-9));
        boolean boolean50 = t48.equals((java.lang.Object) 6);
        int int51 = t48.getVal();
        minFinder42.chval(t48, (int) (byte) 10);
        examples.MinFinder.T t54 = null;
        minFinder42.add(t54);
        examples.MinFinder.T t56 = minFinder42.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-9) + "'", int51 == (-9));
        org.junit.Assert.assertNull(t56);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        java.lang.Class<?> wildcardClass25 = t10.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder.T t48 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-1));
        minFinder51.chval(t56, 100);
        boolean boolean60 = t56.equals((java.lang.Object) 5L);
        minFinder34.add(t56);
        examples.MinFinder.T t62 = minFinder34.findMin();
        int int63 = t62.getVal();
        minFinder0.add(t62);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        minFinder33.add(t42);
        boolean boolean46 = t32.equals((java.lang.Object) minFinder33);
        examples.MinFinder.T t47 = minFinder33.findMin();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        minFinder48.chval(t54, 0);
        minFinder48.clear();
        boolean boolean62 = t47.equals((java.lang.Object) minFinder48);
        minFinder0.add(t47);
        minFinder0.clear();
        examples.MinFinder.T t65 = minFinder0.findMin();
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        minFinder66.chval(t72, 0);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-9));
        int int82 = t81.getVal();
        minFinder79.chval(t81, (-100));
        minFinder66.chval(t81, 0);
        examples.MinFinder.T t88 = new examples.MinFinder.T((-3));
        int int89 = t88.getVal();
        int int90 = t88.getVal();
        int int91 = t88.getVal();
        int int92 = t88.getVal();
        java.lang.Object obj93 = null;
        boolean boolean94 = t88.equals(obj93);
        minFinder66.add(t88);
        int int96 = t88.getVal();
        minFinder0.add(t88);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-9) + "'", int82 == (-9));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-3) + "'", int96 == (-3));
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        minFinder37.add(t51);
        minFinder32.chval(t51, (int) (short) 100);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList81);
        examples.MinFinder.T t89 = new examples.MinFinder.T((int) 'a');
        minFinder87.add(t89);
        examples.MinFinder.T t92 = new examples.MinFinder.T((int) 'a');
        minFinder87.add(t92);
        int int94 = t92.getVal();
        minFinder32.add(t92);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 97 + "'", int94 == 97);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) (short) 0);
        minFinder19.chval(t34, (int) '4');
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) (short) 0);
        int int39 = t38.getVal();
        minFinder19.chval(t38, 100);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) (-1));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList69);
        boolean boolean77 = t43.equals((java.lang.Object) minFinder76);
        boolean boolean78 = t38.equals((java.lang.Object) t43);
        minFinder0.add(t43);
        java.lang.Class<?> wildcardClass80 = t43.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder10.chval(t25, 0);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        java.lang.Object obj37 = null;
        boolean boolean38 = t32.equals(obj37);
        minFinder10.add(t32);
        boolean boolean40 = t9.equals((java.lang.Object) t32);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        examples.MinFinder.T[] tArray63 = new examples.MinFinder.T[] { t42, t44, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList64 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList64, tArray63);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList64);
        boolean boolean76 = t9.equals((java.lang.Object) tList64);
        int int77 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t80 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(tArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertNull(t80);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(2);
        minFinder0.add(t17);
        int int19 = t17.getVal();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        minFinder20.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        int int26 = t25.getVal();
        minFinder20.add(t25);
        examples.MinFinder.T t29 = new examples.MinFinder.T(1);
        boolean boolean30 = t25.equals((java.lang.Object) t29);
        int int31 = t29.getVal();
        boolean boolean32 = t17.equals((java.lang.Object) t29);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        examples.MinFinder.T t89 = minFinder76.findMin();
        examples.MinFinder.T t90 = null;
        minFinder76.chval(t90, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t89);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder10.chval(t25, 0);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        java.lang.Object obj37 = null;
        boolean boolean38 = t32.equals(obj37);
        minFinder10.add(t32);
        boolean boolean40 = t9.equals((java.lang.Object) t32);
        minFinder0.chval(t9, (int) ' ');
        int int43 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        int int47 = t41.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        java.lang.Object obj6 = null;
        boolean boolean7 = t1.equals(obj6);
        int int8 = t1.getVal();
        java.lang.Class<?> wildcardClass9 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t4 = null;
        minFinder0.add(t4);
        minFinder0.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t8, t10, t17, t22, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder48.add(t50);
        examples.MinFinder.T t52 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        minFinder54.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder54.add(t59);
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder54.add(t63);
        examples.MinFinder.T t65 = minFinder54.findMin();
        minFinder48.add(t65);
        int int67 = t65.getVal();
        minFinder0.chval(t65, (int) ' ');
        java.lang.Class<?> wildcardClass70 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) '#');
        int int20 = t19.getVal();
        minFinder0.chval(t19, (int) (byte) 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        minFinder23.add(t32);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder23.add(t37);
        examples.MinFinder.T t40 = minFinder23.findMin();
        examples.MinFinder.T t41 = minFinder23.findMin();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        minFinder42.add(t56);
        int int61 = t56.getVal();
        minFinder23.add(t56);
        int int63 = t56.getVal();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t69 = minFinder64.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        boolean boolean73 = t71.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        int int86 = t81.getVal();
        int int87 = t81.getVal();
        boolean boolean89 = t81.equals((java.lang.Object) (-8.7d));
        minFinder74.chval(t81, (-100));
        boolean boolean92 = t71.equals((java.lang.Object) t81);
        minFinder64.add(t81);
        int int94 = t81.getVal();
        boolean boolean95 = t56.equals((java.lang.Object) t81);
        minFinder0.chval(t56, (-3));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertNotNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        int int56 = t50.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t20, t22, t29, t34, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList58);
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder0.add(t64);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(t64);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        minFinder32.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        minFinder32.chval(t47, (int) '4');
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        minFinder50.clear();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) (short) 0);
        minFinder50.chval(t65, (int) '4');
        minFinder32.add(t65);
        minFinder27.add(t65);
        minFinder27.clear();
        java.lang.Class<?> wildcardClass71 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t64 = minFinder61.findMin();
        minFinder61.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        minFinder61.chval(t67, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        int int77 = t76.getVal();
        minFinder74.chval(t76, (-100));
        minFinder61.chval(t76, 0);
        examples.MinFinder.T t83 = new examples.MinFinder.T((-3));
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        int int87 = t83.getVal();
        java.lang.Object obj88 = null;
        boolean boolean89 = t83.equals(obj88);
        minFinder61.add(t83);
        minFinder41.add(t83);
        java.lang.Class<?> wildcardClass92 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        int int47 = t46.getVal();
        examples.MinFinder.T[] tArray48 = new examples.MinFinder.T[] { t27, t29, t36, t38, t46 };
        java.util.ArrayList<examples.MinFinder.T> tList49 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList49, tArray48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList49);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList49);
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        minFinder55.add(t57);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        minFinder59.clear();
        examples.MinFinder.T t62 = minFinder59.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-1));
        minFinder59.chval(t64, 100);
        java.lang.Class<?> wildcardClass67 = minFinder59.getClass();
        boolean boolean68 = t57.equals((java.lang.Object) wildcardClass67);
        minFinder13.add(t57);
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t73 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t75 = minFinder70.findMin();
        minFinder70.clear();
        minFinder70.clear();
        examples.MinFinder.T t78 = minFinder70.findMin();
        examples.MinFinder.T t79 = null;
        minFinder70.chval(t79, (-9));
        minFinder70.clear();
        boolean boolean83 = t57.equals((java.lang.Object) minFinder70);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(tArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 0);
        int int2 = t1.getVal();
        boolean boolean4 = t1.equals((java.lang.Object) 2);
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        minFinder29.clear();
        examples.MinFinder.T t32 = minFinder29.findMin();
        minFinder29.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        minFinder29.chval(t35, 0);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-9));
        int int45 = t44.getVal();
        minFinder42.chval(t44, (-100));
        minFinder29.chval(t44, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        java.lang.Object obj56 = null;
        boolean boolean57 = t51.equals(obj56);
        minFinder29.add(t51);
        boolean boolean59 = t28.equals((java.lang.Object) t51);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) 'a');
        int int81 = t80.getVal();
        examples.MinFinder.T[] tArray82 = new examples.MinFinder.T[] { t61, t63, t70, t72, t80 };
        java.util.ArrayList<examples.MinFinder.T> tList83 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList83, tArray82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder94 = new examples.MinFinder(tList83);
        boolean boolean95 = t28.equals((java.lang.Object) tList83);
        minFinder26.add(t28);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-9) + "'", int45 == (-9));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(tArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        minFinder30.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        minFinder44.add(t53);
        minFinder44.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) (short) 0);
        minFinder44.chval(t59, (int) '4');
        minFinder30.add(t59);
        int int63 = t59.getVal();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        boolean boolean77 = t59.equals((java.lang.Object) 0);
        int int78 = t59.getVal();
        int int79 = t59.getVal();
        minFinder26.add(t59);
        minFinder26.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        int int46 = t40.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t10, t12, t19, t24, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        minFinder50.add(t52);
        examples.MinFinder.T t54 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        minFinder56.add(t61);
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder56.add(t65);
        examples.MinFinder.T t67 = minFinder56.findMin();
        minFinder50.add(t67);
        examples.MinFinder.T t69 = minFinder50.findMin();
        minFinder0.chval(t69, 32);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(t54);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertNotNull(t69);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        examples.MinFinder.T t17 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNotNull(t17);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder.T t23 = new examples.MinFinder.T(0);
        java.lang.Object obj24 = null;
        boolean boolean25 = t23.equals(obj24);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        java.lang.Class<?> wildcardClass31 = t27.getClass();
        boolean boolean32 = t23.equals((java.lang.Object) t27);
        minFinder0.add(t27);
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        boolean boolean49 = t35.equals((java.lang.Object) minFinder36);
        examples.MinFinder.T t50 = minFinder36.findMin();
        examples.MinFinder.T t51 = minFinder36.findMin();
        examples.MinFinder.T t52 = minFinder36.findMin();
        int int53 = t52.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t52, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder21.add(t30);
        minFinder21.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (short) 0);
        minFinder21.chval(t36, (int) '4');
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder21.chval(t40, 100);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        boolean boolean47 = t45.equals((java.lang.Object) (-1));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        boolean boolean79 = t45.equals((java.lang.Object) minFinder78);
        boolean boolean80 = t40.equals((java.lang.Object) t45);
        minFinder2.add(t45);
        int int82 = t45.getVal();
        java.lang.Class<?> wildcardClass83 = t45.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        minFinder46.clear();
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder60.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 0);
        minFinder60.chval(t75, (int) '4');
        minFinder46.add(t75);
        minFinder41.add(t75);
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(3);
        minFinder82.chval(t85, (int) (short) -1);
        examples.MinFinder minFinder88 = new examples.MinFinder();
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t91 = new examples.MinFinder.T(3);
        minFinder88.chval(t91, (int) (short) -1);
        minFinder82.add(t91);
        boolean boolean95 = t81.equals((java.lang.Object) minFinder82);
        minFinder82.clear();
        boolean boolean97 = t75.equals((java.lang.Object) minFinder82);
        examples.MinFinder.T t98 = minFinder82.findMin();
        examples.MinFinder.T t99 = minFinder82.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertNull(t89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(t98);
        org.junit.Assert.assertNull(t99);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-6));
        minFinder2.chval(t21, (-1));
        int int24 = t21.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-6) + "'", int24 == (-6));
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t38 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        minFinder35.chval(t41, 0);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        int int51 = t50.getVal();
        minFinder48.chval(t50, (-100));
        minFinder35.chval(t50, 0);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        java.lang.Object obj62 = null;
        boolean boolean63 = t57.equals(obj62);
        minFinder35.add(t57);
        int int65 = t57.getVal();
        minFinder29.chval(t57, 35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-9) + "'", int51 == (-9));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass19 = t18.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t21 = minFinder16.findMin();
        minFinder16.clear();
        minFinder16.clear();
        examples.MinFinder.T t24 = minFinder16.findMin();
        examples.MinFinder.T t25 = minFinder16.findMin();
        examples.MinFinder.T t26 = minFinder16.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        minFinder16.chval(t28, (-2));
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t36, t38, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        java.lang.Class<?> wildcardClass62 = tList58.getClass();
        boolean boolean63 = t34.equals((java.lang.Object) tList58);
        minFinder16.add(t34);
        int int65 = t34.getVal();
        minFinder0.add(t34);
        int int67 = t34.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t28 = minFinder23.findMin();
        examples.MinFinder.T t29 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        minFinder23.add(t32);
        minFinder23.clear();
        boolean boolean37 = t20.equals((java.lang.Object) minFinder23);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        int int76 = t66.getVal();
        int int77 = t66.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        minFinder52.add(t57);
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder52.add(t61);
        examples.MinFinder.T t63 = minFinder52.findMin();
        java.lang.Object obj64 = null;
        boolean boolean65 = t63.equals(obj64);
        minFinder29.chval(t63, (-6));
        minFinder29.clear();
        examples.MinFinder.T t69 = minFinder29.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-8));
        minFinder29.chval(t71, 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(t69);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 0);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        minFinder2.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        minFinder2.add(t5);
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t12 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t14 = minFinder2.findMin();
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        minFinder40.clear();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        minFinder54.add(t63);
        minFinder54.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) (short) 0);
        minFinder54.chval(t69, (int) '4');
        minFinder40.add(t69);
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        boolean boolean79 = t69.equals((java.lang.Object) t74);
        int int80 = t69.getVal();
        boolean boolean81 = t37.equals((java.lang.Object) t69);
        int int82 = t69.getVal();
        int int83 = t69.getVal();
        minFinder0.add(t69);
        int int85 = t69.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t12);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t66.equals((java.lang.Object) minFinder76);
        minFinder76.clear();
        examples.MinFinder.T t90 = minFinder76.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(t90);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t51 = minFinder29.findMin();
        examples.MinFinder.T t52 = minFinder29.findMin();
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        minFinder26.add(t35);
        minFinder26.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) (short) 0);
        minFinder26.chval(t41, (int) '4');
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 0);
        int int46 = t45.getVal();
        minFinder26.chval(t45, 100);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        boolean boolean52 = t50.equals((java.lang.Object) (-1));
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        int int71 = t65.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        int int74 = t73.getVal();
        examples.MinFinder.T[] tArray75 = new examples.MinFinder.T[] { t54, t56, t63, t65, t73 };
        java.util.ArrayList<examples.MinFinder.T> tList76 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList76, tArray75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList76);
        boolean boolean84 = t50.equals((java.lang.Object) minFinder83);
        boolean boolean85 = t45.equals((java.lang.Object) t50);
        boolean boolean87 = t45.equals((java.lang.Object) 3);
        int int88 = t45.getVal();
        minFinder13.chval(t45, 0);
        java.lang.Class<?> wildcardClass91 = t45.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNotNull(tArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        int int17 = t11.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) (-8.7d));
        minFinder4.chval(t11, (-100));
        boolean boolean22 = t1.equals((java.lang.Object) t11);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder.T t37 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t44 = minFinder39.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        boolean boolean64 = t56.equals((java.lang.Object) (-8.7d));
        minFinder49.chval(t56, (-100));
        boolean boolean67 = t46.equals((java.lang.Object) t56);
        minFinder39.add(t56);
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) (short) -1);
        minFinder39.add(t70);
        minFinder23.add(t70);
        boolean boolean73 = t11.equals((java.lang.Object) minFinder23);
        java.lang.Class<?> wildcardClass74 = t11.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t34 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        int int38 = t37.getVal();
        boolean boolean40 = t37.equals((java.lang.Object) 2);
        int int41 = t37.getVal();
        minFinder32.add(t37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        int int20 = t1.getVal();
        boolean boolean22 = t1.equals((java.lang.Object) 1);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-4));
        boolean boolean25 = t1.equals((java.lang.Object) t24);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T(3);
        minFinder48.chval(t51, (int) (short) -1);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        minFinder48.add(t57);
        boolean boolean61 = t47.equals((java.lang.Object) minFinder48);
        minFinder48.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder48.chval(t64, 1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) (-1));
        int int84 = t81.getVal();
        minFinder67.chval(t81, 0);
        int int87 = t81.getVal();
        boolean boolean88 = t64.equals((java.lang.Object) t81);
        minFinder41.chval(t81, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t26, t28, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList48);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t60, t62, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder.T t87 = minFinder86.findMin();
        minFinder57.chval(t87, 10);
        minFinder0.add(t87);
        minFinder0.clear();
        examples.MinFinder.T t92 = null;
        minFinder0.add(t92);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t87);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t24, t26, t33, t38, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder64.add(t66);
        examples.MinFinder.T t68 = minFinder64.findMin();
        int int69 = t68.getVal();
        boolean boolean70 = t19.equals((java.lang.Object) t68);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) 'a');
        int int86 = t85.getVal();
        minFinder71.add(t85);
        examples.MinFinder.T t88 = minFinder71.findMin();
        java.lang.Class<?> wildcardClass89 = minFinder71.getClass();
        boolean boolean90 = t68.equals((java.lang.Object) minFinder71);
        int int91 = t68.getVal();
        int int92 = t68.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 100);
        minFinder72.add(t75);
        examples.MinFinder.T t77 = minFinder72.findMin();
        minFinder25.add(t77);
        minFinder25.clear();
        examples.MinFinder.T t80 = minFinder25.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNull(t80);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t24, t26, t33, t38, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder64.add(t66);
        examples.MinFinder.T t68 = minFinder64.findMin();
        int int69 = t68.getVal();
        boolean boolean70 = t19.equals((java.lang.Object) t68);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) 'a');
        int int86 = t85.getVal();
        minFinder71.add(t85);
        examples.MinFinder.T t88 = minFinder71.findMin();
        java.lang.Class<?> wildcardClass89 = minFinder71.getClass();
        boolean boolean90 = t68.equals((java.lang.Object) minFinder71);
        int int91 = t68.getVal();
        java.lang.Class<?> wildcardClass92 = t68.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertNotNull(wildcardClass89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t34 = minFinder32.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T[] tArray73 = new examples.MinFinder.T[] { t36, t38, t45, t50, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList74 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList74, tArray73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList74);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        minFinder76.add(t78);
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t82 = minFinder76.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T((-7));
        minFinder76.add(t84);
        minFinder32.add(t84);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNotNull(tArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(t82);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        minFinder28.add(t30);
        examples.MinFinder.T t35 = new examples.MinFinder.T(5);
        minFinder28.add(t35);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        java.lang.Class<?> wildcardClass64 = tList60.getClass();
        boolean boolean65 = t35.equals((java.lang.Object) wildcardClass64);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        minFinder66.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        int int72 = t71.getVal();
        minFinder66.add(t71);
        examples.MinFinder.T t75 = new examples.MinFinder.T(3);
        minFinder66.add(t75);
        int int77 = t75.getVal();
        boolean boolean78 = t35.equals((java.lang.Object) t75);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        minFinder78.add(t83);
        examples.MinFinder.T t87 = new examples.MinFinder.T(3);
        minFinder78.add(t87);
        examples.MinFinder.T t89 = minFinder78.findMin();
        java.lang.Object obj90 = null;
        boolean boolean91 = t89.equals(obj90);
        minFinder0.chval(t89, 4);
        java.lang.Class<?> wildcardClass94 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder.T t49 = minFinder48.findMin();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        boolean boolean53 = t51.equals((java.lang.Object) (-1));
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList77);
        boolean boolean87 = t51.equals((java.lang.Object) minFinder86);
        boolean boolean88 = t49.equals((java.lang.Object) boolean87);
        minFinder0.add(t49);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t12, t14, t21, t26, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        minFinder52.add(t54);
        examples.MinFinder.T t56 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        minFinder58.add(t63);
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder58.add(t67);
        examples.MinFinder.T t69 = minFinder58.findMin();
        minFinder52.add(t69);
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        minFinder73.add(t82);
        boolean boolean86 = t72.equals((java.lang.Object) minFinder73);
        minFinder73.clear();
        boolean boolean88 = t69.equals((java.lang.Object) minFinder73);
        minFinder0.chval(t69, 35);
        java.lang.Class<?> wildcardClass91 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t56);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t11);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-9));
        minFinder35.add(t49);
        minFinder35.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t54 = new examples.MinFinder.T(100);
        minFinder52.add(t54);
        minFinder35.chval(t54, (int) '#');
        int int58 = t54.getVal();
        minFinder10.add(t54);
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList84);
        examples.MinFinder.T t91 = new examples.MinFinder.T((-3));
        boolean boolean93 = t91.equals((java.lang.Object) (-1));
        minFinder89.add(t91);
        examples.MinFinder.T t96 = new examples.MinFinder.T(5);
        minFinder89.add(t96);
        boolean boolean98 = t54.equals((java.lang.Object) t96);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 100 + "'", int60 == 100);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t17 = minFinder12.findMin();
        examples.MinFinder.T t18 = minFinder12.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder19.add(t28);
        examples.MinFinder.T t30 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        boolean boolean35 = t33.equals((java.lang.Object) ' ');
        minFinder19.add(t33);
        minFinder12.chval(t33, (int) (byte) 10);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        boolean boolean47 = t40.equals((java.lang.Object) 100.0d);
        minFinder12.add(t40);
        boolean boolean49 = t9.equals((java.lang.Object) t40);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder.T t19 = minFinder2.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass20 = t19.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t19);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t36 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t36);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        minFinder23.add(t37);
        int int42 = t37.getVal();
        minFinder10.add(t37);
        minFinder0.add(t37);
        int int45 = t37.getVal();
        java.lang.Class<?> wildcardClass46 = t37.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((int) 'a');
        int int8 = t7.getVal();
        minFinder2.add(t7);
        examples.MinFinder.T t11 = new examples.MinFinder.T(1);
        boolean boolean12 = t7.equals((java.lang.Object) t11);
        int int13 = t11.getVal();
        boolean boolean15 = t11.equals((java.lang.Object) 3L);
        int int16 = t11.getVal();
        minFinder0.chval(t11, (int) 'a');
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        minFinder21.chval(t27, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        int int82 = t81.getVal();
        boolean boolean83 = t27.equals((java.lang.Object) t81);
        minFinder0.add(t27);
        minFinder0.clear();
        examples.MinFinder.T t86 = minFinder0.findMin();
        examples.MinFinder.T t87 = minFinder0.findMin();
        examples.MinFinder.T t88 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertNull(t88);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        int int31 = t25.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        int int34 = t33.getVal();
        examples.MinFinder.T[] tArray35 = new examples.MinFinder.T[] { t14, t16, t23, t25, t33 };
        java.util.ArrayList<examples.MinFinder.T> tList36 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList36, tArray35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList36);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList36);
        examples.MinFinder.T t46 = null;
        minFinder45.chval(t46, (-1));
        minFinder45.clear();
        java.lang.Class<?> wildcardClass50 = minFinder45.getClass();
        boolean boolean51 = t9.equals((java.lang.Object) wildcardClass50);
        int int52 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 97 + "'", int34 == 97);
        org.junit.Assert.assertNotNull(tArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t39 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder.T t42 = minFinder34.findMin();
        examples.MinFinder.T t43 = minFinder34.findMin();
        examples.MinFinder.T t44 = minFinder34.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        minFinder34.chval(t46, (-2));
        examples.MinFinder.T t51 = minFinder34.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        boolean boolean55 = t53.equals((java.lang.Object) 6);
        int int56 = t53.getVal();
        minFinder34.add(t53);
        int int58 = t53.getVal();
        minFinder32.add(t53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-9) + "'", int56 == (-9));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-9) + "'", int58 == (-9));
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        boolean boolean33 = t16.equals((java.lang.Object) 2L);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder34.add(t48);
        examples.MinFinder.T t51 = minFinder34.findMin();
        examples.MinFinder.T t52 = minFinder34.findMin();
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t56 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        minFinder53.chval(t59, 0);
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        minFinder53.add(t67);
        int int72 = t67.getVal();
        minFinder34.add(t67);
        examples.MinFinder.T t74 = minFinder34.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        minFinder78.chval(t80, (int) ' ');
        examples.MinFinder.T t89 = new examples.MinFinder.T((-9));
        boolean boolean91 = t89.equals((java.lang.Object) 6);
        minFinder78.chval(t89, 97);
        boolean boolean94 = t76.equals((java.lang.Object) t89);
        int int95 = t76.getVal();
        minFinder34.add(t76);
        boolean boolean97 = t16.equals((java.lang.Object) t76);
        java.lang.Class<?> wildcardClass98 = t16.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        java.lang.Class<?> wildcardClass30 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t4 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T[] tArray41 = new examples.MinFinder.T[] { t4, t6, t13, t18, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList42 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList42, tArray41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList42);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        minFinder44.add(t46);
        examples.MinFinder.T t48 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        minFinder50.add(t55);
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder50.add(t59);
        examples.MinFinder.T t61 = minFinder50.findMin();
        minFinder44.add(t61);
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        boolean boolean78 = t64.equals((java.lang.Object) minFinder65);
        minFinder65.clear();
        boolean boolean80 = t61.equals((java.lang.Object) minFinder65);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        minFinder81.clear();
        examples.MinFinder.T t84 = minFinder81.findMin();
        minFinder81.clear();
        minFinder81.clear();
        minFinder81.clear();
        boolean boolean88 = t61.equals((java.lang.Object) minFinder81);
        minFinder0.add(t61);
        int int90 = t61.getVal();
        java.lang.Class<?> wildcardClass91 = t61.getClass();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNotNull(tArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t28 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        minFinder25.chval(t31, 0);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder25.chval(t40, (-5));
        boolean boolean44 = t19.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-9));
        int int63 = t62.getVal();
        minFinder60.chval(t62, (-100));
        minFinder47.chval(t62, 0);
        boolean boolean68 = t46.equals((java.lang.Object) t62);
        boolean boolean69 = t19.equals((java.lang.Object) t46);
        java.lang.Class<?> wildcardClass70 = t46.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-9) + "'", int63 == (-9));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        boolean boolean75 = t2.equals((java.lang.Object) t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t2.equals((java.lang.Object) t86);
        int int89 = t2.getVal();
        java.lang.Class<?> wildcardClass90 = t2.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-9) + "'", int89 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass90);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t13 = minFinder0.findMin();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-1));
        minFinder14.chval(t19, 100);
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        minFinder14.add(t23);
        int int27 = t23.getVal();
        minFinder0.add(t23);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t19 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder29.add(t34);
        minFinder23.chval(t34, 5);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        minFinder39.add(t53);
        minFinder23.chval(t53, (-10));
        boolean boolean57 = t22.equals((java.lang.Object) t53);
        minFinder11.chval(t53, (int) (short) 0);
        minFinder11.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        minFinder61.add(t75);
        examples.MinFinder.T t77 = minFinder61.findMin();
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        examples.MinFinder.T t81 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-9));
        int int86 = t85.getVal();
        minFinder78.chval(t85, 10);
        int int89 = t85.getVal();
        minFinder61.add(t85);
        examples.MinFinder.T t91 = minFinder61.findMin();
        int int92 = t91.getVal();
        minFinder11.add(t91);
        minFinder0.add(t91);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-9) + "'", int86 == (-9));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-9) + "'", int89 == (-9));
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-9) + "'", int92 == (-9));
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        minFinder0.clear();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t41 = minFinder38.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-1));
        minFinder38.chval(t43, 100);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        minFinder38.add(t47);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t56 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        minFinder51.clear();
        boolean boolean60 = t47.equals((java.lang.Object) minFinder51);
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t63 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        minFinder65.chval(t71, 0);
        minFinder65.clear();
        examples.MinFinder.T t79 = minFinder65.findMin();
        minFinder65.clear();
        minFinder65.clear();
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        minFinder82.clear();
        examples.MinFinder.T t85 = minFinder82.findMin();
        examples.MinFinder.T t87 = new examples.MinFinder.T((-1));
        minFinder82.chval(t87, 100);
        boolean boolean91 = t87.equals((java.lang.Object) 5L);
        minFinder65.add(t87);
        minFinder51.chval(t87, (int) (byte) 10);
        minFinder0.chval(t87, (int) (short) 1);
        examples.MinFinder.T t97 = minFinder0.findMin();
        examples.MinFinder.T t98 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNull(t97);
        org.junit.Assert.assertNull(t98);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        minFinder18.chval(t24, (int) ' ');
        minFinder11.add(t24);
        minFinder0.add(t24);
        examples.MinFinder.T t35 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertNotNull(t35);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t39 = minFinder34.findMin();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder40.add(t49);
        int int53 = t49.getVal();
        minFinder34.add(t49);
        minFinder0.chval(t49, 0);
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        minFinder0.chval(t58, (-9));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        minFinder38.add(t48);
        examples.MinFinder.T t53 = minFinder38.findMin();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        minFinder54.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder54.add(t68);
        boolean boolean71 = t53.equals((java.lang.Object) t68);
        minFinder0.chval(t68, 0);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        minFinder74.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        minFinder74.add(t79);
        examples.MinFinder.T t83 = new examples.MinFinder.T(1);
        boolean boolean84 = t79.equals((java.lang.Object) t83);
        int int85 = t83.getVal();
        int int86 = t83.getVal();
        minFinder0.add(t83);
        minFinder0.clear();
        examples.MinFinder.T t89 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNull(t89);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        examples.MinFinder.T t22 = minFinder11.findMin();
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        minFinder28.chval(t30, (int) ' ');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        boolean boolean41 = t39.equals((java.lang.Object) 6);
        minFinder28.chval(t39, 97);
        boolean boolean44 = t26.equals((java.lang.Object) t39);
        int int45 = t26.getVal();
        boolean boolean46 = t22.equals((java.lang.Object) t26);
        minFinder0.add(t22);
        examples.MinFinder.T t48 = minFinder0.findMin();
        int int49 = t48.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t18 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        minFinder15.chval(t21, 0);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        int int31 = t30.getVal();
        minFinder28.chval(t30, (-100));
        minFinder15.chval(t30, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        java.lang.Object obj42 = null;
        boolean boolean43 = t37.equals(obj42);
        minFinder15.add(t37);
        boolean boolean45 = t14.equals((java.lang.Object) t37);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList69);
        boolean boolean81 = t14.equals((java.lang.Object) tList69);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList69);
        boolean boolean89 = t9.equals((java.lang.Object) tList69);
        int int90 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-9) + "'", int31 == (-9));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t17 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t17);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        boolean boolean37 = t35.equals((java.lang.Object) ' ');
        minFinder0.add(t35);
        int int39 = t35.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        boolean boolean9 = t7.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        boolean boolean25 = t17.equals((java.lang.Object) (-8.7d));
        minFinder10.chval(t17, (-100));
        boolean boolean28 = t7.equals((java.lang.Object) t17);
        minFinder0.add(t17);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass31 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        minFinder6.add(t15);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-9));
        minFinder6.add(t20);
        minFinder6.clear();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T(100);
        minFinder23.add(t25);
        minFinder6.chval(t25, (int) '#');
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t34 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        minFinder31.chval(t37, 0);
        boolean boolean44 = t30.equals((java.lang.Object) minFinder31);
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 0);
        int int47 = t46.getVal();
        minFinder31.chval(t46, (-5));
        boolean boolean50 = t25.equals((java.lang.Object) minFinder31);
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t56 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        minFinder53.chval(t59, 0);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-9));
        int int69 = t68.getVal();
        minFinder66.chval(t68, (-100));
        minFinder53.chval(t68, 0);
        boolean boolean74 = t52.equals((java.lang.Object) t68);
        boolean boolean75 = t25.equals((java.lang.Object) t52);
        minFinder0.add(t25);
        examples.MinFinder.T t77 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-9) + "'", int69 == (-9));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(t77);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        minFinder11.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        minFinder11.add(t21);
        int int23 = t21.getVal();
        minFinder0.chval(t21, 4);
        examples.MinFinder.T t26 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNull(t26);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        minFinder38.chval(t40, (int) ' ');
        boolean boolean48 = t37.equals((java.lang.Object) t40);
        int int49 = t37.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        int int17 = t11.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) (-8.7d));
        minFinder4.chval(t11, (-100));
        boolean boolean22 = t1.equals((java.lang.Object) t11);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder.T t37 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t44 = minFinder39.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        boolean boolean64 = t56.equals((java.lang.Object) (-8.7d));
        minFinder49.chval(t56, (-100));
        boolean boolean67 = t46.equals((java.lang.Object) t56);
        minFinder39.add(t56);
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) (short) -1);
        minFinder39.add(t70);
        minFinder23.add(t70);
        boolean boolean73 = t11.equals((java.lang.Object) minFinder23);
        examples.MinFinder.T t74 = minFinder23.findMin();
        int int75 = t74.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t34 = minFinder32.findMin();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder32.add(t44);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t54 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t57 = minFinder49.findMin();
        examples.MinFinder.T t58 = null;
        minFinder49.chval(t58, (-9));
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        examples.MinFinder.T[] tArray85 = new examples.MinFinder.T[] { t64, t66, t73, t75, t83 };
        java.util.ArrayList<examples.MinFinder.T> tList86 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList86, tArray85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList86);
        java.lang.Class<?> wildcardClass90 = tList86.getClass();
        boolean boolean91 = t62.equals((java.lang.Object) tList86);
        int int92 = t62.getVal();
        minFinder49.chval(t62, (-9));
        minFinder32.add(t62);
        int int96 = t62.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(tArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder41.add(t42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        int int49 = t42.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-9) + "'", int49 == (-9));
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder0.add(t68);
        examples.MinFinder.T t74 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNotNull(t74);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder.T t50 = minFinder0.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        minFinder53.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        minFinder53.add(t58);
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder53.add(t62);
        boolean boolean64 = t52.equals((java.lang.Object) t62);
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder0.chval(t62, 4);
        minFinder0.clear();
        examples.MinFinder.T t70 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNull(t70);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        examples.MinFinder.T t1 = new examples.MinFinder.T(35);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t8 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t10 = minFinder2.findMin();
        boolean boolean11 = t1.equals((java.lang.Object) minFinder2);
        int int12 = t1.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t43 = minFinder41.findMin();
        examples.MinFinder.T t44 = minFinder41.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList68);
        examples.MinFinder.T t78 = minFinder77.findMin();
        int int79 = t78.getVal();
        minFinder41.add(t78);
        examples.MinFinder.T t81 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass82 = t81.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder.T t35 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-9));
        int int52 = t51.getVal();
        minFinder49.chval(t51, (-100));
        minFinder36.chval(t51, 0);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        java.lang.Object obj63 = null;
        boolean boolean64 = t58.equals(obj63);
        minFinder36.add(t58);
        boolean boolean66 = t35.equals((java.lang.Object) t58);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        minFinder67.clear();
        minFinder67.clear();
        boolean boolean72 = t58.equals((java.lang.Object) minFinder67);
        examples.MinFinder.T t74 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        minFinder75.clear();
        examples.MinFinder.T t78 = minFinder75.findMin();
        minFinder75.clear();
        minFinder75.clear();
        boolean boolean81 = t74.equals((java.lang.Object) minFinder75);
        int int82 = t74.getVal();
        minFinder67.chval(t74, 97);
        boolean boolean85 = t31.equals((java.lang.Object) t74);
        int int86 = t74.getVal();
        java.lang.Class<?> wildcardClass87 = t74.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-9) + "'", int52 == (-9));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 10 + "'", int82 == 10);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 10 + "'", int86 == 10);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        boolean boolean25 = t23.equals((java.lang.Object) (-1));
        int int26 = t23.getVal();
        minFinder9.chval(t23, 0);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        minFinder29.add(t43);
        minFinder9.add(t43);
        minFinder9.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-1));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        minFinder9.chval(t49, 9);
        minFinder0.chval(t49, 0);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        examples.MinFinder.T t1 = new examples.MinFinder.T(9);
        int int2 = t1.getVal();
        java.lang.Class<?> wildcardClass3 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder.T t57 = minFinder0.findMin();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t61 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        minFinder65.chval(t71, (int) ' ');
        minFinder58.add(t71);
        examples.MinFinder.T t82 = new examples.MinFinder.T((-3));
        int int83 = t82.getVal();
        int int84 = t82.getVal();
        int int85 = t82.getVal();
        int int86 = t82.getVal();
        java.lang.Object obj87 = null;
        boolean boolean88 = t82.equals(obj87);
        minFinder58.add(t82);
        examples.MinFinder.T t90 = minFinder58.findMin();
        examples.MinFinder.T t91 = minFinder58.findMin();
        minFinder0.add(t91);
        examples.MinFinder.T t93 = minFinder0.findMin();
        examples.MinFinder.T t95 = new examples.MinFinder.T(0);
        java.lang.Object obj96 = null;
        boolean boolean97 = t95.equals(obj96);
        java.lang.Class<?> wildcardClass98 = t95.getClass();
        boolean boolean99 = t93.equals((java.lang.Object) wildcardClass98);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertNotNull(t93);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-1));
        minFinder17.chval(t22, 100);
        boolean boolean26 = t22.equals((java.lang.Object) 5L);
        minFinder0.add(t22);
        examples.MinFinder.T t28 = minFinder0.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t30, t32, t39, t44, t50, t52, t60 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        minFinder70.add(t72);
        examples.MinFinder.T t74 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        examples.MinFinder.T t85 = new examples.MinFinder.T(3);
        minFinder76.add(t85);
        examples.MinFinder.T t87 = minFinder76.findMin();
        minFinder70.add(t87);
        minFinder0.add(t87);
        int int90 = t87.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 3 + "'", int90 == 3);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t9, t11, t18, t23, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        minFinder49.add(t51);
        examples.MinFinder.T t53 = minFinder49.findMin();
        int int54 = t53.getVal();
        minFinder0.add(t53);
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        minFinder57.add(t62);
        minFinder57.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        minFinder57.add(t67);
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        minFinder57.add(t70);
        examples.MinFinder.T t72 = minFinder57.findMin();
        minFinder0.add(t72);
        minFinder0.clear();
        examples.MinFinder.T t75 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertNull(t75);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        boolean boolean42 = t40.equals((java.lang.Object) (-1));
        int int43 = t40.getVal();
        minFinder26.chval(t40, 0);
        minFinder22.add(t40);
        minFinder2.chval(t40, 8);
        int int49 = t40.getVal();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        minFinder50.clear();
        java.lang.Class<?> wildcardClass64 = minFinder50.getClass();
        boolean boolean65 = t40.equals((java.lang.Object) minFinder50);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        minFinder38.clear();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder40.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        minFinder40.add(t50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        minFinder52.chval(t58, 0);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        minFinder65.add(t79);
        minFinder52.add(t79);
        boolean boolean83 = t50.equals((java.lang.Object) t79);
        minFinder38.add(t79);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        examples.MinFinder.T t52 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t56 = minFinder53.findMin();
        minFinder53.clear();
        minFinder53.clear();
        boolean boolean59 = t52.equals((java.lang.Object) minFinder53);
        int int60 = t52.getVal();
        minFinder32.add(t52);
        examples.MinFinder.T t62 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 10 + "'", int60 == 10);
        org.junit.Assert.assertNotNull(t62);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        examples.MinFinder.T t76 = minFinder0.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        int int83 = t78.getVal();
        int int84 = t78.getVal();
        boolean boolean86 = t78.equals((java.lang.Object) (-8.7d));
        boolean boolean88 = t78.equals((java.lang.Object) "hi!");
        minFinder0.add(t78);
        int int90 = t78.getVal();
        int int91 = t78.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) '#');
        int int20 = t19.getVal();
        minFinder0.chval(t19, (int) (byte) 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        minFinder23.add(t32);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder23.add(t37);
        examples.MinFinder.T t40 = minFinder23.findMin();
        minFinder0.add(t40);
        int int42 = t40.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T(5);
        int int7 = t6.getVal();
        minFinder0.chval(t6, 5);
        minFinder0.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) (short) 0);
        int int13 = t12.getVal();
        boolean boolean15 = t12.equals((java.lang.Object) 1.0f);
        minFinder0.add(t12);
        examples.MinFinder.T t17 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t17);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        boolean boolean75 = t2.equals((java.lang.Object) t66);
        int int76 = t66.getVal();
        int int77 = t66.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t17, t19, t26, t31, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        boolean boolean62 = t60.equals((java.lang.Object) ' ');
        minFinder57.chval(t60, (int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder57.add(t66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        minFinder68.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        int int76 = t75.getVal();
        minFinder68.chval(t75, 10);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t82 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        int int86 = t85.getVal();
        int int87 = t85.getVal();
        int int88 = t85.getVal();
        int int89 = t85.getVal();
        minFinder79.chval(t85, 0);
        minFinder68.add(t85);
        minFinder57.add(t85);
        minFinder0.add(t85);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-9) + "'", int76 == (-9));
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(2);
        minFinder0.add(t85);
        examples.MinFinder.T t87 = minFinder0.findMin();
        examples.MinFinder.T t88 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass89 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        minFinder60.clear();
        examples.MinFinder.T t64 = minFinder60.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(100);
        minFinder60.add(t66);
        minFinder0.chval(t66, 100);
        examples.MinFinder.T t71 = new examples.MinFinder.T(0);
        minFinder0.chval(t71, (-8));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertNull(t64);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder.T t13 = minFinder0.findMin();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder14.chval(t33, 100);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        int int40 = t39.getVal();
        minFinder37.chval(t39, (-100));
        minFinder14.add(t39);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        examples.MinFinder.T[] tArray82 = new examples.MinFinder.T[] { t45, t47, t54, t59, t65, t67, t75 };
        java.util.ArrayList<examples.MinFinder.T> tList83 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList83, tArray82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList83);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        minFinder85.add(t87);
        examples.MinFinder.T t89 = minFinder85.findMin();
        int int90 = t89.getVal();
        boolean boolean91 = t39.equals((java.lang.Object) t89);
        minFinder0.add(t39);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-9) + "'", int40 == (-9));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(tArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        minFinder13.chval(t24, 5);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-9));
        minFinder29.add(t43);
        minFinder13.chval(t43, (-10));
        minFinder0.add(t43);
        java.lang.Class<?> wildcardClass48 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList60);
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder0.add(t66);
        java.lang.Class<?> wildcardClass68 = t66.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(t35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        minFinder0.clear();
        examples.MinFinder.T t18 = null;
        minFinder0.chval(t18, 9);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        minFinder44.add(t56);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-9));
        minFinder62.add(t76);
        examples.MinFinder.T t78 = minFinder62.findMin();
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t82 = minFinder79.findMin();
        minFinder79.clear();
        minFinder79.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((-9));
        int int87 = t86.getVal();
        minFinder79.chval(t86, 10);
        int int90 = t86.getVal();
        minFinder62.add(t86);
        int int92 = t86.getVal();
        int int93 = t86.getVal();
        int int94 = t86.getVal();
        int int95 = t86.getVal();
        minFinder44.add(t86);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-9) + "'", int87 == (-9));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-9) + "'", int90 == (-9));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-9) + "'", int92 == (-9));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-9) + "'", int93 == (-9));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-9) + "'", int94 == (-9));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-9) + "'", int95 == (-9));
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        int int31 = t1.getVal();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        int int40 = t37.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) t37);
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        examples.MinFinder.T[] tArray65 = new examples.MinFinder.T[] { t44, t46, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList66 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList66, tArray65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList66);
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        minFinder72.add(t74);
        examples.MinFinder.T t76 = minFinder72.findMin();
        boolean boolean77 = t37.equals((java.lang.Object) minFinder72);
        examples.MinFinder.T t78 = minFinder72.findMin();
        minFinder72.clear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(tArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(t78);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-9));
        int int42 = t41.getVal();
        minFinder39.chval(t41, (-100));
        int int45 = t41.getVal();
        minFinder36.chval(t41, (-4));
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        minFinder48.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        minFinder48.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        minFinder48.add(t61);
        minFinder36.add(t61);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t69 = minFinder64.findMin();
        minFinder64.clear();
        minFinder64.clear();
        examples.MinFinder.T t72 = minFinder64.findMin();
        examples.MinFinder.T t73 = minFinder64.findMin();
        examples.MinFinder.T t74 = minFinder64.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (byte) 1);
        minFinder64.chval(t76, 4);
        // The following exception was thrown during execution in test generation
        try {
            minFinder36.chval(t76, (-8));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-9) + "'", int45 == (-9));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t74);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        examples.MinFinder.T t1 = new examples.MinFinder.T(8);
        examples.MinFinder.T t3 = new examples.MinFinder.T(0);
        java.lang.Object obj4 = null;
        boolean boolean5 = t3.equals(obj4);
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        java.lang.Class<?> wildcardClass11 = t7.getClass();
        boolean boolean12 = t3.equals((java.lang.Object) t7);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t14, t16, t23, t28, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        boolean boolean59 = t3.equals((java.lang.Object) tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList52);
        examples.MinFinder.T t63 = minFinder62.findMin();
        boolean boolean64 = t1.equals((java.lang.Object) t63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) ' ');
        int int4 = t1.getVal();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        int int26 = t25.getVal();
        examples.MinFinder.T[] tArray27 = new examples.MinFinder.T[] { t6, t8, t15, t17, t25 };
        java.util.ArrayList<examples.MinFinder.T> tList28 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList28, tArray27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList28);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList28);
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        boolean boolean46 = t1.equals((java.lang.Object) minFinder42);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        int int83 = t78.getVal();
        int int84 = t78.getVal();
        examples.MinFinder.T[] tArray85 = new examples.MinFinder.T[] { t48, t50, t57, t62, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList86 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList86, tArray85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList86);
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t90 = minFinder88.findMin();
        examples.MinFinder.T t91 = minFinder88.findMin();
        boolean boolean92 = t1.equals((java.lang.Object) minFinder88);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 97 + "'", int26 == 97);
        org.junit.Assert.assertNotNull(tArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertNotNull(tArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T(3);
        minFinder5.chval(t8, (int) (short) -1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T(3);
        minFinder11.chval(t14, (int) (short) -1);
        minFinder5.add(t14);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-9));
        minFinder5.add(t19);
        minFinder5.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t24 = new examples.MinFinder.T(100);
        minFinder22.add(t24);
        minFinder5.chval(t24, (int) '#');
        minFinder5.clear();
        boolean boolean29 = t1.equals((java.lang.Object) minFinder5);
        minFinder5.clear();
        minFinder5.clear();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        minFinder32.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        minFinder32.add(t42);
        int int44 = t42.getVal();
        minFinder5.chval(t42, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t13 = minFinder0.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        boolean boolean29 = t15.equals((java.lang.Object) minFinder16);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) (short) 0);
        int int32 = t31.getVal();
        minFinder16.chval(t31, (-5));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T[] tArray73 = new examples.MinFinder.T[] { t36, t38, t45, t50, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList74 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList74, tArray73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList74);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        minFinder76.add(t78);
        examples.MinFinder.T t80 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        boolean boolean83 = t31.equals((java.lang.Object) minFinder76);
        examples.MinFinder.T t85 = new examples.MinFinder.T(9);
        minFinder76.chval(t85, (int) '#');
        int int88 = t85.getVal();
        minFinder0.chval(t85, (int) (byte) -1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNotNull(tArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 9 + "'", int88 == 9);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t31, t33, t40, t42, t50 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList53);
        examples.MinFinder.T t63 = minFinder62.findMin();
        boolean boolean64 = t24.equals((java.lang.Object) t63);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList39);
        examples.MinFinder.T t51 = minFinder50.findMin();
        int int52 = t51.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList23);
        examples.MinFinder.T t48 = minFinder47.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t48);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        boolean boolean37 = t35.equals((java.lang.Object) ' ');
        minFinder0.add(t35);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T(3);
        minFinder9.chval(t12, (int) (short) -1);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        minFinder9.add(t18);
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        minFinder9.add(t23);
        examples.MinFinder.T t25 = minFinder9.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder26.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        minFinder26.add(t36);
        boolean boolean38 = t25.equals((java.lang.Object) t36);
        minFinder0.add(t36);
        examples.MinFinder.T t40 = minFinder0.findMin();
        int int41 = t40.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNotNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        boolean boolean59 = t57.equals((java.lang.Object) (-1));
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        minFinder0.chval(t57, 32);
        int int64 = t57.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t19 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t19);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) -1);
        boolean boolean3 = t1.equals((java.lang.Object) (-10));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        boolean boolean68 = t54.equals((java.lang.Object) minFinder55);
        minFinder55.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder55.chval(t71, 1);
        minFinder40.add(t71);
        minFinder39.add(t71);
        int int76 = t71.getVal();
        boolean boolean77 = t1.equals((java.lang.Object) t71);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t71 = minFinder66.findMin();
        examples.MinFinder.T t72 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        minFinder66.add(t75);
        minFinder0.add(t75);
        java.lang.Class<?> wildcardClass80 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 0);
        int int15 = t14.getVal();
        minFinder0.chval(t14, (-9));
        examples.MinFinder.T t18 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        examples.MinFinder.T t34 = null;
        minFinder29.chval(t34, (-9));
        minFinder29.clear();
        examples.MinFinder.T t38 = minFinder29.findMin();
        examples.MinFinder.T t39 = minFinder29.findMin();
        examples.MinFinder.T t40 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t40);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        minFinder36.clear();
        minFinder36.clear();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        minFinder43.chval(t49, (int) ' ');
        minFinder36.add(t49);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        java.lang.Object obj65 = null;
        boolean boolean66 = t60.equals(obj65);
        minFinder36.add(t60);
        examples.MinFinder.T t68 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t73 = minFinder70.findMin();
        minFinder70.clear();
        examples.MinFinder.T t75 = minFinder70.findMin();
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T(3);
        minFinder76.chval(t79, (int) (short) -1);
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(3);
        minFinder82.chval(t85, (int) (short) -1);
        minFinder76.add(t85);
        int int89 = t85.getVal();
        minFinder70.add(t85);
        minFinder36.chval(t85, 0);
        int int93 = t85.getVal();
        minFinder32.chval(t85, 4);
        int int96 = t85.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 3 + "'", int89 == 3);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        boolean boolean11 = t1.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t1.equals((java.lang.Object) minFinder12);
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) -1);
        minFinder12.add(t27);
        minFinder12.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        minFinder10.add(t24);
        examples.MinFinder.T t26 = minFinder10.findMin();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-9));
        int int35 = t34.getVal();
        minFinder27.chval(t34, 10);
        int int38 = t34.getVal();
        minFinder10.add(t34);
        examples.MinFinder.T t40 = minFinder10.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        minFinder43.add(t52);
        boolean boolean56 = t42.equals((java.lang.Object) minFinder43);
        examples.MinFinder.T t57 = minFinder43.findMin();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t61 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        minFinder58.chval(t64, 0);
        minFinder58.clear();
        boolean boolean72 = t57.equals((java.lang.Object) minFinder58);
        minFinder10.add(t57);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        examples.MinFinder.T t77 = minFinder74.findMin();
        minFinder74.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        minFinder74.chval(t80, 0);
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) (short) 0);
        int int89 = t88.getVal();
        minFinder74.chval(t88, (-9));
        int int92 = t88.getVal();
        minFinder10.add(t88);
        examples.MinFinder.T t94 = minFinder10.findMin();
        minFinder0.chval(t94, (-2));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNotNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-9) + "'", int35 == (-9));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-9) + "'", int38 == (-9));
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNotNull(t94);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) (byte) 100);
        int int12 = t11.getVal();
        minFinder0.chval(t11, (-7));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        minFinder18.chval(t20, (int) ' ');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-9));
        boolean boolean31 = t29.equals((java.lang.Object) 6);
        minFinder18.chval(t29, 97);
        boolean boolean34 = t16.equals((java.lang.Object) t29);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t36, t38, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        minFinder64.add(t74);
        examples.MinFinder.T t79 = minFinder64.findMin();
        examples.MinFinder.T t80 = minFinder64.findMin();
        boolean boolean81 = t29.equals((java.lang.Object) t80);
        minFinder0.chval(t29, 8);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        int int23 = t19.getVal();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        boolean boolean40 = t38.equals((java.lang.Object) (-1));
        int int41 = t38.getVal();
        minFinder24.chval(t38, 0);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        minFinder50.add(t55);
        minFinder44.chval(t55, 5);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        examples.MinFinder.T t74 = new examples.MinFinder.T((-9));
        minFinder60.add(t74);
        minFinder44.chval(t74, (-10));
        minFinder24.chval(t74, (-1));
        boolean boolean80 = t19.equals((java.lang.Object) minFinder24);
        int int81 = t19.getVal();
        boolean boolean82 = t1.equals((java.lang.Object) t19);
        int int83 = t19.getVal();
        int int84 = t19.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 3 + "'", int84 == 3);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        minFinder11.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        minFinder11.add(t21);
        int int23 = t21.getVal();
        minFinder0.chval(t21, 4);
        examples.MinFinder.T t26 = null;
        minFinder0.add(t26);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        minFinder28.chval(t34, (int) ' ');
        int int43 = t34.getVal();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        minFinder44.chval(t50, 0);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        int int60 = t59.getVal();
        minFinder57.chval(t59, (-100));
        minFinder44.chval(t59, 0);
        boolean boolean65 = t34.equals((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t17 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t17);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        boolean boolean9 = t7.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        boolean boolean25 = t17.equals((java.lang.Object) (-8.7d));
        minFinder10.chval(t17, (-100));
        boolean boolean28 = t7.equals((java.lang.Object) t17);
        minFinder0.add(t17);
        int int30 = t17.getVal();
        int int31 = t17.getVal();
        int int32 = t17.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        minFinder0.clear();
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) (byte) 1);
        minFinder0.chval(t13, 5);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t11);
    }
}

