package examples;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t71 = minFinder66.findMin();
        examples.MinFinder.T t72 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        minFinder66.add(t75);
        minFinder0.add(t75);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        java.lang.Class<?> wildcardClass49 = tList39.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder.T t24 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t24);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList39);
        examples.MinFinder.T t52 = minFinder51.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t52);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        java.lang.Class<?> wildcardClass25 = t18.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass16 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        examples.MinFinder.T t79 = minFinder76.findMin();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-1));
        minFinder76.chval(t81, 100);
        examples.MinFinder.T t85 = new examples.MinFinder.T(7);
        minFinder76.chval(t85, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            minFinder75.chval(t85, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertNull(t79);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 100);
        minFinder72.add(t75);
        examples.MinFinder.T t77 = minFinder72.findMin();
        minFinder25.add(t77);
        examples.MinFinder.T t79 = minFinder25.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNotNull(t79);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t9, t11, t18, t23, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        minFinder49.add(t51);
        examples.MinFinder.T t53 = minFinder49.findMin();
        int int54 = t53.getVal();
        minFinder0.add(t53);
        examples.MinFinder.T t56 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass57 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(t56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        boolean boolean68 = t54.equals((java.lang.Object) minFinder55);
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        minFinder55.add(t70);
        minFinder41.add(t70);
        int int74 = t70.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        minFinder0.clear();
        examples.MinFinder.T t13 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t13);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        int int9 = t1.getVal();
        java.lang.Class<?> wildcardClass10 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder minFinder1 = new examples.MinFinder();
        examples.MinFinder.T t2 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t4 = minFinder1.findMin();
        minFinder1.clear();
        examples.MinFinder.T t6 = minFinder1.findMin();
        minFinder1.clear();
        minFinder1.clear();
        examples.MinFinder.T t9 = minFinder1.findMin();
        examples.MinFinder.T t10 = minFinder1.findMin();
        examples.MinFinder.T t11 = minFinder1.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        boolean boolean20 = t13.equals((java.lang.Object) 100.0d);
        int int21 = t13.getVal();
        minFinder1.add(t13);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder36.add(t50);
        minFinder23.add(t50);
        boolean boolean54 = t13.equals((java.lang.Object) minFinder23);
        minFinder0.add(t13);
        int int56 = t13.getVal();
        java.lang.Class<?> wildcardClass57 = t13.getClass();
        org.junit.Assert.assertNull(t2);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(3);
        minFinder7.chval(t10, (int) (short) -1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        minFinder7.add(t16);
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        int int22 = t21.getVal();
        minFinder7.add(t21);
        examples.MinFinder.T t24 = minFinder7.findMin();
        minFinder0.chval(t24, (-1));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        int int43 = t42.getVal();
        minFinder40.chval(t42, (-100));
        minFinder27.chval(t42, 0);
        int int48 = t42.getVal();
        int int49 = t42.getVal();
        minFinder0.chval(t42, (-5));
        int int52 = t42.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(t24);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-9) + "'", int43 == (-9));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-9) + "'", int48 == (-9));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-9) + "'", int49 == (-9));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-9) + "'", int52 == (-9));
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass20 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        minFinder0.clear();
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        minFinder16.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) (short) 0);
        minFinder16.chval(t31, (int) '4');
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 0);
        int int36 = t35.getVal();
        minFinder16.chval(t35, 100);
        minFinder0.chval(t35, (-1));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        java.lang.Class<?> wildcardClass8 = t3.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        java.lang.Class<?> wildcardClass48 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) (-1));
        int int81 = t78.getVal();
        minFinder64.chval(t78, 0);
        minFinder63.add(t78);
        minFinder29.chval(t78, (-9));
        java.lang.Class<?> wildcardClass87 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        java.lang.Class<?> wildcardClass76 = t66.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t43 = minFinder41.findMin();
        examples.MinFinder.T t44 = minFinder41.findMin();
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        int int45 = t44.getVal();
        java.lang.Class<?> wildcardClass46 = t44.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        boolean boolean17 = t10.equals((java.lang.Object) 100.0d);
        minFinder0.add(t10);
        int int19 = t10.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        boolean boolean72 = t64.equals((java.lang.Object) 0.0f);
        minFinder61.add(t64);
        boolean boolean74 = t10.equals((java.lang.Object) t64);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        minFinder65.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        minFinder65.chval(t80, (int) '4');
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        minFinder65.chval(t84, 100);
        examples.MinFinder minFinder88 = new examples.MinFinder();
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        int int91 = t90.getVal();
        minFinder88.chval(t90, (-100));
        minFinder65.add(t90);
        minFinder32.add(t90);
        int int96 = t90.getVal();
        int int97 = t90.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-9) + "'", int91 == (-9));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-9) + "'", int96 == (-9));
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-9) + "'", int97 == (-9));
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-9) + "'", int31 == (-9));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-9) + "'", int32 == (-9));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-8));
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        boolean boolean26 = t12.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t27 = minFinder13.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        boolean boolean42 = t27.equals((java.lang.Object) minFinder28);
        boolean boolean43 = t10.equals((java.lang.Object) boolean42);
        minFinder0.chval(t10, (int) '4');
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        minFinder46.chval(t48, (int) ' ');
        examples.MinFinder.T t56 = minFinder46.findMin();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        minFinder57.chval(t63, 0);
        minFinder57.clear();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        minFinder71.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) (short) 0);
        minFinder71.chval(t86, (int) '4');
        minFinder57.add(t86);
        examples.MinFinder.T t91 = new examples.MinFinder.T((-3));
        int int92 = t91.getVal();
        int int93 = t91.getVal();
        int int94 = t91.getVal();
        int int95 = t91.getVal();
        boolean boolean96 = t86.equals((java.lang.Object) t91);
        minFinder46.add(t91);
        examples.MinFinder.T t98 = minFinder46.findMin();
        minFinder0.add(t98);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(t98);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t18, t20, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList40);
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 100);
        minFinder44.add(t47);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        minFinder49.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) (short) 0);
        minFinder49.chval(t64, (int) '4');
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        minFinder67.add(t76);
        minFinder67.clear();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) (short) 0);
        minFinder67.chval(t82, (int) '4');
        minFinder49.add(t82);
        minFinder44.add(t82);
        minFinder2.add(t82);
        int int88 = t82.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass30 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        int int82 = t78.getVal();
        java.lang.Class<?> wildcardClass83 = t78.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-1));
        minFinder19.chval(t34, (int) (byte) 1);
        minFinder0.add(t34);
        minFinder0.clear();
        examples.MinFinder.T t39 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t39);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass14 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-9));
        int int42 = t41.getVal();
        minFinder39.chval(t41, (-100));
        int int45 = t41.getVal();
        minFinder36.chval(t41, (-4));
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        minFinder48.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        minFinder48.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        minFinder48.add(t61);
        minFinder36.add(t61);
        minFinder36.clear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-9) + "'", int45 == (-9));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-1));
        minFinder17.chval(t22, 100);
        boolean boolean26 = t22.equals((java.lang.Object) 5L);
        minFinder0.add(t22);
        examples.MinFinder.T t28 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        boolean boolean45 = t31.equals((java.lang.Object) minFinder32);
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        minFinder32.add(t47);
        examples.MinFinder.T t50 = minFinder32.findMin();
        minFinder0.add(t50);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(t50);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t21 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = t21.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        minFinder38.clear();
        examples.MinFinder.T t46 = minFinder38.findMin();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t46);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        minFinder42.add(t47);
        minFinder42.clear();
        examples.MinFinder.T t51 = null;
        minFinder42.chval(t51, 0);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList77);
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) 'a');
        minFinder83.add(t85);
        examples.MinFinder minFinder87 = new examples.MinFinder();
        examples.MinFinder.T t88 = minFinder87.findMin();
        minFinder87.clear();
        examples.MinFinder.T t90 = minFinder87.findMin();
        examples.MinFinder.T t92 = new examples.MinFinder.T((-1));
        minFinder87.chval(t92, 100);
        java.lang.Class<?> wildcardClass95 = minFinder87.getClass();
        boolean boolean96 = t85.equals((java.lang.Object) wildcardClass95);
        minFinder42.add(t85);
        // The following exception was thrown during execution in test generation
        try {
            minFinder41.chval(t85, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertNull(t90);
        org.junit.Assert.assertNotNull(wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        examples.MinFinder.T t35 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass36 = t35.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(t35);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass10 = minFinder0.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t45 = minFinder43.findMin();
        examples.MinFinder.T t46 = null;
        minFinder43.chval(t46, (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNotNull(t45);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        examples.MinFinder.T t62 = minFinder25.findMin();
        minFinder25.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNull(t62);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        int int19 = t15.getVal();
        minFinder0.chval(t15, (-7));
        java.lang.Class<?> wildcardClass22 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-9) + "'", int19 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        int int30 = t24.getVal();
        int int31 = t24.getVal();
        int int32 = t24.getVal();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        minFinder33.add(t38);
        examples.MinFinder.T t42 = new examples.MinFinder.T(1);
        boolean boolean43 = t38.equals((java.lang.Object) t42);
        int int44 = t42.getVal();
        boolean boolean46 = t42.equals((java.lang.Object) 3L);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList70);
        examples.MinFinder.T t85 = minFinder84.findMin();
        boolean boolean86 = t42.equals((java.lang.Object) t85);
        int int87 = t85.getVal();
        boolean boolean88 = t24.equals((java.lang.Object) int87);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-9) + "'", int30 == (-9));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-9) + "'", int31 == (-9));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-9) + "'", int32 == (-9));
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass17 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        minFinder36.clear();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) (short) 0);
        minFinder36.chval(t51, (int) '4');
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) (short) 0);
        int int56 = t55.getVal();
        minFinder36.chval(t55, 100);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        boolean boolean62 = t60.equals((java.lang.Object) (-1));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        examples.MinFinder.T[] tArray85 = new examples.MinFinder.T[] { t64, t66, t73, t75, t83 };
        java.util.ArrayList<examples.MinFinder.T> tList86 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList86, tArray85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList86);
        boolean boolean94 = t60.equals((java.lang.Object) minFinder93);
        boolean boolean95 = t55.equals((java.lang.Object) t60);
        boolean boolean97 = t55.equals((java.lang.Object) 3);
        minFinder32.add(t55);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(tArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-1));
        minFinder13.chval(t18, 100);
        examples.MinFinder.T t22 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-9));
        int int39 = t38.getVal();
        minFinder36.chval(t38, (-100));
        minFinder23.chval(t38, 0);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        java.lang.Object obj50 = null;
        boolean boolean51 = t45.equals(obj50);
        minFinder23.add(t45);
        boolean boolean53 = t22.equals((java.lang.Object) t45);
        minFinder13.chval(t22, (int) ' ');
        minFinder0.add(t22);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-9) + "'", int39 == (-9));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-9));
        int int62 = t61.getVal();
        minFinder59.chval(t61, (-100));
        minFinder46.chval(t61, 0);
        boolean boolean67 = t45.equals((java.lang.Object) t61);
        examples.MinFinder.T t69 = new examples.MinFinder.T(10);
        boolean boolean70 = t61.equals((java.lang.Object) 10);
        boolean boolean71 = t43.equals((java.lang.Object) boolean70);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-9) + "'", int62 == (-9));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        minFinder51.add(t60);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-9));
        minFinder51.add(t65);
        examples.MinFinder.T t67 = minFinder51.findMin();
        int int68 = t67.getVal();
        minFinder32.add(t67);
        int int70 = t67.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-9) + "'", int68 == (-9));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-9) + "'", int70 == (-9));
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t32 = minFinder0.findMin();
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder.T t48 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-1));
        minFinder51.chval(t56, 100);
        boolean boolean60 = t56.equals((java.lang.Object) 5L);
        minFinder34.add(t56);
        examples.MinFinder.T t62 = minFinder34.findMin();
        int int63 = t62.getVal();
        minFinder0.add(t62);
        examples.MinFinder.T t65 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(t65);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        boolean boolean66 = t52.equals((java.lang.Object) minFinder53);
        minFinder53.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder53.chval(t69, 1);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-1));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        boolean boolean77 = t69.equals((java.lang.Object) int76);
        minFinder29.add(t69);
        int int79 = t69.getVal();
        java.lang.Class<?> wildcardClass80 = t69.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        minFinder62.add(t71);
        boolean boolean75 = t61.equals((java.lang.Object) minFinder62);
        minFinder62.clear();
        boolean boolean77 = t58.equals((java.lang.Object) minFinder62);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        examples.MinFinder.T t81 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        minFinder78.clear();
        boolean boolean85 = t58.equals((java.lang.Object) minFinder78);
        minFinder78.clear();
        minFinder78.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        int int86 = t80.getVal();
        examples.MinFinder.T[] tArray87 = new examples.MinFinder.T[] { t50, t52, t59, t64, t70, t72, t80 };
        java.util.ArrayList<examples.MinFinder.T> tList88 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList88, tArray87);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList88);
        examples.MinFinder.T t92 = new examples.MinFinder.T((-3));
        minFinder90.add(t92);
        examples.MinFinder.T t94 = minFinder90.findMin();
        int int95 = t94.getVal();
        boolean boolean97 = t94.equals((java.lang.Object) '4');
        minFinder0.add(t94);
        examples.MinFinder.T t99 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(tArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(t99);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (byte) 0);
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        minFinder0.chval(t36, 9);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass3 = minFinder0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass33 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        minFinder10.chval(t12, (int) ' ');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-9));
        boolean boolean23 = t21.equals((java.lang.Object) 6);
        minFinder10.chval(t21, 97);
        boolean boolean26 = t8.equals((java.lang.Object) t21);
        minFinder0.add(t8);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder28.clear();
        minFinder28.clear();
        minFinder28.clear();
        minFinder28.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-1));
        minFinder48.chval(t53, 100);
        examples.MinFinder.T t57 = new examples.MinFinder.T(7);
        minFinder48.chval(t57, (int) (byte) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder60.clear();
        examples.MinFinder.T t74 = minFinder60.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        boolean boolean78 = t76.equals((java.lang.Object) ' ');
        minFinder60.add(t76);
        examples.MinFinder.T t80 = minFinder60.findMin();
        minFinder48.chval(t80, 1);
        minFinder28.chval(t80, (int) (short) -1);
        minFinder0.add(t80);
        java.lang.Class<?> wildcardClass86 = t80.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(wildcardClass86);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) (-1));
        int int28 = t25.getVal();
        minFinder11.chval(t25, 0);
        minFinder11.clear();
        examples.MinFinder.T t32 = minFinder11.findMin();
        boolean boolean33 = t5.equals((java.lang.Object) t32);
        // The following exception was thrown during execution in test generation
        try {
            int int34 = t32.getVal();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        minFinder29.clear();
        java.lang.Class<?> wildcardClass35 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t9, t11, t18, t23, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        minFinder49.add(t51);
        examples.MinFinder.T t53 = minFinder49.findMin();
        int int54 = t53.getVal();
        minFinder0.add(t53);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t58 = new examples.MinFinder.T(100);
        minFinder56.add(t58);
        java.lang.Class<?> wildcardClass60 = minFinder56.getClass();
        boolean boolean61 = t53.equals((java.lang.Object) minFinder56);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        java.lang.Class<?> wildcardClass69 = tList56.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass33 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder29.add(t39);
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t18, t20, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList40);
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 100);
        minFinder44.add(t47);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        minFinder49.add(t58);
        minFinder49.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) (short) 0);
        minFinder49.chval(t64, (int) '4');
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        minFinder67.add(t76);
        minFinder67.clear();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) (short) 0);
        minFinder67.chval(t82, (int) '4');
        minFinder49.add(t82);
        minFinder44.add(t82);
        minFinder2.add(t82);
        java.lang.Class<?> wildcardClass88 = t82.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder.T t57 = minFinder0.findMin();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        examples.MinFinder.T t61 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t68 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        minFinder65.chval(t71, (int) ' ');
        minFinder58.add(t71);
        examples.MinFinder.T t82 = new examples.MinFinder.T((-3));
        int int83 = t82.getVal();
        int int84 = t82.getVal();
        int int85 = t82.getVal();
        int int86 = t82.getVal();
        java.lang.Object obj87 = null;
        boolean boolean88 = t82.equals(obj87);
        minFinder58.add(t82);
        examples.MinFinder.T t90 = minFinder58.findMin();
        examples.MinFinder.T t91 = minFinder58.findMin();
        minFinder0.add(t91);
        java.lang.Class<?> wildcardClass93 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(t90);
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        int int40 = t39.getVal();
        examples.MinFinder.T[] tArray41 = new examples.MinFinder.T[] { t20, t22, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList42 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList42, tArray41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList42);
        java.lang.Class<?> wildcardClass46 = tList42.getClass();
        boolean boolean47 = t18.equals((java.lang.Object) tList42);
        minFinder0.add(t18);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertNotNull(tArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        java.lang.Object obj16 = null;
        boolean boolean17 = t11.equals(obj16);
        int int18 = t11.getVal();
        minFinder0.chval(t11, 0);
        java.lang.Class<?> wildcardClass21 = t11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        minFinder14.clear();
        minFinder14.clear();
        examples.MinFinder.T t21 = minFinder14.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T[] tArray60 = new examples.MinFinder.T[] { t23, t25, t32, t37, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList61 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList61, tArray60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList61);
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        minFinder63.add(t65);
        examples.MinFinder.T t67 = minFinder63.findMin();
        int int68 = t67.getVal();
        minFinder14.add(t67);
        minFinder0.chval(t67, (int) (short) 100);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertNotNull(tArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t53 = minFinder50.findMin();
        minFinder50.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        minFinder50.chval(t56, 0);
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        boolean boolean78 = t64.equals((java.lang.Object) minFinder65);
        minFinder65.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T(3);
        minFinder65.chval(t81, 1);
        minFinder50.add(t81);
        boolean boolean85 = t46.equals((java.lang.Object) t81);
        examples.MinFinder minFinder86 = new examples.MinFinder();
        examples.MinFinder.T t87 = minFinder86.findMin();
        minFinder86.clear();
        minFinder86.clear();
        examples.MinFinder.T t91 = new examples.MinFinder.T((int) 'a');
        int int92 = t91.getVal();
        minFinder86.add(t91);
        examples.MinFinder.T t95 = new examples.MinFinder.T(3);
        minFinder86.add(t95);
        examples.MinFinder.T t97 = minFinder86.findMin();
        boolean boolean98 = t81.equals((java.lang.Object) t97);
        boolean boolean99 = t44.equals((java.lang.Object) t97);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
        org.junit.Assert.assertNotNull(t97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        int int33 = t29.getVal();
        java.lang.Class<?> wildcardClass34 = t29.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        boolean boolean68 = t29.equals((java.lang.Object) boolean67);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t74 = minFinder69.findMin();
        examples.MinFinder.T t75 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        minFinder69.add(t78);
        boolean boolean82 = t29.equals((java.lang.Object) t78);
        examples.MinFinder.T t84 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder85 = new examples.MinFinder();
        examples.MinFinder.T t86 = minFinder85.findMin();
        minFinder85.clear();
        minFinder85.clear();
        examples.MinFinder.T t90 = new examples.MinFinder.T((int) 'a');
        int int91 = t90.getVal();
        minFinder85.add(t90);
        examples.MinFinder.T t94 = new examples.MinFinder.T(3);
        minFinder85.add(t94);
        boolean boolean96 = t84.equals((java.lang.Object) t94);
        int int97 = t94.getVal();
        int int98 = t94.getVal();
        boolean boolean99 = t78.equals((java.lang.Object) t94);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 97 + "'", int91 == 97);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 3 + "'", int97 == 3);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t15 = minFinder12.findMin();
        minFinder12.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        minFinder12.chval(t18, 0);
        minFinder12.clear();
        examples.MinFinder.T t26 = minFinder12.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) ' ');
        minFinder12.add(t28);
        examples.MinFinder.T t32 = minFinder12.findMin();
        minFinder0.chval(t32, 1);
        java.lang.Class<?> wildcardClass35 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        java.lang.Class<?> wildcardClass19 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t47 = minFinder41.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) (byte) 100);
        int int50 = t49.getVal();
        minFinder41.chval(t49, (int) '4');
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t56 = minFinder53.findMin();
        minFinder53.clear();
        examples.MinFinder.T t58 = minFinder53.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        boolean boolean62 = t60.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        boolean boolean78 = t70.equals((java.lang.Object) (-8.7d));
        minFinder63.chval(t70, (-100));
        boolean boolean81 = t60.equals((java.lang.Object) t70);
        minFinder53.add(t70);
        boolean boolean83 = t49.equals((java.lang.Object) minFinder53);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        minFinder0.add(t13);
        examples.MinFinder.T t15 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t15);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        java.lang.Class<?> wildcardClass43 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder.T t37 = minFinder36.findMin();
        java.lang.Class<?> wildcardClass38 = t37.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t37);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t9, t11, t18, t23, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        minFinder49.add(t51);
        examples.MinFinder.T t53 = minFinder49.findMin();
        int int54 = t53.getVal();
        minFinder0.add(t53);
        examples.MinFinder.T t56 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(t56);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        minFinder61.add(t75);
        minFinder45.chval(t75, (-10));
        boolean boolean79 = t44.equals((java.lang.Object) t75);
        minFinder41.chval(t75, 1);
        examples.MinFinder.T t82 = minFinder41.findMin();
        java.lang.Class<?> wildcardClass83 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        examples.MinFinder.T[] tArray28 = new examples.MinFinder.T[] { t7, t9, t16, t18, t26 };
        java.util.ArrayList<examples.MinFinder.T> tList29 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList29, tArray28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList29);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList62);
        examples.MinFinder.T t67 = minFinder66.findMin();
        int int68 = t67.getVal();
        minFinder38.add(t67);
        examples.MinFinder.T t70 = minFinder38.findMin();
        minFinder0.add(t70);
        examples.MinFinder.T t72 = minFinder0.findMin();
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        minFinder73.add(t82);
        boolean boolean86 = t72.equals((java.lang.Object) minFinder73);
        java.lang.Class<?> wildcardClass87 = minFinder73.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(tArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass87);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNotNull(t9);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        java.lang.Object obj27 = null;
        boolean boolean28 = t22.equals(obj27);
        minFinder0.add(t22);
        int int30 = t22.getVal();
        int int31 = t22.getVal();
        java.lang.Class<?> wildcardClass32 = t22.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        examples.MinFinder.T t95 = new examples.MinFinder.T(100);
        minFinder0.add(t95);
        int int97 = t95.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 100 + "'", int97 == 100);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        minFinder16.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        int int22 = t21.getVal();
        minFinder16.add(t21);
        minFinder16.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        minFinder16.add(t26);
        examples.MinFinder.T t28 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t30 = minFinder16.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        int int52 = t51.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t32, t34, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList54);
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) (short) 100);
        minFinder58.add(t61);
        minFinder16.chval(t61, 6);
        minFinder2.add(t61);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(t59);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        java.lang.Class<?> wildcardClass41 = tList37.getClass();
        boolean boolean42 = t13.equals((java.lang.Object) tList37);
        int int43 = t13.getVal();
        minFinder0.chval(t13, (-9));
        examples.MinFinder.T t46 = minFinder0.findMin();
        examples.MinFinder.T t47 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass48 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        int int61 = t15.getVal();
        java.lang.Object obj62 = null;
        boolean boolean63 = t15.equals(obj62);
        int int64 = t15.getVal();
        int int65 = t15.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t6, t8, t15, t20, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        minFinder46.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(1);
        boolean boolean58 = t53.equals((java.lang.Object) t57);
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        minFinder46.chval(t57, (int) 'a');
        int int63 = t57.getVal();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t69 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder.T t74 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        minFinder71.chval(t77, 0);
        minFinder71.clear();
        examples.MinFinder.T t85 = minFinder71.findMin();
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        boolean boolean89 = t87.equals((java.lang.Object) ' ');
        minFinder71.add(t87);
        minFinder64.chval(t87, (int) ' ');
        boolean boolean93 = t57.equals((java.lang.Object) t87);
        minFinder0.add(t87);
        examples.MinFinder.T t96 = new examples.MinFinder.T(52);
        minFinder0.add(t96);
        java.lang.Class<?> wildcardClass98 = t96.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder0.add(t24);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-9));
        int int71 = t70.getVal();
        minFinder68.chval(t70, (-100));
        minFinder67.add(t70);
        minFinder0.add(t70);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-9) + "'", int71 == (-9));
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        boolean boolean32 = t24.equals((java.lang.Object) (-8.7d));
        minFinder17.chval(t24, (-100));
        minFinder0.add(t24);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass67 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        int int38 = t37.getVal();
        minFinder18.chval(t37, 100);
        examples.MinFinder.T t41 = minFinder18.findMin();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        minFinder42.clear();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        minFinder56.add(t65);
        minFinder56.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (short) 0);
        minFinder56.chval(t71, (int) '4');
        minFinder42.add(t71);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        boolean boolean81 = t71.equals((java.lang.Object) t76);
        boolean boolean83 = t76.equals((java.lang.Object) (byte) 0);
        minFinder18.add(t76);
        minFinder0.chval(t76, (-6));
        examples.MinFinder.T t87 = minFinder0.findMin();
        examples.MinFinder.T t88 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertNull(t88);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t6, t8, t15, t20, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        minFinder46.clear();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(1);
        boolean boolean58 = t53.equals((java.lang.Object) t57);
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        minFinder46.chval(t57, (int) 'a');
        int int63 = t57.getVal();
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t69 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder.T t74 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        minFinder71.chval(t77, 0);
        minFinder71.clear();
        examples.MinFinder.T t85 = minFinder71.findMin();
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        boolean boolean89 = t87.equals((java.lang.Object) ' ');
        minFinder71.add(t87);
        minFinder64.chval(t87, (int) ' ');
        boolean boolean93 = t57.equals((java.lang.Object) t87);
        minFinder0.add(t87);
        examples.MinFinder.T t96 = new examples.MinFinder.T(52);
        minFinder0.add(t96);
        int int98 = t96.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 52 + "'", int98 == 52);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        boolean boolean68 = t54.equals((java.lang.Object) minFinder55);
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        minFinder55.add(t70);
        minFinder41.add(t70);
        minFinder41.clear();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        boolean boolean22 = t15.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder.T t37 = minFinder23.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        boolean boolean41 = t39.equals((java.lang.Object) ' ');
        minFinder23.add(t39);
        boolean boolean43 = t15.equals((java.lang.Object) t39);
        minFinder0.add(t15);
        java.lang.Class<?> wildcardClass45 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t47 = minFinder41.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) (byte) 100);
        int int50 = t49.getVal();
        minFinder41.chval(t49, (int) '4');
        java.lang.Class<?> wildcardClass53 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        boolean boolean78 = t76.equals((java.lang.Object) (-1));
        minFinder74.add(t76);
        examples.MinFinder.T t80 = minFinder74.findMin();
        examples.MinFinder.T t81 = minFinder74.findMin();
        minFinder38.add(t81);
        java.lang.Class<?> wildcardClass83 = t81.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        minFinder14.clear();
        minFinder14.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t49 = minFinder44.findMin();
        minFinder44.clear();
        minFinder44.clear();
        examples.MinFinder.T t52 = minFinder44.findMin();
        examples.MinFinder.T t53 = null;
        minFinder44.chval(t53, (-9));
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        java.lang.Class<?> wildcardClass85 = tList81.getClass();
        boolean boolean86 = t57.equals((java.lang.Object) tList81);
        int int87 = t57.getVal();
        minFinder44.chval(t57, (-9));
        minFinder41.chval(t57, (-8));
        examples.MinFinder.T t92 = minFinder41.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass93 = t92.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNull(t92);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder0.add(t17);
        boolean boolean26 = t17.equals((java.lang.Object) 2L);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder27.clear();
        minFinder27.clear();
        minFinder27.clear();
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        minFinder38.clear();
        minFinder38.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        minFinder38.add(t43);
        minFinder38.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        minFinder38.add(t48);
        int int50 = t48.getVal();
        minFinder27.chval(t48, 4);
        int int53 = t48.getVal();
        boolean boolean54 = t17.equals((java.lang.Object) int53);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        minFinder44.add(t56);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        examples.MinFinder.T t65 = minFinder62.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-1));
        minFinder62.chval(t67, 100);
        boolean boolean71 = t67.equals((java.lang.Object) 5L);
        minFinder44.add(t67);
        minFinder44.clear();
        examples.MinFinder.T t74 = null;
        minFinder44.add(t74);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        examples.MinFinder.T t66 = minFinder50.findMin();
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        minFinder67.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-9));
        int int75 = t74.getVal();
        minFinder67.chval(t74, 10);
        int int78 = t74.getVal();
        minFinder50.add(t74);
        examples.MinFinder.T t80 = minFinder50.findMin();
        int int81 = t80.getVal();
        minFinder0.add(t80);
        java.lang.Class<?> wildcardClass83 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-9) + "'", int75 == (-9));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-9) + "'", int78 == (-9));
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-9) + "'", int81 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder0.add(t47);
        examples.MinFinder.T t49 = minFinder0.findMin();
        examples.MinFinder.T t50 = minFinder0.findMin();
        int int51 = t50.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNotNull(t49);
        org.junit.Assert.assertNotNull(t50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t26, t28, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList48);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t60, t62, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder.T t87 = minFinder86.findMin();
        minFinder57.chval(t87, 10);
        minFinder0.add(t87);
        int int91 = t87.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        int int38 = t37.getVal();
        minFinder18.chval(t37, 100);
        examples.MinFinder.T t41 = minFinder18.findMin();
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        minFinder42.clear();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        minFinder62.chval(t65, (int) (short) -1);
        minFinder56.add(t65);
        minFinder56.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (short) 0);
        minFinder56.chval(t71, (int) '4');
        minFinder42.add(t71);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        boolean boolean81 = t71.equals((java.lang.Object) t76);
        boolean boolean83 = t76.equals((java.lang.Object) (byte) 0);
        minFinder18.add(t76);
        minFinder0.chval(t76, (-6));
        int int87 = t76.getVal();
        java.lang.Class<?> wildcardClass88 = t76.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        java.lang.Class<?> wildcardClass59 = tList55.getClass();
        boolean boolean60 = t31.equals((java.lang.Object) tList55);
        int int61 = t31.getVal();
        examples.MinFinder minFinder62 = new examples.MinFinder();
        examples.MinFinder.T t63 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        minFinder62.add(t67);
        int int70 = t67.getVal();
        boolean boolean71 = t31.equals((java.lang.Object) t67);
        boolean boolean72 = t1.equals((java.lang.Object) t67);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t25 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        minFinder22.chval(t28, 0);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        minFinder22.add(t49);
        boolean boolean53 = t12.equals((java.lang.Object) minFinder22);
        minFinder22.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        int int45 = t43.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-8));
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        boolean boolean26 = t12.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t27 = minFinder13.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        boolean boolean42 = t27.equals((java.lang.Object) minFinder28);
        boolean boolean43 = t10.equals((java.lang.Object) boolean42);
        minFinder0.chval(t10, (int) '4');
        java.lang.Class<?> wildcardClass46 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder20.add(t34);
        minFinder0.add(t34);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass39 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        examples.MinFinder.T t57 = minFinder54.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-1));
        minFinder54.chval(t59, 100);
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        minFinder54.add(t63);
        minFinder54.clear();
        boolean boolean68 = t30.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        minFinder69.chval(t75, 0);
        int int82 = t75.getVal();
        minFinder54.add(t75);
        java.lang.Class<?> wildcardClass84 = minFinder54.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        boolean boolean10 = t8.equals((java.lang.Object) (-1));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        examples.MinFinder.T[] tArray33 = new examples.MinFinder.T[] { t12, t14, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList34 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList34, tArray33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList34);
        boolean boolean42 = t8.equals((java.lang.Object) minFinder41);
        minFinder0.chval(t8, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        minFinder46.chval(t48, (int) ' ');
        examples.MinFinder.T t56 = minFinder46.findMin();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t60 = minFinder57.findMin();
        minFinder57.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        minFinder57.chval(t63, 0);
        minFinder57.clear();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        examples.MinFinder.T t80 = new examples.MinFinder.T(3);
        minFinder77.chval(t80, (int) (short) -1);
        minFinder71.add(t80);
        minFinder71.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) (short) 0);
        minFinder71.chval(t86, (int) '4');
        minFinder57.add(t86);
        examples.MinFinder.T t91 = new examples.MinFinder.T((-3));
        int int92 = t91.getVal();
        int int93 = t91.getVal();
        int int94 = t91.getVal();
        int int95 = t91.getVal();
        boolean boolean96 = t86.equals((java.lang.Object) t91);
        minFinder46.add(t91);
        minFinder0.chval(t91, (int) (byte) 10);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(tArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        examples.MinFinder.T t36 = minFinder0.findMin();
        examples.MinFinder.T t37 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t37);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder8.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((int) 'a');
        minFinder8.add(t18);
        examples.MinFinder.T t20 = minFinder8.findMin();
        minFinder0.add(t20);
        int int22 = t20.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t24, t26, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList46);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder.T t84 = minFinder83.findMin();
        int int85 = t84.getVal();
        minFinder55.add(t84);
        examples.MinFinder.T t87 = minFinder55.findMin();
        int int88 = t87.getVal();
        int int89 = t87.getVal();
        boolean boolean90 = t20.equals((java.lang.Object) t87);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        java.lang.Object obj27 = null;
        boolean boolean28 = t22.equals(obj27);
        minFinder0.add(t22);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t31, t33, t40, t45, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder.T t72 = minFinder71.findMin();
        boolean boolean73 = t22.equals((java.lang.Object) t72);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        minFinder32.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        int int73 = t72.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t53, t55, t62, t64, t72 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList75);
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        minFinder81.add(t83);
        examples.MinFinder.T t85 = minFinder81.findMin();
        minFinder32.add(t85);
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t85);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-1));
        minFinder2.chval(t7, 100);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        minFinder2.add(t11);
        minFinder2.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        int int38 = t32.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        examples.MinFinder.T[] tArray42 = new examples.MinFinder.T[] { t21, t23, t30, t32, t40 };
        java.util.ArrayList<examples.MinFinder.T> tList43 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList43, tArray42);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList43);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList43);
        boolean boolean53 = t17.equals((java.lang.Object) minFinder52);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        boolean boolean60 = t17.equals((java.lang.Object) minFinder54);
        minFinder2.chval(t17, 97);
        minFinder2.clear();
        boolean boolean64 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        minFinder65.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        minFinder65.chval(t80, (int) '4');
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) '#');
        int int85 = t84.getVal();
        minFinder65.chval(t84, (int) (byte) 0);
        minFinder2.chval(t84, (int) (short) 0);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNotNull(tArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 35 + "'", int85 == 35);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        java.lang.Class<?> wildcardClass21 = t17.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        minFinder10.chval(t16, 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder10.chval(t25, 0);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        java.lang.Object obj37 = null;
        boolean boolean38 = t32.equals(obj37);
        minFinder10.add(t32);
        boolean boolean40 = t9.equals((java.lang.Object) t32);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        examples.MinFinder.T[] tArray63 = new examples.MinFinder.T[] { t42, t44, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList64 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList64, tArray63);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList64);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList64);
        boolean boolean76 = t9.equals((java.lang.Object) tList64);
        int int77 = t9.getVal();
        minFinder0.add(t9);
        java.lang.Class<?> wildcardClass79 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(tArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t67 = minFinder64.findMin();
        minFinder64.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        minFinder64.chval(t70, 0);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        boolean boolean80 = t78.equals((java.lang.Object) (-1));
        int int81 = t78.getVal();
        minFinder64.chval(t78, 0);
        minFinder63.add(t78);
        examples.MinFinder.T t85 = minFinder63.findMin();
        int int86 = t85.getVal();
        minFinder0.add(t85);
        examples.MinFinder.T t88 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        int int33 = t24.getVal();
        int int34 = t24.getVal();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder35.clear();
        minFinder35.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList70);
        boolean boolean80 = t44.equals((java.lang.Object) minFinder79);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T(3);
        minFinder81.chval(t84, (int) (short) -1);
        boolean boolean87 = t44.equals((java.lang.Object) minFinder81);
        minFinder35.add(t44);
        boolean boolean89 = t24.equals((java.lang.Object) t44);
        int int90 = t24.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        minFinder0.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        boolean boolean32 = t25.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t36 = minFinder33.findMin();
        minFinder33.clear();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        minFinder33.chval(t39, 0);
        minFinder33.clear();
        examples.MinFinder.T t47 = minFinder33.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        boolean boolean51 = t49.equals((java.lang.Object) ' ');
        minFinder33.add(t49);
        boolean boolean53 = t25.equals((java.lang.Object) t49);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList77);
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) 'a');
        minFinder82.add(t84);
        boolean boolean86 = t25.equals((java.lang.Object) t84);
        minFinder0.chval(t25, (int) ' ');
        examples.MinFinder.T t89 = minFinder0.findMin();
        examples.MinFinder.T t90 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(t89);
        org.junit.Assert.assertNull(t90);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        java.lang.Object obj71 = null;
        boolean boolean72 = t9.equals(obj71);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t9, t11, t18, t23, t29, t31, t39 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        minFinder49.add(t51);
        examples.MinFinder.T t53 = minFinder49.findMin();
        int int54 = t53.getVal();
        minFinder0.add(t53);
        examples.MinFinder.T t56 = minFinder0.findMin();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        minFinder57.add(t62);
        minFinder57.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        minFinder57.add(t67);
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        minFinder57.add(t70);
        examples.MinFinder.T t72 = minFinder57.findMin();
        minFinder0.add(t72);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        int int77 = t76.getVal();
        int int78 = t76.getVal();
        int int79 = t76.getVal();
        int int80 = t76.getVal();
        int int81 = t76.getVal();
        minFinder74.chval(t76, (int) ' ');
        minFinder74.clear();
        examples.MinFinder.T t85 = minFinder74.findMin();
        boolean boolean86 = t72.equals((java.lang.Object) t85);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNotNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(t72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        java.lang.Class<?> wildcardClass29 = t5.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        minFinder61.clear();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-9));
        int int71 = t70.getVal();
        minFinder63.chval(t70, 10);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        minFinder74.clear();
        examples.MinFinder.T t77 = minFinder74.findMin();
        minFinder74.clear();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        minFinder74.chval(t80, 0);
        minFinder63.add(t80);
        minFinder61.add(t80);
        minFinder0.add(t80);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-9) + "'", int71 == (-9));
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        int int18 = t15.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        java.lang.Class<?> wildcardClass66 = t63.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t20 = minFinder2.findMin();
        examples.MinFinder.T t21 = minFinder2.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass22 = t21.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t21);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) (short) 0);
        minFinder19.chval(t34, (int) '4');
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) (short) 0);
        int int39 = t38.getVal();
        minFinder19.chval(t38, 100);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) (-1));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList69);
        boolean boolean77 = t43.equals((java.lang.Object) minFinder76);
        boolean boolean78 = t38.equals((java.lang.Object) t43);
        minFinder0.add(t43);
        examples.MinFinder.T t80 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder0.add(t25);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t31, t33, t40, t45, t51, t53, t61 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        minFinder71.add(t73);
        examples.MinFinder.T t75 = minFinder71.findMin();
        int int76 = t75.getVal();
        boolean boolean78 = t75.equals((java.lang.Object) '4');
        int int79 = t75.getVal();
        minFinder0.add(t75);
        minFinder0.clear();
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNull(t83);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList39);
        minFinder50.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        boolean boolean48 = t34.equals((java.lang.Object) minFinder35);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        boolean boolean52 = t50.equals((java.lang.Object) (-1));
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        int int71 = t65.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        int int74 = t73.getVal();
        examples.MinFinder.T[] tArray75 = new examples.MinFinder.T[] { t54, t56, t63, t65, t73 };
        java.util.ArrayList<examples.MinFinder.T> tList76 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList76, tArray75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList76);
        boolean boolean86 = t50.equals((java.lang.Object) minFinder85);
        examples.MinFinder minFinder87 = new examples.MinFinder();
        examples.MinFinder.T t88 = minFinder87.findMin();
        examples.MinFinder.T t90 = new examples.MinFinder.T(3);
        minFinder87.chval(t90, (int) (short) -1);
        boolean boolean93 = t50.equals((java.lang.Object) minFinder87);
        minFinder35.add(t50);
        boolean boolean95 = t24.equals((java.lang.Object) minFinder35);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNotNull(tArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        boolean boolean52 = t42.equals((java.lang.Object) t47);
        int int53 = t47.getVal();
        minFinder0.add(t47);
        int int55 = t47.getVal();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-9));
        int int64 = t63.getVal();
        minFinder56.chval(t63, 10);
        examples.MinFinder.T t67 = minFinder56.findMin();
        minFinder56.clear();
        boolean boolean69 = t47.equals((java.lang.Object) minFinder56);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        examples.MinFinder.T t52 = minFinder35.findMin();
        boolean boolean53 = t30.equals((java.lang.Object) minFinder35);
        examples.MinFinder.T t54 = minFinder35.findMin();
        minFinder35.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(t54);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        java.lang.Class<?> wildcardClass47 = minFinder46.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-9));
        minFinder13.add(t27);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-9));
        minFinder29.add(t43);
        minFinder29.clear();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t48 = new examples.MinFinder.T(100);
        minFinder46.add(t48);
        minFinder29.chval(t48, (int) '#');
        java.lang.Class<?> wildcardClass52 = minFinder29.getClass();
        boolean boolean53 = t27.equals((java.lang.Object) minFinder29);
        minFinder0.chval(t27, (-100));
        java.lang.Class<?> wildcardClass56 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = t11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) (-7L));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        int int33 = t17.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList57);
        examples.MinFinder.T t71 = minFinder70.findMin();
        int int72 = t71.getVal();
        boolean boolean73 = t17.equals((java.lang.Object) t71);
        int int74 = t71.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t45 = minFinder43.findMin();
        java.lang.Class<?> wildcardClass46 = minFinder43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        minFinder32.add(t61);
        examples.MinFinder.T t64 = minFinder32.findMin();
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        java.lang.Object obj68 = null;
        boolean boolean69 = t64.equals(obj68);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        minFinder32.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        int int70 = t64.getVal();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        int int73 = t72.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t53, t55, t62, t64, t72 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList75);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList75);
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        minFinder81.add(t83);
        examples.MinFinder.T t85 = minFinder81.findMin();
        minFinder32.add(t85);
        examples.MinFinder.T t87 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertNotNull(t87);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) (short) 0);
        int int22 = t21.getVal();
        boolean boolean24 = t21.equals((java.lang.Object) 2);
        int int25 = t21.getVal();
        minFinder2.chval(t21, (-6));
        java.lang.Class<?> wildcardClass28 = t21.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        minFinder37.add(t51);
        minFinder32.chval(t51, (int) (short) 100);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder64.chval(t67, (int) (short) -1);
        minFinder58.add(t67);
        minFinder58.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) (short) 0);
        minFinder58.chval(t73, (int) '4');
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) (short) 0);
        int int78 = t77.getVal();
        minFinder58.chval(t77, 100);
        examples.MinFinder.T t81 = minFinder58.findMin();
        examples.MinFinder.T t83 = new examples.MinFinder.T(0);
        java.lang.Object obj84 = null;
        boolean boolean85 = t83.equals(obj84);
        minFinder58.chval(t83, (int) '#');
        minFinder58.clear();
        examples.MinFinder.T t89 = minFinder58.findMin();
        boolean boolean90 = t51.equals((java.lang.Object) minFinder58);
        java.lang.Class<?> wildcardClass91 = minFinder58.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNull(t89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder.T t26 = minFinder13.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass27 = t26.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t26);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-8));
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        boolean boolean26 = t12.equals((java.lang.Object) minFinder13);
        examples.MinFinder.T t27 = minFinder13.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        boolean boolean42 = t27.equals((java.lang.Object) minFinder28);
        boolean boolean43 = t10.equals((java.lang.Object) boolean42);
        minFinder0.chval(t10, (int) '4');
        int int46 = t10.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-8) + "'", int46 == (-8));
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 0);
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t6 = new examples.MinFinder.T(100);
        minFinder4.add(t6);
        java.lang.Class<?> wildcardClass8 = minFinder4.getClass();
        boolean boolean9 = t1.equals((java.lang.Object) minFinder4);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        java.lang.Class<?> wildcardClass34 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        examples.MinFinder.T t75 = minFinder47.findMin();
        minFinder0.chval(t75, (int) (short) 100);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(t75);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass36 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t49 = minFinder44.findMin();
        minFinder44.clear();
        minFinder44.clear();
        examples.MinFinder.T t52 = minFinder44.findMin();
        examples.MinFinder.T t53 = null;
        minFinder44.chval(t53, (-9));
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        java.lang.Class<?> wildcardClass85 = tList81.getClass();
        boolean boolean86 = t57.equals((java.lang.Object) tList81);
        int int87 = t57.getVal();
        minFinder44.chval(t57, (-9));
        minFinder41.chval(t57, (-8));
        examples.MinFinder.T t92 = minFinder41.findMin();
        minFinder41.clear();
        java.lang.Class<?> wildcardClass94 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        int int29 = t5.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        int int11 = t9.getVal();
        boolean boolean13 = t9.equals((java.lang.Object) 5L);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        minFinder9.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t16, t18, t25, t30, t36, t38, t46 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t58 = minFinder56.findMin();
        examples.MinFinder.T t59 = minFinder56.findMin();
        int int60 = t59.getVal();
        minFinder9.add(t59);
        minFinder0.add(t59);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(t57);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        minFinder9.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder9.add(t14);
        minFinder0.chval(t14, (-5));
        java.lang.Class<?> wildcardClass19 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        int int29 = t28.getVal();
        minFinder23.add(t28);
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder23.add(t32);
        boolean boolean34 = t22.equals((java.lang.Object) t32);
        int int35 = t32.getVal();
        minFinder2.chval(t32, 0);
        examples.MinFinder.T t38 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNull(t38);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 0);
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Class<?> wildcardClass4 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        java.lang.Object obj16 = null;
        boolean boolean17 = t11.equals(obj16);
        int int18 = t11.getVal();
        minFinder0.chval(t11, 0);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        int int38 = t33.getVal();
        int int39 = t33.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t22, t24, t31, t33, t41 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList44);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        int int75 = t74.getVal();
        examples.MinFinder.T[] tArray76 = new examples.MinFinder.T[] { t55, t57, t64, t66, t74 };
        java.util.ArrayList<examples.MinFinder.T> tList77 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList77, tArray76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList77);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList77);
        examples.MinFinder.T t82 = minFinder81.findMin();
        int int83 = t82.getVal();
        minFinder53.add(t82);
        examples.MinFinder.T t85 = minFinder53.findMin();
        boolean boolean86 = t11.equals((java.lang.Object) minFinder53);
        int int87 = t11.getVal();
        int int88 = t11.getVal();
        examples.MinFinder minFinder89 = new examples.MinFinder();
        examples.MinFinder.T t90 = minFinder89.findMin();
        minFinder89.clear();
        examples.MinFinder.T t92 = minFinder89.findMin();
        minFinder89.clear();
        minFinder89.clear();
        examples.MinFinder.T t95 = minFinder89.findMin();
        minFinder89.clear();
        minFinder89.clear();
        minFinder89.clear();
        boolean boolean99 = t11.equals((java.lang.Object) minFinder89);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertNotNull(tArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertNull(t90);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNull(t95);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        boolean boolean10 = t1.equals((java.lang.Object) (-4.6d));
        java.lang.Class<?> wildcardClass11 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        java.lang.Class<?> wildcardClass34 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder.T t26 = minFinder25.findMin();
        java.lang.Class<?> wildcardClass27 = t26.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass37 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        examples.MinFinder.T t23 = minFinder20.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-1));
        minFinder20.chval(t25, 100);
        examples.MinFinder.T t29 = new examples.MinFinder.T(7);
        minFinder20.chval(t29, (int) (byte) -1);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t35 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        minFinder32.chval(t38, 0);
        minFinder32.clear();
        examples.MinFinder.T t46 = minFinder32.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) ' ');
        minFinder32.add(t48);
        examples.MinFinder.T t52 = minFinder32.findMin();
        minFinder20.chval(t52, 1);
        minFinder0.chval(t52, (int) (short) -1);
        examples.MinFinder.T t58 = new examples.MinFinder.T(2);
        int int59 = t58.getVal();
        minFinder0.chval(t58, 4);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass41 = minFinder40.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-1));
        minFinder19.chval(t34, (int) (byte) 1);
        minFinder0.add(t34);
        examples.MinFinder.T t38 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNotNull(t38);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder43.add(t48);
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        boolean boolean53 = t48.equals((java.lang.Object) t52);
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        minFinder41.chval(t52, (int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        boolean boolean67 = t59.equals((java.lang.Object) 0.0f);
        java.lang.Class<?> wildcardClass68 = t59.getClass();
        boolean boolean69 = t52.equals((java.lang.Object) t59);
        java.lang.Class<?> wildcardClass70 = t59.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        minFinder72.clear();
        java.lang.Class<?> wildcardClass74 = minFinder72.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        int int17 = t11.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) (-8.7d));
        minFinder4.chval(t11, (-100));
        boolean boolean22 = t1.equals((java.lang.Object) t11);
        int int23 = t11.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T[] tArray62 = new examples.MinFinder.T[] { t25, t27, t34, t39, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList63 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList63, tArray62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList63);
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        minFinder65.add(t67);
        examples.MinFinder.T t69 = minFinder65.findMin();
        boolean boolean70 = t11.equals((java.lang.Object) t69);
        int int71 = t11.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertNotNull(tArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder.T t34 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(t34);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        boolean boolean11 = t9.equals((java.lang.Object) (-1));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        int int30 = t24.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        int int33 = t32.getVal();
        examples.MinFinder.T[] tArray34 = new examples.MinFinder.T[] { t13, t15, t22, t24, t32 };
        java.util.ArrayList<examples.MinFinder.T> tList35 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList35, tArray34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList35);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList35);
        boolean boolean45 = t9.equals((java.lang.Object) minFinder44);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        boolean boolean52 = t9.equals((java.lang.Object) minFinder46);
        minFinder0.add(t9);
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        minFinder54.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder54.add(t59);
        minFinder54.clear();
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) 'a');
        minFinder54.add(t64);
        minFinder54.clear();
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        boolean boolean83 = t81.equals((java.lang.Object) (-1));
        int int84 = t81.getVal();
        minFinder67.chval(t81, 0);
        minFinder54.chval(t81, (int) (short) -1);
        minFinder0.add(t81);
        examples.MinFinder.T t90 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 97 + "'", int33 == 97);
        org.junit.Assert.assertNotNull(tArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertNotNull(t90);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        minFinder32.clear();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        minFinder32.add(t46);
        int int51 = t46.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t15 = minFinder10.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        boolean boolean35 = t27.equals((java.lang.Object) (-8.7d));
        minFinder20.chval(t27, (-100));
        boolean boolean38 = t17.equals((java.lang.Object) t27);
        minFinder10.add(t27);
        int int40 = t27.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) int40);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        minFinder49.chval(t55, (int) ' ');
        minFinder42.add(t55);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        java.lang.Object obj71 = null;
        boolean boolean72 = t66.equals(obj71);
        minFinder42.add(t66);
        examples.MinFinder.T t74 = minFinder42.findMin();
        examples.MinFinder.T t75 = minFinder42.findMin();
        boolean boolean76 = t1.equals((java.lang.Object) t75);
        int int77 = t1.getVal();
        java.lang.Class<?> wildcardClass78 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-2));
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t8 = null;
        minFinder2.add(t8);
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean12 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t13 = null;
        minFinder2.chval(t13, (-2));
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t49 = minFinder44.findMin();
        minFinder44.clear();
        minFinder44.clear();
        examples.MinFinder.T t52 = minFinder44.findMin();
        examples.MinFinder.T t53 = null;
        minFinder44.chval(t53, (-9));
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        java.lang.Class<?> wildcardClass85 = tList81.getClass();
        boolean boolean86 = t57.equals((java.lang.Object) tList81);
        int int87 = t57.getVal();
        minFinder44.chval(t57, (-9));
        minFinder41.chval(t57, (-8));
        examples.MinFinder.T t92 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t94 = minFinder41.findMin();
        examples.MinFinder.T t95 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNull(t94);
        org.junit.Assert.assertNull(t95);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        examples.MinFinder.T t12 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass13 = t12.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T(3);
        minFinder5.chval(t8, (int) (short) -1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T(3);
        minFinder11.chval(t14, (int) (short) -1);
        minFinder5.add(t14);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-9));
        minFinder5.add(t19);
        minFinder5.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t24 = new examples.MinFinder.T(100);
        minFinder22.add(t24);
        minFinder5.chval(t24, (int) '#');
        minFinder5.clear();
        boolean boolean29 = t1.equals((java.lang.Object) minFinder5);
        minFinder5.clear();
        examples.MinFinder.T t31 = minFinder5.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t33, t35, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList55);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList55);
        examples.MinFinder.T t69 = minFinder68.findMin();
        int int70 = t69.getVal();
        minFinder5.add(t69);
        java.lang.Class<?> wildcardClass72 = minFinder5.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        examples.MinFinder.T t1 = new examples.MinFinder.T(1);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder4.chval(t19, (-5));
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        minFinder23.add(t32);
        minFinder23.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) (short) 0);
        minFinder23.chval(t38, (int) '4');
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        int int43 = t42.getVal();
        minFinder23.chval(t42, 100);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        boolean boolean49 = t47.equals((java.lang.Object) (-1));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t51, t53, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList73);
        boolean boolean81 = t47.equals((java.lang.Object) minFinder80);
        boolean boolean82 = t42.equals((java.lang.Object) t47);
        minFinder4.add(t47);
        boolean boolean84 = t1.equals((java.lang.Object) minFinder4);
        minFinder4.clear();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        minFinder10.add(t19);
        minFinder10.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) (short) 0);
        minFinder10.chval(t25, (int) '4');
        boolean boolean28 = t5.equals((java.lang.Object) minFinder10);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        minFinder10.add(t30);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-9));
        minFinder35.add(t49);
        minFinder35.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t54 = new examples.MinFinder.T(100);
        minFinder52.add(t54);
        minFinder35.chval(t54, (int) '#');
        int int58 = t54.getVal();
        minFinder10.add(t54);
        minFinder10.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 100 + "'", int58 == 100);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        int int81 = t80.getVal();
        minFinder61.chval(t80, 100);
        boolean boolean84 = t60.equals((java.lang.Object) 100);
        int int85 = t60.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        boolean boolean69 = t17.equals((java.lang.Object) minFinder62);
        examples.MinFinder.T t70 = minFinder62.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(t70);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        minFinder52.add(t57);
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder52.add(t61);
        examples.MinFinder.T t63 = minFinder52.findMin();
        java.lang.Object obj64 = null;
        boolean boolean65 = t63.equals(obj64);
        minFinder29.chval(t63, (-6));
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        java.lang.Object obj74 = null;
        boolean boolean75 = t69.equals(obj74);
        minFinder29.add(t69);
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-9));
        int int35 = t34.getVal();
        minFinder29.add(t34);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder43.chval(t46, (int) (short) -1);
        minFinder37.add(t46);
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        int int52 = t51.getVal();
        minFinder37.add(t51);
        minFinder37.clear();
        boolean boolean55 = t34.equals((java.lang.Object) minFinder37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-9) + "'", int35 == (-9));
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t19 = minFinder14.findMin();
        examples.MinFinder.T t20 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        int int46 = t40.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t29, t31, t38, t40, t48 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList51);
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        int int90 = t89.getVal();
        minFinder60.add(t89);
        minFinder14.add(t89);
        minFinder0.add(t89);
        int int94 = t89.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-3) + "'", int94 == (-3));
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        boolean boolean11 = t1.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t1.equals((java.lang.Object) minFinder12);
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) -1);
        minFinder12.add(t27);
        java.lang.Class<?> wildcardClass29 = minFinder12.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        boolean boolean56 = t54.equals((java.lang.Object) (-1));
        minFinder52.add(t54);
        minFinder13.add(t54);
        java.lang.Class<?> wildcardClass59 = minFinder13.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        minFinder13.add(t27);
        int int32 = t27.getVal();
        minFinder0.add(t27);
        minFinder0.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t36, t38, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList58);
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t69 = minFinder67.findMin();
        int int70 = t69.getVal();
        minFinder0.chval(t69, (-1));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        examples.MinFinder.T t22 = minFinder11.findMin();
        java.lang.Object obj23 = null;
        boolean boolean24 = t22.equals(obj23);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        minFinder28.chval(t30, (int) ' ');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-9));
        boolean boolean41 = t39.equals((java.lang.Object) 6);
        minFinder28.chval(t39, 97);
        boolean boolean44 = t26.equals((java.lang.Object) t39);
        int int45 = t26.getVal();
        boolean boolean46 = t22.equals((java.lang.Object) t26);
        minFinder0.add(t22);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList71);
        examples.MinFinder.T t81 = minFinder80.findMin();
        examples.MinFinder.T t82 = minFinder80.findMin();
        java.lang.Class<?> wildcardClass83 = t82.getClass();
        boolean boolean84 = t22.equals((java.lang.Object) t82);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        minFinder35.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) 'a');
        int int41 = t40.getVal();
        minFinder35.add(t40);
        minFinder29.chval(t40, 5);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        minFinder45.add(t59);
        minFinder29.chval(t59, (-10));
        boolean boolean63 = t28.equals((java.lang.Object) t59);
        minFinder23.chval(t59, 7);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T(3);
        minFinder72.chval(t75, (int) (short) -1);
        minFinder66.add(t75);
        minFinder66.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) (short) 0);
        minFinder66.chval(t81, (int) '4');
        boolean boolean84 = t59.equals((java.lang.Object) minFinder66);
        boolean boolean86 = t59.equals((java.lang.Object) true);
        minFinder0.chval(t59, 52);
        java.lang.Class<?> wildcardClass89 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 97 + "'", int41 == 97);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 1);
        int int18 = t17.getVal();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        boolean boolean21 = t17.equals((java.lang.Object) t20);
        minFinder0.chval(t17, 100);
        int int24 = t17.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t47 = minFinder45.findMin();
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t51 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder.T t53 = minFinder48.findMin();
        examples.MinFinder.T t54 = minFinder48.findMin();
        examples.MinFinder.T t55 = minFinder48.findMin();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        minFinder56.add(t61);
        minFinder56.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        minFinder56.add(t66);
        examples.MinFinder.T t68 = minFinder56.findMin();
        minFinder48.add(t68);
        boolean boolean70 = t47.equals((java.lang.Object) t68);
        java.lang.Class<?> wildcardClass71 = t68.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNotNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(t68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-9));
        boolean boolean21 = t19.equals((java.lang.Object) 6);
        int int22 = t19.getVal();
        minFinder0.add(t19);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-9) + "'", int22 == (-9));
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        java.lang.Class<?> wildcardClass45 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 0);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t18 = minFinder4.findMin();
        examples.MinFinder.T t19 = minFinder4.findMin();
        examples.MinFinder.T t20 = minFinder4.findMin();
        examples.MinFinder.T t21 = minFinder4.findMin();
        boolean boolean22 = t1.equals((java.lang.Object) t21);
        int int23 = t21.getVal();
        java.lang.Class<?> wildcardClass24 = t21.getClass();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNotNull(t21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        boolean boolean42 = t40.equals((java.lang.Object) (-1));
        int int43 = t40.getVal();
        minFinder26.chval(t40, 0);
        minFinder22.add(t40);
        minFinder2.chval(t40, 8);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass31 = minFinder30.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder19.add(t33);
        int int38 = t33.getVal();
        minFinder0.add(t33);
        int int40 = t33.getVal();
        java.lang.Class<?> wildcardClass41 = t33.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-9));
        minFinder12.add(t26);
        minFinder12.clear();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t31 = new examples.MinFinder.T(100);
        minFinder29.add(t31);
        minFinder12.chval(t31, (int) '#');
        int int35 = t31.getVal();
        minFinder0.add(t31);
        int int37 = t31.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 100 + "'", int35 == 100);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 100 + "'", int37 == 100);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        minFinder6.add(t15);
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        minFinder6.add(t20);
        minFinder0.add(t20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t10 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        int int19 = t13.getVal();
        minFinder7.chval(t13, (int) ' ');
        minFinder0.add(t13);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t24 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass25 = t24.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNotNull(t23);
        org.junit.Assert.assertNotNull(t24);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        examples.MinFinder.T t1 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder2.chval(t13, 5);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        examples.MinFinder.T t32 = new examples.MinFinder.T((-9));
        minFinder18.add(t32);
        minFinder2.chval(t32, (-10));
        boolean boolean36 = t1.equals((java.lang.Object) t32);
        examples.MinFinder.T t38 = new examples.MinFinder.T(8);
        boolean boolean39 = t32.equals((java.lang.Object) 8);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder40.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        minFinder47.add(t56);
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        minFinder47.add(t61);
        examples.MinFinder.T t64 = minFinder47.findMin();
        minFinder40.chval(t64, (-1));
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t70 = minFinder67.findMin();
        minFinder67.clear();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        minFinder67.chval(t73, 0);
        examples.MinFinder minFinder80 = new examples.MinFinder();
        examples.MinFinder.T t82 = new examples.MinFinder.T((-9));
        int int83 = t82.getVal();
        minFinder80.chval(t82, (-100));
        minFinder67.chval(t82, 0);
        int int88 = t82.getVal();
        int int89 = t82.getVal();
        minFinder40.chval(t82, (-5));
        boolean boolean92 = t32.equals((java.lang.Object) t82);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-9) + "'", int83 == (-9));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-9) + "'", int88 == (-9));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-9) + "'", int89 == (-9));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = minFinder27.findMin();
        examples.MinFinder.T t33 = minFinder27.findMin();
        examples.MinFinder.T t34 = minFinder27.findMin();
        java.lang.Class<?> wildcardClass35 = minFinder27.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        minFinder34.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) (short) 0);
        minFinder34.chval(t49, (int) '4');
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) (short) 0);
        int int54 = t53.getVal();
        minFinder34.chval(t53, 100);
        examples.MinFinder.T t57 = minFinder34.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(0);
        java.lang.Object obj60 = null;
        boolean boolean61 = t59.equals(obj60);
        minFinder34.chval(t59, (int) '#');
        minFinder0.chval(t59, (-8));
        examples.MinFinder.T t66 = minFinder0.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        boolean boolean70 = t68.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        int int83 = t78.getVal();
        int int84 = t78.getVal();
        boolean boolean86 = t78.equals((java.lang.Object) (-8.7d));
        minFinder71.chval(t78, (-100));
        boolean boolean89 = t68.equals((java.lang.Object) t78);
        minFinder0.chval(t78, (int) (short) -1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        minFinder7.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        int int13 = t12.getVal();
        minFinder7.add(t12);
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder7.add(t16);
        examples.MinFinder.T t18 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        boolean boolean23 = t21.equals((java.lang.Object) ' ');
        minFinder7.add(t21);
        minFinder0.chval(t21, (int) (byte) 10);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) 'a');
        int int52 = t51.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t32, t34, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList54);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList54);
        examples.MinFinder.T t64 = null;
        minFinder63.chval(t64, (-1));
        minFinder63.clear();
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        examples.MinFinder minFinder74 = new examples.MinFinder();
        examples.MinFinder.T t75 = minFinder74.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(3);
        minFinder74.chval(t77, (int) (short) -1);
        minFinder68.add(t77);
        minFinder63.add(t77);
        examples.MinFinder.T t83 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        minFinder84.clear();
        examples.MinFinder.T t87 = minFinder84.findMin();
        minFinder84.clear();
        minFinder84.clear();
        boolean boolean90 = t83.equals((java.lang.Object) minFinder84);
        int int91 = t83.getVal();
        minFinder63.add(t83);
        boolean boolean93 = t28.equals((java.lang.Object) minFinder63);
        examples.MinFinder.T t95 = new examples.MinFinder.T(6);
        int int96 = t95.getVal();
        minFinder63.add(t95);
        boolean boolean98 = t21.equals((java.lang.Object) minFinder63);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 97 + "'", int52 == 97);
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 10 + "'", int91 == 10);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 6 + "'", int96 == 6);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        minFinder49.add(t54);
        examples.MinFinder.T t57 = minFinder49.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        boolean boolean66 = t59.equals((java.lang.Object) 100.0d);
        minFinder49.add(t59);
        int int68 = t59.getVal();
        boolean boolean69 = t46.equals((java.lang.Object) t59);
        int int70 = t46.getVal();
        int int71 = t46.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(t57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 100 + "'", int70 == 100);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 100 + "'", int71 == 100);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(2);
        minFinder0.add(t85);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass88 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        boolean boolean14 = t7.equals((java.lang.Object) 0.0d);
        boolean boolean16 = t7.equals((java.lang.Object) (-4.6d));
        minFinder0.chval(t7, 7);
        examples.MinFinder.T t19 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(t19);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        minFinder32.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) (short) 0);
        minFinder32.chval(t47, (int) '4');
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        minFinder50.clear();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) (short) 0);
        minFinder50.chval(t65, (int) '4');
        minFinder32.add(t65);
        minFinder27.add(t65);
        int int70 = t65.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        int int94 = t90.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-9) + "'", int94 == (-9));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        minFinder0.clear();
        examples.MinFinder.T t21 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(t21);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder0.add(t9);
        examples.MinFinder.T t11 = minFinder0.findMin();
        java.lang.Object obj12 = null;
        boolean boolean13 = t11.equals(obj12);
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        minFinder17.chval(t19, (int) ' ');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        boolean boolean30 = t28.equals((java.lang.Object) 6);
        minFinder17.chval(t28, 97);
        boolean boolean33 = t15.equals((java.lang.Object) t28);
        int int34 = t15.getVal();
        boolean boolean35 = t11.equals((java.lang.Object) t15);
        int int36 = t15.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        examples.MinFinder.T t1 = new examples.MinFinder.T(1);
        examples.MinFinder.T t3 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        boolean boolean17 = t3.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder4.chval(t19, (-5));
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        minFinder23.add(t32);
        minFinder23.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) (short) 0);
        minFinder23.chval(t38, (int) '4');
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        int int43 = t42.getVal();
        minFinder23.chval(t42, 100);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        boolean boolean49 = t47.equals((java.lang.Object) (-1));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        int int68 = t62.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t51, t53, t60, t62, t70 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList73);
        boolean boolean81 = t47.equals((java.lang.Object) minFinder80);
        boolean boolean82 = t42.equals((java.lang.Object) t47);
        minFinder4.add(t47);
        boolean boolean84 = t1.equals((java.lang.Object) minFinder4);
        int int85 = t1.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        int int33 = t17.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList57);
        examples.MinFinder.T t71 = minFinder70.findMin();
        int int72 = t71.getVal();
        boolean boolean73 = t17.equals((java.lang.Object) t71);
        int int74 = t17.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 100 + "'", int33 == 100);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 100 + "'", int74 == 100);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t12, t14, t21, t26, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        minFinder52.add(t54);
        examples.MinFinder.T t56 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        minFinder58.add(t63);
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder58.add(t67);
        examples.MinFinder.T t69 = minFinder58.findMin();
        minFinder52.add(t69);
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        minFinder73.add(t82);
        boolean boolean86 = t72.equals((java.lang.Object) minFinder73);
        minFinder73.clear();
        boolean boolean88 = t69.equals((java.lang.Object) minFinder73);
        minFinder0.chval(t69, 35);
        examples.MinFinder.T t91 = minFinder0.findMin();
        examples.MinFinder.T t92 = minFinder0.findMin();
        examples.MinFinder.T t93 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t56);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(t91);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNull(t93);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        int int48 = t42.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t12, t14, t21, t26, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        minFinder52.add(t54);
        examples.MinFinder.T t56 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        minFinder58.add(t63);
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder58.add(t67);
        examples.MinFinder.T t69 = minFinder58.findMin();
        minFinder52.add(t69);
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        minFinder73.add(t82);
        boolean boolean86 = t72.equals((java.lang.Object) minFinder73);
        minFinder73.clear();
        boolean boolean88 = t69.equals((java.lang.Object) minFinder73);
        minFinder0.chval(t69, 35);
        examples.MinFinder.T t91 = minFinder0.findMin();
        examples.MinFinder.T t92 = minFinder0.findMin();
        examples.MinFinder.T t93 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass94 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t56);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNull(t91);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertNull(t93);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        minFinder38.clear();
        minFinder38.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        minFinder38.add(t43);
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder38.add(t47);
        minFinder38.clear();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder50.clear();
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t69 = new examples.MinFinder.T(100);
        minFinder67.add(t69);
        minFinder50.chval(t69, (int) '#');
        int int73 = t69.getVal();
        minFinder38.add(t69);
        minFinder37.add(t69);
        minFinder37.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 100 + "'", int73 == 100);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-1));
        minFinder13.chval(t18, 100);
        examples.MinFinder.T t22 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-9));
        int int39 = t38.getVal();
        minFinder36.chval(t38, (-100));
        minFinder23.chval(t38, 0);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        java.lang.Object obj50 = null;
        boolean boolean51 = t45.equals(obj50);
        minFinder23.add(t45);
        boolean boolean53 = t22.equals((java.lang.Object) t45);
        minFinder13.chval(t22, (int) ' ');
        minFinder0.add(t22);
        int int57 = t22.getVal();
        java.lang.Class<?> wildcardClass58 = t22.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-9) + "'", int39 == (-9));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        minFinder17.clear();
        minFinder17.clear();
        java.lang.Class<?> wildcardClass34 = minFinder17.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) ' ');
        int int4 = t1.getVal();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        int int13 = t8.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T[] tArray43 = new examples.MinFinder.T[] { t6, t8, t15, t20, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList44 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList44, tArray43);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList44);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((int) 'a');
        int int62 = t61.getVal();
        minFinder56.add(t61);
        minFinder50.chval(t61, 5);
        minFinder49.add(t61);
        java.lang.Class<?> wildcardClass67 = minFinder49.getClass();
        boolean boolean68 = t1.equals((java.lang.Object) wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNotNull(tArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 97 + "'", int62 == 97);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass50 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 100);
        minFinder42.add(t45);
        minFinder0.chval(t45, 6);
        examples.MinFinder.T t49 = minFinder0.findMin();
        examples.MinFinder.T t50 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t50);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        minFinder47.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        int int53 = t52.getVal();
        minFinder47.add(t52);
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder47.add(t56);
        examples.MinFinder.T t58 = minFinder47.findMin();
        minFinder41.add(t58);
        examples.MinFinder.T t60 = minFinder41.findMin();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) (short) 0);
        int int81 = t80.getVal();
        minFinder61.chval(t80, 100);
        boolean boolean84 = t60.equals((java.lang.Object) 100);
        java.lang.Class<?> wildcardClass85 = t60.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 97 + "'", int53 == 97);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        minFinder30.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        minFinder30.add(t35);
        examples.MinFinder.T t39 = new examples.MinFinder.T(1);
        boolean boolean40 = t35.equals((java.lang.Object) t39);
        minFinder28.add(t35);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        examples.MinFinder.T t25 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(t25);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        int int30 = t24.getVal();
        int int31 = t24.getVal();
        int int32 = t24.getVal();
        java.lang.Class<?> wildcardClass33 = t24.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-9) + "'", int30 == (-9));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-9) + "'", int31 == (-9));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-9) + "'", int32 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 1);
        int int18 = t17.getVal();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        boolean boolean21 = t17.equals((java.lang.Object) t20);
        minFinder0.chval(t17, 100);
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T[] tArray62 = new examples.MinFinder.T[] { t25, t27, t34, t39, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList63 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList63, tArray62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList63);
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        minFinder65.add(t67);
        java.lang.Object obj69 = null;
        boolean boolean70 = t67.equals(obj69);
        minFinder0.add(t67);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertNotNull(tArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t45 = minFinder43.findMin();
        examples.MinFinder.T t46 = minFinder43.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(t46);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        boolean boolean12 = t9.equals((java.lang.Object) 1);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        int int26 = t22.getVal();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        boolean boolean43 = t41.equals((java.lang.Object) (-1));
        int int44 = t41.getVal();
        minFinder27.chval(t41, 0);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        minFinder53.clear();
        minFinder53.clear();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        int int59 = t58.getVal();
        minFinder53.add(t58);
        minFinder47.chval(t58, 5);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t66 = new examples.MinFinder.T(3);
        minFinder63.chval(t66, (int) (short) -1);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder69.chval(t72, (int) (short) -1);
        minFinder63.add(t72);
        examples.MinFinder.T t77 = new examples.MinFinder.T((-9));
        minFinder63.add(t77);
        minFinder47.chval(t77, (-10));
        minFinder27.chval(t77, (-1));
        boolean boolean83 = t22.equals((java.lang.Object) minFinder27);
        boolean boolean84 = t9.equals((java.lang.Object) t22);
        examples.MinFinder minFinder85 = new examples.MinFinder();
        examples.MinFinder.T t87 = new examples.MinFinder.T(0);
        minFinder85.add(t87);
        examples.MinFinder.T t89 = minFinder85.findMin();
        boolean boolean90 = t22.equals((java.lang.Object) t89);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 97 + "'", int59 == 97);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        minFinder0.clear();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        minFinder19.clear();
        examples.MinFinder.T t33 = minFinder19.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        boolean boolean37 = t35.equals((java.lang.Object) ' ');
        minFinder19.add(t35);
        examples.MinFinder.T t39 = minFinder19.findMin();
        java.lang.Object obj40 = new java.lang.Object();
        boolean boolean41 = t39.equals(obj40);
        minFinder0.add(t39);
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        minFinder43.chval(t49, 0);
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 0);
        int int58 = t57.getVal();
        minFinder43.chval(t57, (-9));
        minFinder43.clear();
        boolean boolean62 = t39.equals((java.lang.Object) minFinder43);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(t39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList60);
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder0.add(t66);
        int int68 = t66.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(t35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        minFinder0.chval(t24, (-5));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        boolean boolean43 = t41.equals((java.lang.Object) (-1));
        int int44 = t41.getVal();
        minFinder27.chval(t41, 0);
        minFinder27.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        int int80 = t79.getVal();
        int int81 = t79.getVal();
        int int82 = t79.getVal();
        int int83 = t79.getVal();
        int int84 = t79.getVal();
        int int85 = t79.getVal();
        examples.MinFinder.T[] tArray86 = new examples.MinFinder.T[] { t49, t51, t58, t63, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList87 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList87, tArray86);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList87);
        examples.MinFinder.T t91 = new examples.MinFinder.T((-3));
        minFinder89.add(t91);
        minFinder27.chval(t91, 1);
        boolean boolean95 = t24.equals((java.lang.Object) t91);
        int int96 = t91.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertNotNull(tArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-3) + "'", int96 == (-3));
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(0);
        minFinder0.add(t2);
        java.lang.Class<?> wildcardClass4 = t2.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        boolean boolean3 = t1.equals((java.lang.Object) 6);
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        minFinder4.chval(t19, (int) '4');
        boolean boolean22 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t23 = minFinder4.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass24 = t23.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t23);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T[] tArray66 = new examples.MinFinder.T[] { t29, t31, t38, t43, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList67 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList67, tArray66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList67);
        minFinder69.clear();
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        minFinder71.clear();
        minFinder71.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        minFinder71.add(t76);
        examples.MinFinder.T t80 = new examples.MinFinder.T(1);
        boolean boolean81 = t76.equals((java.lang.Object) t80);
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        minFinder69.chval(t80, (int) 'a');
        examples.MinFinder.T t87 = new examples.MinFinder.T((-3));
        int int88 = t87.getVal();
        int int89 = t87.getVal();
        int int90 = t87.getVal();
        int int91 = t87.getVal();
        int int92 = t87.getVal();
        int int93 = t87.getVal();
        boolean boolean95 = t87.equals((java.lang.Object) 0.0f);
        java.lang.Class<?> wildcardClass96 = t87.getClass();
        boolean boolean97 = t80.equals((java.lang.Object) t87);
        minFinder26.add(t80);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertNotNull(tArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-9));
        int int35 = t34.getVal();
        minFinder29.add(t34);
        minFinder29.clear();
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-9) + "'", int35 == (-9));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-1));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        boolean boolean45 = t1.equals((java.lang.Object) t42);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        boolean boolean59 = t1.equals((java.lang.Object) minFinder46);
        int int60 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t16 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder68.chval(t71, (int) (short) -1);
        boolean boolean74 = t31.equals((java.lang.Object) minFinder68);
        examples.MinFinder.T t75 = minFinder68.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        minFinder68.add(t77);
        minFinder29.add(t77);
        int int84 = t77.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        boolean boolean11 = t1.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t1.equals((java.lang.Object) minFinder12);
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) (short) -1);
        minFinder12.add(t27);
        int int29 = t27.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList37);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder.T t75 = minFinder74.findMin();
        int int76 = t75.getVal();
        minFinder46.add(t75);
        minFinder0.add(t75);
        java.lang.Class<?> wildcardClass79 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder56.chval(t62, 0);
        minFinder56.clear();
        minFinder56.clear();
        boolean boolean71 = t53.equals((java.lang.Object) minFinder56);
        int int72 = t53.getVal();
        minFinder41.chval(t53, (-5));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t24 = minFinder21.findMin();
        minFinder21.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        minFinder21.chval(t27, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        int int68 = t67.getVal();
        int int69 = t67.getVal();
        int int70 = t67.getVal();
        int int71 = t67.getVal();
        int int72 = t67.getVal();
        int int73 = t67.getVal();
        examples.MinFinder.T[] tArray74 = new examples.MinFinder.T[] { t37, t39, t46, t51, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList75 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList75, tArray74);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList75);
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        minFinder77.add(t79);
        examples.MinFinder.T t81 = minFinder77.findMin();
        int int82 = t81.getVal();
        boolean boolean83 = t27.equals((java.lang.Object) t81);
        minFinder0.add(t27);
        examples.MinFinder.T t86 = new examples.MinFinder.T(1);
        boolean boolean87 = t27.equals((java.lang.Object) t86);
        java.lang.Class<?> wildcardClass88 = t27.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(tArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        minFinder29.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        minFinder52.add(t57);
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder52.add(t61);
        examples.MinFinder.T t63 = minFinder52.findMin();
        java.lang.Object obj64 = null;
        boolean boolean65 = t63.equals(obj64);
        minFinder29.chval(t63, (-6));
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        java.lang.Object obj74 = null;
        boolean boolean75 = t69.equals(obj74);
        minFinder29.add(t69);
        int int77 = t69.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        int int82 = t78.getVal();
        examples.MinFinder.T t84 = new examples.MinFinder.T((-3));
        int int85 = t84.getVal();
        int int86 = t84.getVal();
        int int87 = t84.getVal();
        int int88 = t84.getVal();
        int int89 = t84.getVal();
        int int90 = t84.getVal();
        boolean boolean91 = t78.equals((java.lang.Object) t84);
        int int92 = t78.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 97 + "'", int92 == 97);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        int int33 = t29.getVal();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        boolean boolean47 = t29.equals((java.lang.Object) 0);
        int int48 = t29.getVal();
        int int49 = t29.getVal();
        int int50 = t29.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder0.add(t68);
        examples.MinFinder.T t74 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t15 = minFinder0.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        boolean boolean42 = t34.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t46 = minFinder43.findMin();
        minFinder43.clear();
        examples.MinFinder.T t48 = minFinder43.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        boolean boolean52 = t50.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        boolean boolean68 = t60.equals((java.lang.Object) (-8.7d));
        minFinder53.chval(t60, (-100));
        boolean boolean71 = t50.equals((java.lang.Object) t60);
        minFinder43.add(t60);
        int int73 = t60.getVal();
        boolean boolean74 = t34.equals((java.lang.Object) int73);
        boolean boolean75 = t17.equals((java.lang.Object) boolean74);
        java.lang.Class<?> wildcardClass76 = t17.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        examples.MinFinder.T t95 = new examples.MinFinder.T(100);
        minFinder0.add(t95);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder minFinder7 = new examples.MinFinder();
        examples.MinFinder.T t8 = minFinder7.findMin();
        minFinder7.clear();
        minFinder7.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        int int13 = t12.getVal();
        minFinder7.add(t12);
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder7.add(t16);
        examples.MinFinder.T t18 = minFinder7.findMin();
        minFinder7.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        boolean boolean23 = t21.equals((java.lang.Object) ' ');
        minFinder7.add(t21);
        minFinder0.chval(t21, (int) (byte) 10);
        examples.MinFinder.T t27 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 97 + "'", int13 == 97);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(t27);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        int int66 = t63.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 100 + "'", int66 == 100);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        minFinder0.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t13, t15, t22, t27, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        minFinder53.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder57.chval(t60, (int) (short) -1);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        minFinder57.chval(t68, 5);
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T(3);
        minFinder73.chval(t76, (int) (short) -1);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t82 = new examples.MinFinder.T(3);
        minFinder79.chval(t82, (int) (short) -1);
        minFinder73.add(t82);
        examples.MinFinder.T t87 = new examples.MinFinder.T((-9));
        minFinder73.add(t87);
        minFinder57.chval(t87, (-10));
        boolean boolean91 = t56.equals((java.lang.Object) t87);
        minFinder53.chval(t87, 1);
        minFinder0.add(t87);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        minFinder10.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        minFinder22.add(t27);
        minFinder16.chval(t27, 5);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        minFinder32.add(t41);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-9));
        minFinder32.add(t46);
        minFinder16.chval(t46, (-10));
        boolean boolean50 = t15.equals((java.lang.Object) t46);
        minFinder10.chval(t46, 7);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        minFinder53.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) (short) 0);
        minFinder53.chval(t68, (int) '4');
        boolean boolean71 = t46.equals((java.lang.Object) minFinder53);
        boolean boolean73 = t46.equals((java.lang.Object) true);
        minFinder2.chval(t46, 4);
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t15, t17, t24, t29, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        minFinder55.clear();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        minFinder57.add(t62);
        examples.MinFinder.T t66 = new examples.MinFinder.T(1);
        boolean boolean67 = t62.equals((java.lang.Object) t66);
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        minFinder55.chval(t66, (int) 'a');
        examples.MinFinder.T t72 = minFinder55.findMin();
        examples.MinFinder.T t73 = minFinder55.findMin();
        boolean boolean74 = t9.equals((java.lang.Object) t73);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t4 = null;
        minFinder0.add(t4);
        minFinder0.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        int int15 = t10.getVal();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t8, t10, t17, t22, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder48.add(t50);
        examples.MinFinder.T t52 = minFinder48.findMin();
        minFinder48.clear();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        minFinder54.clear();
        minFinder54.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        minFinder54.add(t59);
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder54.add(t63);
        examples.MinFinder.T t65 = minFinder54.findMin();
        minFinder48.add(t65);
        int int67 = t65.getVal();
        minFinder0.chval(t65, (int) ' ');
        examples.MinFinder.T t70 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNull(t70);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        minFinder17.clear();
        examples.MinFinder.T t33 = minFinder17.findMin();
        java.lang.Class<?> wildcardClass34 = minFinder17.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        int int31 = t1.getVal();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        int int40 = t37.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) t37);
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        examples.MinFinder.T[] tArray65 = new examples.MinFinder.T[] { t44, t46, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList66 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList66, tArray65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList66);
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        minFinder72.add(t74);
        examples.MinFinder.T t76 = minFinder72.findMin();
        boolean boolean77 = t37.equals((java.lang.Object) minFinder72);
        examples.MinFinder.T t78 = minFinder72.findMin();
        examples.MinFinder.T t79 = null;
        // The following exception was thrown during execution in test generation
        try {
            minFinder72.add(t79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(tArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(t78);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        int int21 = t20.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T[] tArray60 = new examples.MinFinder.T[] { t23, t25, t32, t37, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList61 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList61, tArray60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList61);
        minFinder63.clear();
        boolean boolean65 = t20.equals((java.lang.Object) minFinder63);
        java.lang.Class<?> wildcardClass66 = t20.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertNotNull(tArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t7 = null;
        minFinder0.chval(t7, 0);
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t11.equals((java.lang.Object) minFinder12);
        examples.MinFinder.T t26 = minFinder12.findMin();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        boolean boolean41 = t26.equals((java.lang.Object) minFinder27);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        minFinder42.chval(t48, 0);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        minFinder42.add(t56);
        boolean boolean61 = t26.equals((java.lang.Object) minFinder42);
        minFinder0.add(t26);
        int int63 = t26.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = minFinder43.findMin();
        minFinder43.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t48);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-1));
        minFinder19.chval(t34, (int) (byte) 1);
        minFinder0.add(t34);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass39 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        boolean boolean9 = t5.equals((java.lang.Object) 5L);
        java.lang.Class<?> wildcardClass10 = t5.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-9));
        int int9 = t8.getVal();
        minFinder6.chval(t8, (-100));
        int int12 = t8.getVal();
        minFinder0.chval(t8, 9);
        minFinder0.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T(100);
        minFinder0.add(t17);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-9) + "'", int9 == (-9));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-9) + "'", int12 == (-9));
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 0);
        int int38 = t37.getVal();
        minFinder18.chval(t37, 100);
        examples.MinFinder.T t41 = minFinder18.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(0);
        java.lang.Object obj44 = null;
        boolean boolean45 = t43.equals(obj44);
        minFinder18.chval(t43, (int) '#');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-6));
        minFinder18.chval(t49, (int) (short) 1);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder52.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) (short) 0);
        minFinder52.chval(t67, (int) '4');
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) (short) 0);
        int int72 = t71.getVal();
        minFinder52.chval(t71, 100);
        examples.MinFinder.T t75 = minFinder52.findMin();
        examples.MinFinder.T t77 = new examples.MinFinder.T(0);
        java.lang.Object obj78 = null;
        boolean boolean79 = t77.equals(obj78);
        minFinder52.chval(t77, (int) '#');
        minFinder18.chval(t77, (-8));
        minFinder0.chval(t77, (int) 'a');
        boolean boolean87 = t77.equals((java.lang.Object) 9L);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t9 = new examples.MinFinder.T(1);
        boolean boolean10 = t5.equals((java.lang.Object) t9);
        int int11 = t5.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t34 = minFinder32.findMin();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder32.add(t44);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t54 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t57 = minFinder49.findMin();
        examples.MinFinder.T t58 = null;
        minFinder49.chval(t58, (-9));
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        int int78 = t75.getVal();
        int int79 = t75.getVal();
        int int80 = t75.getVal();
        int int81 = t75.getVal();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        int int84 = t83.getVal();
        examples.MinFinder.T[] tArray85 = new examples.MinFinder.T[] { t64, t66, t73, t75, t83 };
        java.util.ArrayList<examples.MinFinder.T> tList86 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList86, tArray85);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList86);
        examples.MinFinder minFinder89 = new examples.MinFinder(tList86);
        java.lang.Class<?> wildcardClass90 = tList86.getClass();
        boolean boolean91 = t62.equals((java.lang.Object) tList86);
        int int92 = t62.getVal();
        minFinder49.chval(t62, (-9));
        minFinder32.add(t62);
        minFinder32.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertNotNull(tArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(wildcardClass90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        boolean boolean14 = t12.equals((java.lang.Object) (-1));
        minFinder0.chval(t12, (-2));
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-9));
        boolean boolean21 = t19.equals((java.lang.Object) 6);
        int int22 = t19.getVal();
        minFinder0.add(t19);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-1));
        minFinder24.chval(t29, 100);
        examples.MinFinder.T t33 = new examples.MinFinder.T(0);
        java.lang.Object obj34 = null;
        boolean boolean35 = t33.equals(obj34);
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        int int54 = t48.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t37, t39, t46, t48, t56 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList59);
        minFinder68.clear();
        boolean boolean70 = t33.equals((java.lang.Object) minFinder68);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t73 = new examples.MinFinder.T((-9));
        int int74 = t73.getVal();
        minFinder71.chval(t73, (-100));
        int int77 = t73.getVal();
        minFinder68.chval(t73, (-4));
        examples.MinFinder minFinder80 = new examples.MinFinder();
        examples.MinFinder.T t81 = minFinder80.findMin();
        minFinder80.clear();
        minFinder80.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) 'a');
        int int86 = t85.getVal();
        minFinder80.add(t85);
        minFinder80.clear();
        examples.MinFinder.T t90 = new examples.MinFinder.T((int) 'a');
        minFinder80.add(t90);
        examples.MinFinder.T t93 = new examples.MinFinder.T((-3));
        minFinder80.add(t93);
        minFinder68.add(t93);
        minFinder24.add(t93);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t93, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-9) + "'", int22 == (-9));
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-9) + "'", int74 == (-9));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-9) + "'", int77 == (-9));
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 97 + "'", int86 == 97);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        int int34 = t28.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) 'a');
        int int37 = t36.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t17, t19, t26, t28, t36 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t44 = minFinder43.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 100);
        minFinder43.add(t46);
        minFinder2.add(t46);
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T((-1));
        minFinder49.chval(t54, 100);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        minFinder49.add(t58);
        minFinder2.add(t58);
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t44);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        minFinder22.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-1));
        minFinder22.chval(t37, (int) (byte) 1);
        minFinder0.chval(t37, (-7));
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) '#');
        int int44 = t43.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        java.lang.Class<?> wildcardClass74 = tList70.getClass();
        boolean boolean75 = t46.equals((java.lang.Object) tList70);
        boolean boolean76 = t43.equals((java.lang.Object) t46);
        minFinder0.chval(t43, 2);
        examples.MinFinder.T t79 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 35 + "'", int44 == 35);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(t79);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        boolean boolean69 = t17.equals((java.lang.Object) minFinder62);
        examples.MinFinder.T t71 = new examples.MinFinder.T(9);
        minFinder62.chval(t71, (int) '#');
        java.lang.Class<?> wildcardClass74 = t71.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList39);
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t58 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        minFinder55.chval(t61, 0);
        minFinder55.clear();
        minFinder55.clear();
        boolean boolean70 = t52.equals((java.lang.Object) minFinder55);
        examples.MinFinder.T t71 = minFinder55.findMin();
        boolean boolean72 = t48.equals((java.lang.Object) t71);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-9));
        int int9 = t8.getVal();
        minFinder6.chval(t8, (-100));
        int int12 = t8.getVal();
        minFinder0.chval(t8, 9);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        minFinder15.clear();
        minFinder15.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        minFinder15.add(t20);
        examples.MinFinder.T t24 = new examples.MinFinder.T(1);
        boolean boolean25 = t20.equals((java.lang.Object) t24);
        int int26 = t24.getVal();
        boolean boolean28 = t24.equals((java.lang.Object) 3L);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        int int37 = t32.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        int int46 = t41.getVal();
        int int47 = t41.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t30, t32, t39, t41, t49 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList52);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList52);
        examples.MinFinder.T t67 = minFinder66.findMin();
        boolean boolean68 = t24.equals((java.lang.Object) t67);
        minFinder0.chval(t24, 10);
        examples.MinFinder.T t71 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-9) + "'", int9 == (-9));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-9) + "'", int12 == (-9));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t71);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t43 = minFinder41.findMin();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        minFinder50.add(t55);
        minFinder44.chval(t55, 5);
        minFinder41.add(t55);
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder.T t19 = minFinder2.findMin();
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t19);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T(0);
        minFinder0.add(t2);
        examples.MinFinder.T t4 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass5 = minFinder0.getClass();
        org.junit.Assert.assertNotNull(t4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t9 = minFinder4.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        boolean boolean13 = t11.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        boolean boolean29 = t21.equals((java.lang.Object) (-8.7d));
        minFinder14.chval(t21, (-100));
        boolean boolean32 = t11.equals((java.lang.Object) t21);
        minFinder4.add(t21);
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) -1);
        minFinder4.add(t35);
        minFinder0.add(t35);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        examples.MinFinder minFinder5 = new examples.MinFinder();
        examples.MinFinder.T t6 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t8 = minFinder5.findMin();
        minFinder5.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        minFinder5.chval(t11, 0);
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        boolean boolean33 = t19.equals((java.lang.Object) minFinder20);
        minFinder20.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder20.chval(t36, 1);
        minFinder5.add(t36);
        boolean boolean40 = t1.equals((java.lang.Object) t36);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) 'a');
        int int47 = t46.getVal();
        minFinder41.add(t46);
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder41.add(t50);
        examples.MinFinder.T t52 = minFinder41.findMin();
        boolean boolean53 = t36.equals((java.lang.Object) t52);
        int int54 = t52.getVal();
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t58 = minFinder55.findMin();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-1));
        minFinder55.chval(t60, 100);
        examples.MinFinder.T t64 = new examples.MinFinder.T(7);
        minFinder55.chval(t64, (int) (byte) -1);
        boolean boolean67 = t52.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 97 + "'", int47 == 97);
        org.junit.Assert.assertNotNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T[] tArray54 = new examples.MinFinder.T[] { t17, t19, t26, t31, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList55 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList55, tArray54);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList55);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        boolean boolean62 = t60.equals((java.lang.Object) ' ');
        minFinder57.chval(t60, (int) 'a');
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        minFinder57.add(t66);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        minFinder68.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        int int76 = t75.getVal();
        minFinder68.chval(t75, 10);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t82 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        int int86 = t85.getVal();
        int int87 = t85.getVal();
        int int88 = t85.getVal();
        int int89 = t85.getVal();
        minFinder79.chval(t85, 0);
        minFinder68.add(t85);
        minFinder57.add(t85);
        minFinder0.add(t85);
        java.lang.Class<?> wildcardClass95 = t85.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNotNull(tArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-9) + "'", int76 == (-9));
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        minFinder21.add(t30);
        minFinder21.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (short) 0);
        minFinder21.chval(t36, (int) '4');
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder21.chval(t40, 100);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        boolean boolean47 = t45.equals((java.lang.Object) (-1));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList71);
        boolean boolean79 = t45.equals((java.lang.Object) minFinder78);
        boolean boolean80 = t40.equals((java.lang.Object) t45);
        minFinder2.add(t45);
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder84 = new examples.MinFinder();
        examples.MinFinder.T t85 = minFinder84.findMin();
        examples.MinFinder.T t87 = new examples.MinFinder.T(3);
        minFinder84.chval(t87, (int) (short) -1);
        examples.MinFinder minFinder90 = new examples.MinFinder();
        examples.MinFinder.T t91 = minFinder90.findMin();
        examples.MinFinder.T t93 = new examples.MinFinder.T(3);
        minFinder90.chval(t93, (int) (short) -1);
        minFinder84.add(t93);
        boolean boolean97 = t83.equals((java.lang.Object) minFinder84);
        java.lang.Class<?> wildcardClass98 = minFinder84.getClass();
        boolean boolean99 = t45.equals((java.lang.Object) minFinder84);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertNull(t91);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        int int9 = t1.getVal();
        java.lang.Class<?> wildcardClass10 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder19.add(t33);
        int int38 = t33.getVal();
        minFinder0.add(t33);
        int int40 = t33.getVal();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t46 = minFinder41.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        boolean boolean66 = t58.equals((java.lang.Object) (-8.7d));
        minFinder51.chval(t58, (-100));
        boolean boolean69 = t48.equals((java.lang.Object) t58);
        minFinder41.add(t58);
        int int71 = t58.getVal();
        boolean boolean72 = t33.equals((java.lang.Object) t58);
        int int73 = t58.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        boolean boolean11 = t1.equals((java.lang.Object) "hi!");
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        minFinder12.add(t21);
        boolean boolean25 = t1.equals((java.lang.Object) minFinder12);
        int int26 = t1.getVal();
        int int27 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t32 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t32);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t15);
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t22 = minFinder17.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        boolean boolean42 = t34.equals((java.lang.Object) (-8.7d));
        minFinder27.chval(t34, (-100));
        boolean boolean45 = t24.equals((java.lang.Object) t34);
        minFinder17.add(t34);
        minFinder0.add(t34);
        examples.MinFinder.T t48 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass49 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t28 = minFinder0.findMin();
        examples.MinFinder.T t29 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t29);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        examples.MinFinder.T[] tArray28 = new examples.MinFinder.T[] { t7, t9, t16, t18, t26 };
        java.util.ArrayList<examples.MinFinder.T> tList29 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList29, tArray28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t39 = minFinder36.findMin();
        minFinder36.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        minFinder36.chval(t42, 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        boolean boolean52 = t50.equals((java.lang.Object) (-1));
        int int53 = t50.getVal();
        minFinder36.chval(t50, 0);
        minFinder35.add(t50);
        java.lang.Class<?> wildcardClass57 = t50.getClass();
        boolean boolean58 = t1.equals((java.lang.Object) t50);
        int int59 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(tArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T(3);
        minFinder40.chval(t43, (int) (short) -1);
        minFinder34.add(t43);
        minFinder34.clear();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) (short) 0);
        minFinder34.chval(t49, (int) '4');
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) (short) 0);
        int int54 = t53.getVal();
        minFinder34.chval(t53, 100);
        examples.MinFinder.T t57 = minFinder34.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(0);
        java.lang.Object obj60 = null;
        boolean boolean61 = t59.equals(obj60);
        minFinder34.chval(t59, (int) '#');
        minFinder0.chval(t59, (-8));
        examples.MinFinder.T t66 = minFinder0.findMin();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass68 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) (short) 0);
        minFinder19.chval(t34, (int) '4');
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) (short) 0);
        int int39 = t38.getVal();
        minFinder19.chval(t38, 100);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) (-1));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList69);
        boolean boolean77 = t43.equals((java.lang.Object) minFinder76);
        boolean boolean78 = t38.equals((java.lang.Object) t43);
        minFinder0.add(t43);
        int int80 = t43.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t25 = minFinder22.findMin();
        minFinder22.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        minFinder22.chval(t28, 0);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        int int50 = t49.getVal();
        minFinder35.add(t49);
        minFinder22.add(t49);
        boolean boolean53 = t12.equals((java.lang.Object) minFinder22);
        int int54 = t12.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 97 + "'", int50 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        minFinder44.chval(t50, 0);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        boolean boolean60 = t58.equals((java.lang.Object) (-1));
        int int61 = t58.getVal();
        minFinder44.chval(t58, 0);
        examples.MinFinder minFinder64 = new examples.MinFinder();
        examples.MinFinder.T t65 = minFinder64.findMin();
        examples.MinFinder.T t67 = new examples.MinFinder.T(3);
        minFinder64.chval(t67, (int) (short) -1);
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder70.chval(t73, (int) (short) -1);
        minFinder64.add(t73);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        minFinder64.add(t78);
        minFinder44.add(t78);
        minFinder43.add(t78);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T(3);
        minFinder32.chval(t35, (int) (short) -1);
        minFinder26.add(t35);
        minFinder26.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) (short) 0);
        minFinder26.chval(t41, (int) '4');
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) (short) 0);
        int int46 = t45.getVal();
        minFinder26.chval(t45, 100);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        boolean boolean52 = t50.equals((java.lang.Object) (-1));
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        int int71 = t65.getVal();
        examples.MinFinder.T t73 = new examples.MinFinder.T((int) 'a');
        int int74 = t73.getVal();
        examples.MinFinder.T[] tArray75 = new examples.MinFinder.T[] { t54, t56, t63, t65, t73 };
        java.util.ArrayList<examples.MinFinder.T> tList76 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList76, tArray75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList76);
        boolean boolean84 = t50.equals((java.lang.Object) minFinder83);
        boolean boolean85 = t45.equals((java.lang.Object) t50);
        boolean boolean87 = t45.equals((java.lang.Object) 3);
        int int88 = t45.getVal();
        minFinder13.chval(t45, 0);
        int int91 = t45.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertNotNull(tArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        minFinder52.clear();
        examples.MinFinder.T t55 = minFinder52.findMin();
        minFinder52.clear();
        minFinder52.clear();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-9));
        int int60 = t59.getVal();
        minFinder52.chval(t59, 10);
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t66 = minFinder63.findMin();
        minFinder63.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        minFinder63.chval(t69, 0);
        minFinder52.add(t69);
        minFinder41.add(t69);
        examples.MinFinder.T t78 = minFinder41.findMin();
        examples.MinFinder.T t79 = minFinder41.findMin();
        examples.MinFinder.T t80 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-9) + "'", int60 == (-9));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertNotNull(t78);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(t80);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t25 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        minFinder27.clear();
        minFinder27.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-1));
        minFinder44.chval(t49, 100);
        boolean boolean53 = t49.equals((java.lang.Object) 5L);
        minFinder27.add(t49);
        minFinder13.chval(t49, (int) (byte) 10);
        examples.MinFinder.T t57 = minFinder13.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t57);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        minFinder12.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder12.add(t17);
        minFinder6.chval(t17, 5);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-9));
        minFinder22.add(t36);
        minFinder6.chval(t36, (-10));
        boolean boolean40 = t5.equals((java.lang.Object) t36);
        minFinder0.chval(t36, 7);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T[] tArray52 = new examples.MinFinder.T[] { t15, t17, t24, t29, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList53 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList53, tArray52);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList53);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        minFinder65.clear();
        minFinder65.clear();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        int int71 = t70.getVal();
        minFinder65.add(t70);
        minFinder59.chval(t70, 5);
        minFinder58.add(t70);
        minFinder0.chval(t70, 0);
        examples.MinFinder minFinder78 = new examples.MinFinder();
        examples.MinFinder.T t79 = minFinder78.findMin();
        minFinder78.clear();
        examples.MinFinder.T t81 = minFinder78.findMin();
        minFinder78.clear();
        minFinder78.clear();
        minFinder78.clear();
        examples.MinFinder.T t85 = minFinder78.findMin();
        boolean boolean86 = t70.equals((java.lang.Object) minFinder78);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertNotNull(tArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 97 + "'", int71 == 97);
        org.junit.Assert.assertNull(t79);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertNull(t85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder72 = new examples.MinFinder();
        examples.MinFinder.T t73 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t75 = minFinder72.findMin();
        minFinder72.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        minFinder72.chval(t78, 0);
        examples.MinFinder.T t86 = new examples.MinFinder.T((-3));
        boolean boolean88 = t86.equals((java.lang.Object) (-1));
        int int89 = t86.getVal();
        minFinder72.chval(t86, 0);
        minFinder71.add(t86);
        minFinder41.add(t86);
        minFinder41.clear();
        java.lang.Class<?> wildcardClass95 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        minFinder47.add(t49);
        minFinder47.clear();
        examples.MinFinder.T t52 = minFinder47.findMin();
        boolean boolean53 = t1.equals((java.lang.Object) minFinder47);
        examples.MinFinder.T t54 = minFinder47.findMin();
        minFinder47.clear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(t54);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-9));
        int int22 = t21.getVal();
        minFinder19.chval(t21, (-100));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        int int54 = t48.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        examples.MinFinder.T[] tArray63 = new examples.MinFinder.T[] { t26, t28, t35, t40, t46, t48, t56 };
        java.util.ArrayList<examples.MinFinder.T> tList64 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList64, tArray63);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList64);
        minFinder66.clear();
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        minFinder68.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        int int76 = t75.getVal();
        minFinder68.chval(t75, 10);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t80 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t82 = minFinder79.findMin();
        minFinder79.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        int int86 = t85.getVal();
        int int87 = t85.getVal();
        int int88 = t85.getVal();
        int int89 = t85.getVal();
        minFinder79.chval(t85, 0);
        minFinder68.add(t85);
        minFinder66.add(t85);
        minFinder19.add(t85);
        examples.MinFinder.T t95 = minFinder19.findMin();
        minFinder0.chval(t95, 10);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-9) + "'", int22 == (-9));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNotNull(tArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-9) + "'", int76 == (-9));
        org.junit.Assert.assertNull(t80);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-3) + "'", int87 == (-3));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(t95);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        minFinder12.clear();
        minFinder12.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder12.add(t17);
        minFinder6.chval(t17, 5);
        examples.MinFinder.T t22 = minFinder6.findMin();
        examples.MinFinder.T t23 = minFinder6.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        minFinder29.clear();
        examples.MinFinder.T t32 = minFinder29.findMin();
        minFinder29.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        minFinder29.chval(t35, 0);
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        minFinder44.add(t53);
        boolean boolean57 = t43.equals((java.lang.Object) minFinder44);
        minFinder44.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T(3);
        minFinder44.chval(t60, 1);
        minFinder29.add(t60);
        boolean boolean64 = t25.equals((java.lang.Object) t60);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-1));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        boolean boolean69 = t25.equals((java.lang.Object) t66);
        minFinder6.add(t66);
        minFinder0.chval(t66, (int) (byte) 100);
        java.lang.Class<?> wildcardClass73 = t66.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        int int21 = t15.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        int int58 = t53.getVal();
        int int59 = t53.getVal();
        examples.MinFinder.T[] tArray60 = new examples.MinFinder.T[] { t23, t25, t32, t37, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList61 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList61, tArray60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList61);
        minFinder63.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        boolean boolean68 = t66.equals((java.lang.Object) ' ');
        minFinder63.chval(t66, (int) 'a');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        minFinder63.add(t72);
        minFinder63.clear();
        examples.MinFinder minFinder75 = new examples.MinFinder();
        examples.MinFinder.T t76 = minFinder75.findMin();
        examples.MinFinder.T t78 = new examples.MinFinder.T(3);
        minFinder75.chval(t78, (int) (short) -1);
        examples.MinFinder minFinder81 = new examples.MinFinder();
        examples.MinFinder.T t82 = minFinder81.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T(3);
        minFinder81.chval(t84, (int) (short) -1);
        minFinder75.add(t84);
        minFinder75.clear();
        examples.MinFinder.T t90 = new examples.MinFinder.T((int) (short) 0);
        minFinder75.chval(t90, (int) '4');
        minFinder63.add(t90);
        examples.MinFinder.T t94 = minFinder63.findMin();
        boolean boolean95 = t15.equals((java.lang.Object) minFinder63);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-9) + "'", int21 == (-9));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertNotNull(tArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        examples.MinFinder.T t1 = new examples.MinFinder.T(1);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList25);
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        examples.MinFinder.T[] tArray57 = new examples.MinFinder.T[] { t36, t38, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList58 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList58, tArray57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList58);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList58);
        examples.MinFinder.T t63 = minFinder62.findMin();
        int int64 = t63.getVal();
        minFinder34.add(t63);
        examples.MinFinder.T t66 = minFinder34.findMin();
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        boolean boolean69 = t1.equals((java.lang.Object) t66);
        int int70 = t1.getVal();
        int int71 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNotNull(tArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(t63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        examples.MinFinder.T t94 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(t94);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-1));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        java.lang.Object obj4 = null;
        boolean boolean5 = t1.equals(obj4);
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        int int24 = t18.getVal();
        examples.MinFinder.T t26 = new examples.MinFinder.T((int) 'a');
        int int27 = t26.getVal();
        examples.MinFinder.T[] tArray28 = new examples.MinFinder.T[] { t7, t9, t16, t18, t26 };
        java.util.ArrayList<examples.MinFinder.T> tList29 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList29, tArray28);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList29);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList29);
        boolean boolean49 = t1.equals((java.lang.Object) minFinder48);
        int int50 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 97 + "'", int27 == 97);
        org.junit.Assert.assertNotNull(tArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = null;
        minFinder42.chval(t44, 0);
        minFinder42.clear();
        examples.MinFinder.T t48 = minFinder42.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t48);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t49 = minFinder46.findMin();
        minFinder46.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        minFinder46.chval(t52, 0);
        minFinder46.clear();
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder60.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 0);
        minFinder60.chval(t75, (int) '4');
        minFinder46.add(t75);
        minFinder41.add(t75);
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder82 = new examples.MinFinder();
        examples.MinFinder.T t83 = minFinder82.findMin();
        examples.MinFinder.T t85 = new examples.MinFinder.T(3);
        minFinder82.chval(t85, (int) (short) -1);
        examples.MinFinder minFinder88 = new examples.MinFinder();
        examples.MinFinder.T t89 = minFinder88.findMin();
        examples.MinFinder.T t91 = new examples.MinFinder.T(3);
        minFinder88.chval(t91, (int) (short) -1);
        minFinder82.add(t91);
        boolean boolean95 = t81.equals((java.lang.Object) minFinder82);
        minFinder82.clear();
        boolean boolean97 = t75.equals((java.lang.Object) minFinder82);
        minFinder82.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t83);
        org.junit.Assert.assertNull(t89);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        minFinder28.chval(t34, 0);
        minFinder28.clear();
        examples.MinFinder.T t42 = minFinder28.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder28.add(t44);
        examples.MinFinder.T t48 = minFinder28.findMin();
        java.lang.Object obj49 = new java.lang.Object();
        boolean boolean50 = t48.equals(obj49);
        minFinder26.add(t48);
        minFinder26.clear();
        examples.MinFinder.T t53 = minFinder26.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(t48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(t53);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) '#');
        int int20 = t19.getVal();
        minFinder0.chval(t19, (int) (byte) 0);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        minFinder23.add(t32);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder23.add(t37);
        examples.MinFinder.T t40 = minFinder23.findMin();
        minFinder0.add(t40);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(t40);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder.T t19 = minFinder2.findMin();
        int int20 = t19.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        minFinder0.add(t3);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        int int20 = t15.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t13, t15, t22, t27, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        minFinder53.add(t55);
        examples.MinFinder.T t57 = minFinder53.findMin();
        int int58 = t57.getVal();
        boolean boolean60 = t57.equals((java.lang.Object) '4');
        int int61 = t57.getVal();
        minFinder0.add(t57);
        int int63 = t57.getVal();
        java.lang.Class<?> wildcardClass64 = t57.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(t57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-9));
        boolean boolean13 = t11.equals((java.lang.Object) 6);
        minFinder0.chval(t11, 97);
        int int16 = t11.getVal();
        java.lang.Class<?> wildcardClass17 = t11.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) 'a');
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        minFinder3.chval(t9, 0);
        int int16 = t9.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t18, t20, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList40);
        examples.MinFinder.T t55 = minFinder54.findMin();
        boolean boolean56 = t9.equals((java.lang.Object) minFinder54);
        boolean boolean57 = t1.equals((java.lang.Object) boolean56);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        minFinder58.clear();
        minFinder58.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        minFinder58.add(t63);
        examples.MinFinder.T t67 = new examples.MinFinder.T(1);
        boolean boolean68 = t63.equals((java.lang.Object) t67);
        int int69 = t67.getVal();
        boolean boolean71 = t67.equals((java.lang.Object) 3L);
        boolean boolean72 = t1.equals((java.lang.Object) 3L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 97 + "'", int2 == 97);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-1));
        minFinder3.chval(t8, 100);
        boolean boolean12 = t8.equals((java.lang.Object) 5L);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        minFinder13.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 0);
        minFinder13.chval(t28, (int) '4');
        boolean boolean31 = t8.equals((java.lang.Object) minFinder13);
        boolean boolean32 = t1.equals((java.lang.Object) boolean31);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-9));
        boolean boolean13 = t11.equals((java.lang.Object) 6);
        minFinder0.chval(t11, 97);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        int int33 = t30.getVal();
        minFinder16.chval(t30, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder36.add(t50);
        minFinder16.add(t50);
        minFinder0.chval(t50, (int) 'a');
        examples.MinFinder.T t56 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertNull(t56);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        java.lang.Class<?> wildcardClass29 = tList23.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-9));
        boolean boolean13 = t11.equals((java.lang.Object) 6);
        minFinder0.chval(t11, 97);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t19 = minFinder16.findMin();
        minFinder16.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        minFinder16.chval(t22, 0);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        boolean boolean32 = t30.equals((java.lang.Object) (-1));
        int int33 = t30.getVal();
        minFinder16.chval(t30, 0);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) 'a');
        int int51 = t50.getVal();
        minFinder36.add(t50);
        minFinder16.add(t50);
        minFinder0.chval(t50, (int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean59 = t57.equals((java.lang.Object) 'a');
        java.lang.Class<?> wildcardClass60 = t57.getClass();
        boolean boolean61 = t50.equals((java.lang.Object) wildcardClass60);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 97 + "'", int51 == 97);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        boolean boolean10 = t1.equals((java.lang.Object) (-4.6d));
        int int11 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        java.lang.Class<?> wildcardClass51 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t19 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t22 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNull(t22);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-6));
        minFinder2.chval(t21, (-1));
        java.lang.Class<?> wildcardClass24 = t21.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        minFinder37.clear();
        minFinder37.clear();
        minFinder37.clear();
        minFinder37.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder11.add(t20);
        boolean boolean22 = t10.equals((java.lang.Object) t20);
        minFinder0.chval(t10, 100);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t28 = minFinder0.findMin();
        examples.MinFinder.T t29 = null;
        minFinder0.add(t29);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t34 = minFinder31.findMin();
        minFinder31.clear();
        examples.MinFinder.T t36 = minFinder31.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        boolean boolean45 = t38.equals((java.lang.Object) 0.0d);
        boolean boolean47 = t38.equals((java.lang.Object) (-4.6d));
        minFinder31.chval(t38, 7);
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t38, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-9));
        int int26 = t25.getVal();
        minFinder23.chval(t25, (-100));
        minFinder0.add(t25);
        examples.MinFinder.T t30 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-9) + "'", int26 == (-9));
        org.junit.Assert.assertNotNull(t30);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        int int46 = t45.getVal();
        boolean boolean48 = t45.equals((java.lang.Object) '4');
        java.lang.Class<?> wildcardClass49 = t45.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-9));
        int int25 = t24.getVal();
        minFinder17.chval(t24, 10);
        int int28 = t24.getVal();
        minFinder0.add(t24);
        examples.MinFinder.T t30 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-9) + "'", int25 == (-9));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-9) + "'", int28 == (-9));
        org.junit.Assert.assertNotNull(t30);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder.T t65 = minFinder32.findMin();
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        minFinder66.chval(t72, 0);
        examples.MinFinder minFinder79 = new examples.MinFinder();
        examples.MinFinder.T t81 = new examples.MinFinder.T((-9));
        int int82 = t81.getVal();
        minFinder79.chval(t81, (-100));
        minFinder66.chval(t81, 0);
        int int87 = t81.getVal();
        int int88 = t81.getVal();
        minFinder32.add(t81);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-9) + "'", int82 == (-9));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-9) + "'", int87 == (-9));
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-9) + "'", int88 == (-9));
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        int int67 = t61.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        int int70 = t69.getVal();
        examples.MinFinder.T[] tArray71 = new examples.MinFinder.T[] { t50, t52, t59, t61, t69 };
        java.util.ArrayList<examples.MinFinder.T> tList72 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList72, tArray71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList72);
        java.lang.Class<?> wildcardClass76 = tList72.getClass();
        boolean boolean77 = t48.equals((java.lang.Object) tList72);
        int int78 = t48.getVal();
        minFinder41.add(t48);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 97 + "'", int70 == 97);
        org.junit.Assert.assertNotNull(tArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 3 + "'", int78 == 3);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder.T t48 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-1));
        minFinder51.chval(t56, 100);
        boolean boolean60 = t56.equals((java.lang.Object) 5L);
        minFinder34.add(t56);
        examples.MinFinder.T t62 = minFinder34.findMin();
        int int63 = t62.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        int int83 = t78.getVal();
        int int84 = t78.getVal();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        int int87 = t86.getVal();
        examples.MinFinder.T[] tArray88 = new examples.MinFinder.T[] { t67, t69, t76, t78, t86 };
        java.util.ArrayList<examples.MinFinder.T> tList89 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList89, tArray88);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList89);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList89);
        java.lang.Class<?> wildcardClass93 = tList89.getClass();
        boolean boolean94 = t65.equals((java.lang.Object) tList89);
        int int95 = t65.getVal();
        int int96 = t65.getVal();
        boolean boolean97 = t62.equals((java.lang.Object) int96);
        minFinder0.add(t62);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertNotNull(tArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        int int29 = t28.getVal();
        minFinder23.add(t28);
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder23.add(t32);
        boolean boolean34 = t22.equals((java.lang.Object) t32);
        int int35 = t32.getVal();
        minFinder2.chval(t32, 0);
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        boolean boolean46 = t39.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder.T t61 = minFinder47.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        boolean boolean65 = t63.equals((java.lang.Object) ' ');
        minFinder47.add(t63);
        boolean boolean67 = t39.equals((java.lang.Object) t63);
        minFinder2.add(t39);
        java.lang.Class<?> wildcardClass69 = t39.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t20 = minFinder2.findMin();
        examples.MinFinder.T t21 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t21);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        examples.MinFinder.T t34 = null;
        minFinder29.chval(t34, (-9));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        int int55 = t49.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        int int58 = t57.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t38, t40, t47, t49, t57 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList60);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList60);
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t67 = minFinder65.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        int int86 = t80.getVal();
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) 'a');
        int int89 = t88.getVal();
        examples.MinFinder.T[] tArray90 = new examples.MinFinder.T[] { t69, t71, t78, t80, t88 };
        java.util.ArrayList<examples.MinFinder.T> tList91 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList91, tArray90);
        examples.MinFinder minFinder93 = new examples.MinFinder(tList91);
        examples.MinFinder minFinder94 = new examples.MinFinder(tList91);
        examples.MinFinder.T t95 = minFinder94.findMin();
        java.lang.Class<?> wildcardClass96 = t95.getClass();
        boolean boolean97 = t67.equals((java.lang.Object) t95);
        // The following exception was thrown during execution in test generation
        try {
            minFinder29.chval(t67, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 97 + "'", int58 == 97);
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertNotNull(tArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(t95);
        org.junit.Assert.assertNotNull(wildcardClass96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder2.add(t66);
        examples.MinFinder.T t68 = null;
        minFinder2.chval(t68, 6);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder.T t74 = minFinder71.findMin();
        minFinder71.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        int int80 = t77.getVal();
        int int81 = t77.getVal();
        minFinder71.chval(t77, 0);
        examples.MinFinder.T t85 = new examples.MinFinder.T((-3));
        boolean boolean87 = t85.equals((java.lang.Object) (-1));
        int int88 = t85.getVal();
        minFinder71.chval(t85, 0);
        int int91 = t85.getVal();
        int int92 = t85.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder2.chval(t85, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-3) + "'", int88 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        minFinder0.add(t68);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t13 = minFinder12.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T(3);
        minFinder12.chval(t15, (int) (short) -1);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        minFinder18.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((int) 'a');
        int int24 = t23.getVal();
        minFinder18.add(t23);
        minFinder12.chval(t23, 5);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        minFinder28.add(t37);
        examples.MinFinder.T t42 = new examples.MinFinder.T((-9));
        minFinder28.add(t42);
        minFinder12.chval(t42, (-10));
        boolean boolean46 = t11.equals((java.lang.Object) t42);
        minFinder0.chval(t42, (int) (short) 0);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        int int81 = t80.getVal();
        int int82 = t80.getVal();
        int int83 = t80.getVal();
        int int84 = t80.getVal();
        int int85 = t80.getVal();
        int int86 = t80.getVal();
        examples.MinFinder.T[] tArray87 = new examples.MinFinder.T[] { t50, t52, t59, t64, t70, t72, t80 };
        java.util.ArrayList<examples.MinFinder.T> tList88 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList88, tArray87);
        examples.MinFinder minFinder90 = new examples.MinFinder(tList88);
        examples.MinFinder.T t92 = new examples.MinFinder.T((-3));
        minFinder90.add(t92);
        examples.MinFinder.T t94 = minFinder90.findMin();
        int int95 = t94.getVal();
        boolean boolean97 = t94.equals((java.lang.Object) '4');
        minFinder0.add(t94);
        java.lang.Class<?> wildcardClass99 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNotNull(t8);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 97 + "'", int24 == 97);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(tArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(t94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-3) + "'", int95 == (-3));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        boolean boolean42 = t40.equals((java.lang.Object) (-1));
        int int43 = t40.getVal();
        minFinder26.chval(t40, 0);
        minFinder22.add(t40);
        minFinder2.chval(t40, 8);
        examples.MinFinder.T t49 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass50 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNotNull(wildcardClass50);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder2.add(t66);
        examples.MinFinder.T t68 = null;
        minFinder2.chval(t68, 6);
        minFinder2.clear();
        java.lang.Class<?> wildcardClass72 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t2 = minFinder0.findMin();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = t2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t2);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        minFinder13.clear();
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder51.chval(t54, (int) (short) -1);
        minFinder45.add(t54);
        boolean boolean58 = t44.equals((java.lang.Object) minFinder45);
        minFinder45.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder45.chval(t61, 1);
        minFinder30.add(t61);
        boolean boolean65 = t26.equals((java.lang.Object) t61);
        minFinder13.chval(t61, 32);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-10));
        minFinder13.chval(t69, (-5));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t89 = minFinder0.findMin();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(t89);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t11 = minFinder8.findMin();
        minFinder8.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        minFinder8.chval(t14, 0);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-9));
        int int24 = t23.getVal();
        minFinder21.chval(t23, (-100));
        minFinder8.chval(t23, 0);
        int int29 = t23.getVal();
        int int30 = t23.getVal();
        boolean boolean31 = t1.equals((java.lang.Object) int30);
        java.lang.Class<?> wildcardClass32 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-9) + "'", int24 == (-9));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-9) + "'", int30 == (-9));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList23);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        minFinder22.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-1));
        minFinder22.chval(t37, (int) (byte) 1);
        minFinder0.chval(t37, (-7));
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t48 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        int int53 = t52.getVal();
        minFinder42.add(t52);
        minFinder0.chval(t52, 10);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass15 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t85 = new examples.MinFinder.T((-9));
        int int86 = t85.getVal();
        minFinder83.chval(t85, (-100));
        int int89 = t85.getVal();
        int int90 = t85.getVal();
        int int91 = t85.getVal();
        java.lang.Object obj92 = null;
        boolean boolean93 = t85.equals(obj92);
        int int94 = t85.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.chval(t85, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-9) + "'", int86 == (-9));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-9) + "'", int89 == (-9));
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-9) + "'", int90 == (-9));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-9) + "'", int91 == (-9));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-9) + "'", int94 == (-9));
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) 'a');
        int int18 = t17.getVal();
        minFinder2.add(t17);
        java.lang.Class<?> wildcardClass20 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 97 + "'", int18 == 97);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        minFinder38.add(t47);
        boolean boolean51 = t37.equals((java.lang.Object) minFinder38);
        minFinder38.clear();
        examples.MinFinder.T t54 = new examples.MinFinder.T(3);
        minFinder38.chval(t54, 1);
        minFinder23.add(t54);
        boolean boolean58 = t19.equals((java.lang.Object) t54);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-1));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        boolean boolean63 = t19.equals((java.lang.Object) t60);
        minFinder0.add(t60);
        java.lang.Class<?> wildcardClass65 = t60.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        int int71 = t65.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t35, t37, t44, t49, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList73);
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t81 = minFinder79.findMin();
        minFinder0.add(t81);
        int int83 = t81.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        int int34 = t23.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        boolean boolean69 = t17.equals((java.lang.Object) minFinder62);
        examples.MinFinder minFinder70 = new examples.MinFinder();
        examples.MinFinder.T t71 = minFinder70.findMin();
        examples.MinFinder.T t73 = new examples.MinFinder.T(3);
        minFinder70.chval(t73, (int) (short) -1);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        examples.MinFinder.T t79 = new examples.MinFinder.T(3);
        minFinder76.chval(t79, (int) (short) -1);
        minFinder70.add(t79);
        minFinder70.clear();
        examples.MinFinder.T t85 = new examples.MinFinder.T((int) (short) 0);
        minFinder70.chval(t85, (int) '4');
        examples.MinFinder.T t88 = minFinder70.findMin();
        boolean boolean89 = t17.equals((java.lang.Object) minFinder70);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) '#');
        int int36 = t35.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        int int44 = t42.getVal();
        int int45 = t42.getVal();
        int int46 = t42.getVal();
        int int47 = t42.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T t59 = new examples.MinFinder.T((int) 'a');
        int int60 = t59.getVal();
        examples.MinFinder.T[] tArray61 = new examples.MinFinder.T[] { t40, t42, t49, t51, t59 };
        java.util.ArrayList<examples.MinFinder.T> tList62 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList62, tArray61);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList62);
        java.lang.Class<?> wildcardClass66 = tList62.getClass();
        boolean boolean67 = t38.equals((java.lang.Object) tList62);
        boolean boolean68 = t35.equals((java.lang.Object) t38);
        minFinder0.chval(t35, (int) ' ');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 97 + "'", int60 == 97);
        org.junit.Assert.assertNotNull(tArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        minFinder44.add(t56);
        examples.MinFinder.T t62 = minFinder44.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNotNull(t62);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t9 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        minFinder11.clear();
        examples.MinFinder.T t16 = new examples.MinFinder.T((int) 'a');
        int int17 = t16.getVal();
        minFinder11.add(t16);
        examples.MinFinder.T t20 = new examples.MinFinder.T(1);
        boolean boolean21 = t16.equals((java.lang.Object) t20);
        int int22 = t20.getVal();
        boolean boolean24 = t20.equals((java.lang.Object) 3L);
        minFinder0.add(t20);
        examples.MinFinder.T t27 = new examples.MinFinder.T(35);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t31 = minFinder28.findMin();
        minFinder28.clear();
        minFinder28.clear();
        examples.MinFinder.T t34 = minFinder28.findMin();
        minFinder28.clear();
        examples.MinFinder.T t36 = minFinder28.findMin();
        boolean boolean37 = t27.equals((java.lang.Object) minFinder28);
        minFinder0.add(t27);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 97 + "'", int17 == 97);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder0.add(t17);
        examples.MinFinder.T t25 = minFinder0.findMin();
        int int26 = t25.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(t25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass84 = t83.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertNotNull(wildcardClass84);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        minFinder35.add(t44);
        minFinder35.clear();
        examples.MinFinder.T t50 = new examples.MinFinder.T((int) (short) 0);
        minFinder35.chval(t50, (int) '4');
        minFinder17.add(t50);
        minFinder0.chval(t50, (-8));
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t58 = new examples.MinFinder.T(0);
        minFinder56.add(t58);
        minFinder0.chval(t58, 100);
        java.lang.Class<?> wildcardClass62 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T(7);
        minFinder0.chval(t9, (int) (byte) -1);
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-9));
        minFinder13.add(t27);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-9));
        minFinder29.add(t43);
        minFinder29.clear();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t48 = new examples.MinFinder.T(100);
        minFinder46.add(t48);
        minFinder29.chval(t48, (int) '#');
        java.lang.Class<?> wildcardClass52 = minFinder29.getClass();
        boolean boolean53 = t27.equals((java.lang.Object) minFinder29);
        minFinder0.chval(t27, (-100));
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        int int49 = t48.getVal();
        int int50 = t48.getVal();
        int int51 = t48.getVal();
        int int52 = t48.getVal();
        int int53 = t48.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((int) 'a');
        int int66 = t65.getVal();
        examples.MinFinder.T[] tArray67 = new examples.MinFinder.T[] { t46, t48, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList68 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList68, tArray67);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList68);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList68);
        examples.MinFinder.T t73 = minFinder72.findMin();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 100);
        minFinder72.add(t75);
        examples.MinFinder.T t77 = minFinder72.findMin();
        minFinder25.add(t77);
        examples.MinFinder.T t79 = null;
        minFinder25.chval(t79, (-6));
        examples.MinFinder.T t82 = minFinder25.findMin();
        java.lang.Class<?> wildcardClass83 = minFinder25.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 97 + "'", int66 == 97);
        org.junit.Assert.assertNotNull(tArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertNotNull(t77);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder.T t47 = minFinder41.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-7));
        minFinder41.add(t49);
        java.lang.Class<?> wildcardClass51 = minFinder41.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t15 = minFinder10.findMin();
        minFinder10.clear();
        minFinder10.clear();
        examples.MinFinder.T t18 = minFinder10.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        minFinder19.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        minFinder19.add(t24);
        minFinder10.chval(t24, (-5));
        examples.MinFinder.T t30 = new examples.MinFinder.T(0);
        java.lang.Object obj31 = null;
        boolean boolean32 = t30.equals(obj31);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        minFinder65.clear();
        boolean boolean67 = t30.equals((java.lang.Object) minFinder65);
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t70 = new examples.MinFinder.T((-9));
        int int71 = t70.getVal();
        minFinder68.chval(t70, (-100));
        int int74 = t70.getVal();
        minFinder65.chval(t70, (-4));
        examples.MinFinder minFinder77 = new examples.MinFinder();
        examples.MinFinder.T t78 = minFinder77.findMin();
        minFinder77.clear();
        minFinder77.clear();
        examples.MinFinder.T t82 = new examples.MinFinder.T((int) 'a');
        int int83 = t82.getVal();
        minFinder77.add(t82);
        minFinder77.clear();
        examples.MinFinder.T t87 = new examples.MinFinder.T((int) 'a');
        minFinder77.add(t87);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-3));
        minFinder77.add(t90);
        minFinder65.add(t90);
        minFinder10.add(t90);
        minFinder0.chval(t90, (int) '#');
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-9) + "'", int71 == (-9));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-9) + "'", int74 == (-9));
        org.junit.Assert.assertNull(t78);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 97 + "'", int83 == 97);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        int int29 = t28.getVal();
        minFinder26.chval(t28, (-100));
        minFinder13.chval(t28, 0);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        java.lang.Object obj40 = null;
        boolean boolean41 = t35.equals(obj40);
        minFinder13.add(t35);
        boolean boolean43 = t12.equals((java.lang.Object) t35);
        int int44 = t35.getVal();
        int int45 = t35.getVal();
        minFinder2.chval(t35, 8);
        minFinder2.clear();
        examples.MinFinder.T t49 = minFinder2.findMin();
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t52 = new examples.MinFinder.T(100);
        minFinder50.add(t52);
        examples.MinFinder.T t54 = minFinder50.findMin();
        minFinder2.add(t54);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNotNull(t54);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        java.lang.Class<?> wildcardClass9 = t5.getClass();
        boolean boolean10 = t1.equals((java.lang.Object) t5);
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        examples.MinFinder.T[] tArray33 = new examples.MinFinder.T[] { t12, t14, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList34 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList34, tArray33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        minFinder41.chval(t47, 0);
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        boolean boolean57 = t55.equals((java.lang.Object) (-1));
        int int58 = t55.getVal();
        minFinder41.chval(t55, 0);
        minFinder40.add(t55);
        minFinder40.clear();
        examples.MinFinder minFinder63 = new examples.MinFinder();
        examples.MinFinder.T t64 = minFinder63.findMin();
        minFinder63.clear();
        minFinder63.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder63.add(t68);
        examples.MinFinder.T t72 = new examples.MinFinder.T(3);
        minFinder63.add(t72);
        examples.MinFinder.T t74 = minFinder63.findMin();
        java.lang.Object obj75 = null;
        boolean boolean76 = t74.equals(obj75);
        minFinder40.chval(t74, (-6));
        boolean boolean79 = t1.equals((java.lang.Object) minFinder40);
        int int80 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(tArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        examples.MinFinder.T t16 = minFinder0.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        minFinder17.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        minFinder17.add(t22);
        minFinder17.clear();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        minFinder17.add(t27);
        boolean boolean29 = t16.equals((java.lang.Object) t27);
        java.lang.Class<?> wildcardClass30 = t27.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(3);
        minFinder41.chval(t44, (int) (short) -1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) (short) 0);
        minFinder41.chval(t56, (int) '4');
        minFinder27.add(t56);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        boolean boolean66 = t56.equals((java.lang.Object) t61);
        int int67 = t56.getVal();
        boolean boolean68 = t24.equals((java.lang.Object) t56);
        minFinder0.add(t56);
        examples.MinFinder.T t70 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(t70);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder.T t51 = new examples.MinFinder.T((int) '#');
        int int52 = t51.getVal();
        boolean boolean53 = t45.equals((java.lang.Object) int52);
        minFinder0.add(t45);
        examples.MinFinder.T t55 = null;
        minFinder0.chval(t55, (int) (short) -1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 35 + "'", int52 == 35);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        minFinder29.add(t39);
        java.lang.Class<?> wildcardClass44 = minFinder29.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        minFinder28.clear();
        java.lang.Class<?> wildcardClass30 = minFinder28.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t10 = new examples.MinFinder.T(0);
        java.lang.Object obj11 = null;
        boolean boolean12 = t10.equals(obj11);
        int int13 = t10.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder0.add(t10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        boolean boolean37 = t1.equals((java.lang.Object) minFinder36);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        examples.MinFinder.T t41 = new examples.MinFinder.T(3);
        minFinder38.chval(t41, (int) (short) -1);
        boolean boolean44 = t1.equals((java.lang.Object) minFinder38);
        examples.MinFinder.T t45 = minFinder38.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        boolean boolean78 = t76.equals((java.lang.Object) (-1));
        minFinder74.add(t76);
        examples.MinFinder.T t80 = minFinder74.findMin();
        examples.MinFinder.T t81 = minFinder74.findMin();
        minFinder38.add(t81);
        java.lang.Class<?> wildcardClass83 = minFinder38.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        minFinder20.clear();
        examples.MinFinder.T t23 = minFinder20.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-1));
        minFinder20.chval(t25, 100);
        examples.MinFinder.T t29 = new examples.MinFinder.T(7);
        minFinder20.chval(t29, (int) (byte) -1);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t35 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        minFinder32.chval(t38, 0);
        minFinder32.clear();
        examples.MinFinder.T t46 = minFinder32.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        boolean boolean50 = t48.equals((java.lang.Object) ' ');
        minFinder32.add(t48);
        examples.MinFinder.T t52 = minFinder32.findMin();
        minFinder20.chval(t52, 1);
        minFinder0.chval(t52, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder.T t58 = null;
        minFinder0.chval(t58, (int) (short) -1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(t52);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        int int23 = t9.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t18 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        minFinder15.chval(t21, 0);
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        minFinder30.add(t39);
        boolean boolean43 = t29.equals((java.lang.Object) minFinder30);
        minFinder30.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T(3);
        minFinder30.chval(t46, 1);
        minFinder15.add(t46);
        boolean boolean50 = t11.equals((java.lang.Object) t46);
        examples.MinFinder.T t52 = new examples.MinFinder.T((-1));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        boolean boolean55 = t11.equals((java.lang.Object) t52);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        minFinder56.chval(t62, 0);
        boolean boolean69 = t11.equals((java.lang.Object) minFinder56);
        boolean boolean71 = t11.equals((java.lang.Object) 0);
        minFinder0.add(t11);
        int int73 = t11.getVal();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder0.chval(t15, (int) (byte) 1);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t78);
        examples.MinFinder.T t82 = minFinder0.findMin();
        examples.MinFinder.T t83 = minFinder0.findMin();
        int int84 = t83.getVal();
        int int85 = t83.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(t82);
        org.junit.Assert.assertNotNull(t83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 97 + "'", int84 == 97);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 97 + "'", int85 == 97);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        boolean boolean8 = t1.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t12 = minFinder9.findMin();
        minFinder9.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        minFinder9.chval(t15, 0);
        minFinder9.clear();
        examples.MinFinder.T t23 = minFinder9.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        boolean boolean27 = t25.equals((java.lang.Object) ' ');
        minFinder9.add(t25);
        boolean boolean29 = t1.equals((java.lang.Object) t25);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        examples.MinFinder.T t33 = new examples.MinFinder.T(3);
        minFinder30.chval(t33, (int) (short) -1);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        minFinder36.clear();
        minFinder36.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        int int42 = t41.getVal();
        minFinder36.add(t41);
        minFinder30.chval(t41, 5);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        minFinder46.add(t55);
        examples.MinFinder.T t60 = new examples.MinFinder.T((-9));
        minFinder46.add(t60);
        minFinder30.chval(t60, (-10));
        examples.MinFinder.T t64 = minFinder30.findMin();
        examples.MinFinder.T t65 = minFinder30.findMin();
        boolean boolean66 = t25.equals((java.lang.Object) minFinder30);
        int int67 = t25.getVal();
        int int68 = t25.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t64);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) (byte) 100);
        int int12 = t11.getVal();
        minFinder0.chval(t11, (-7));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        minFinder40.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        minFinder44.add(t53);
        boolean boolean57 = t43.equals((java.lang.Object) minFinder44);
        examples.MinFinder.T t58 = minFinder44.findMin();
        minFinder40.add(t58);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t63 = new examples.MinFinder.T((-3));
        int int64 = t63.getVal();
        int int65 = t63.getVal();
        int int66 = t63.getVal();
        int int67 = t63.getVal();
        int int68 = t63.getVal();
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t72 = new examples.MinFinder.T((-3));
        int int73 = t72.getVal();
        int int74 = t72.getVal();
        int int75 = t72.getVal();
        int int76 = t72.getVal();
        int int77 = t72.getVal();
        int int78 = t72.getVal();
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) 'a');
        int int81 = t80.getVal();
        examples.MinFinder.T[] tArray82 = new examples.MinFinder.T[] { t61, t63, t70, t72, t80 };
        java.util.ArrayList<examples.MinFinder.T> tList83 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList83, tArray82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList83);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList83);
        examples.MinFinder.T t88 = minFinder87.findMin();
        examples.MinFinder.T t90 = new examples.MinFinder.T((int) (short) 100);
        minFinder87.add(t90);
        examples.MinFinder.T t92 = minFinder87.findMin();
        minFinder40.add(t92);
        examples.MinFinder.T t94 = null;
        minFinder40.chval(t94, (-6));
        examples.MinFinder.T t97 = minFinder40.findMin();
        minFinder0.add(t97);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 97 + "'", int81 == 97);
        org.junit.Assert.assertNotNull(tArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertNotNull(t97);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder.T t61 = minFinder60.findMin();
        int int62 = t61.getVal();
        minFinder32.add(t61);
        examples.MinFinder.T t64 = minFinder32.findMin();
        java.lang.Class<?> wildcardClass65 = minFinder32.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(t61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNotNull(wildcardClass65);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        minFinder41.add(t43);
        examples.MinFinder.T t45 = minFinder41.findMin();
        int int46 = t45.getVal();
        java.lang.Class<?> wildcardClass47 = t45.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t7 = minFinder0.findMin();
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        minFinder8.clear();
        minFinder8.clear();
        examples.MinFinder.T t13 = new examples.MinFinder.T((int) 'a');
        int int14 = t13.getVal();
        minFinder8.add(t13);
        minFinder8.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T((int) 'a');
        minFinder8.add(t18);
        examples.MinFinder.T t20 = minFinder8.findMin();
        minFinder0.add(t20);
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        java.lang.Class<?> wildcardClass24 = t20.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 97 + "'", int14 == 97);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 97 + "'", int22 == 97);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass9 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        int int32 = t26.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        examples.MinFinder.T[] tArray36 = new examples.MinFinder.T[] { t15, t17, t24, t26, t34 };
        java.util.ArrayList<examples.MinFinder.T> tList37 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList37, tArray36);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList37);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList37);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) (short) 100);
        minFinder41.add(t44);
        int int46 = t44.getVal();
        minFinder0.chval(t44, (int) (byte) -1);
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertNotNull(tArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 100 + "'", int46 == 100);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 100 + "'", int49 == 100);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder2.chval(t64, (int) (short) 10);
        java.lang.Class<?> wildcardClass68 = minFinder2.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass68);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = minFinder27.findMin();
        examples.MinFinder.T t33 = minFinder27.findMin();
        examples.MinFinder.T t34 = minFinder27.findMin();
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t38 = minFinder35.findMin();
        minFinder35.clear();
        examples.MinFinder.T t41 = new examples.MinFinder.T((-3));
        int int42 = t41.getVal();
        int int43 = t41.getVal();
        int int44 = t41.getVal();
        int int45 = t41.getVal();
        minFinder35.chval(t41, 0);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        int int51 = t50.getVal();
        minFinder48.chval(t50, (-100));
        minFinder35.chval(t50, 0);
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        java.lang.Object obj62 = null;
        boolean boolean63 = t57.equals(obj62);
        minFinder35.add(t57);
        int int65 = t57.getVal();
        int int66 = t57.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder27.chval(t57, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertNotNull(t32);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNotNull(t34);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-9) + "'", int51 == (-9));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertNull(t44);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass9 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        int int48 = t43.getVal();
        int int49 = t43.getVal();
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        int int57 = t51.getVal();
        examples.MinFinder.T[] tArray58 = new examples.MinFinder.T[] { t21, t23, t30, t35, t41, t43, t51 };
        java.util.ArrayList<examples.MinFinder.T> tList59 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList59, tArray58);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList59);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList59);
        examples.MinFinder.T t64 = minFinder63.findMin();
        examples.MinFinder.T t65 = minFinder63.findMin();
        boolean boolean66 = t14.equals((java.lang.Object) minFinder63);
        examples.MinFinder.T t67 = minFinder63.findMin();
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t73 = minFinder68.findMin();
        examples.MinFinder.T t74 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T((-3));
        int int78 = t77.getVal();
        int int79 = t77.getVal();
        minFinder68.add(t77);
        minFinder68.clear();
        examples.MinFinder.T t83 = new examples.MinFinder.T((int) 'a');
        minFinder68.add(t83);
        boolean boolean85 = t67.equals((java.lang.Object) minFinder68);
        examples.MinFinder.T t86 = minFinder68.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(tArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(t64);
        org.junit.Assert.assertNotNull(t65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t73);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(t86);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        minFinder19.add(t28);
        minFinder19.clear();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-1));
        minFinder19.chval(t34, (int) (byte) 1);
        minFinder0.add(t34);
        minFinder0.clear();
        examples.MinFinder.T t39 = minFinder0.findMin();
        examples.MinFinder.T t40 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t40);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t28 = minFinder25.findMin();
        minFinder25.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        minFinder25.chval(t31, 0);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t40 = new examples.MinFinder.T((int) (short) 0);
        int int41 = t40.getVal();
        minFinder25.chval(t40, (-5));
        boolean boolean44 = t19.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) ' ');
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-9));
        int int63 = t62.getVal();
        minFinder60.chval(t62, (-100));
        minFinder47.chval(t62, 0);
        boolean boolean68 = t46.equals((java.lang.Object) t62);
        boolean boolean69 = t19.equals((java.lang.Object) t46);
        java.lang.Class<?> wildcardClass70 = t19.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-9) + "'", int63 == (-9));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        minFinder0.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        int int52 = t47.getVal();
        int int53 = t47.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T[] tArray62 = new examples.MinFinder.T[] { t25, t27, t34, t39, t45, t47, t55 };
        java.util.ArrayList<examples.MinFinder.T> tList63 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList63, tArray62);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList63);
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        minFinder65.add(t67);
        minFinder0.add(t67);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertNotNull(tArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        examples.MinFinder.T t40 = new examples.MinFinder.T(3);
        minFinder37.chval(t40, (int) (short) -1);
        minFinder31.add(t40);
        minFinder31.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((int) (short) 0);
        minFinder31.chval(t46, (int) '4');
        minFinder17.add(t46);
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        boolean boolean56 = t46.equals((java.lang.Object) t51);
        int int57 = t51.getVal();
        minFinder0.add(t51);
        java.lang.Class<?> wildcardClass59 = t51.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass59);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder.T t33 = null;
        minFinder32.chval(t33, (-1));
        examples.MinFinder.T t36 = minFinder32.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t36);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        int int14 = t10.getVal();
        minFinder4.chval(t10, 0);
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        boolean boolean20 = t18.equals((java.lang.Object) (-1));
        int int21 = t18.getVal();
        minFinder4.chval(t18, 0);
        minFinder0.add(t18);
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        examples.MinFinder.T[] tArray47 = new examples.MinFinder.T[] { t26, t28, t35, t37, t45 };
        java.util.ArrayList<examples.MinFinder.T> tList48 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList48, tArray47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList48);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList48);
        minFinder57.clear();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        int int63 = t62.getVal();
        int int64 = t62.getVal();
        int int65 = t62.getVal();
        int int66 = t62.getVal();
        int int67 = t62.getVal();
        examples.MinFinder.T t69 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t71 = new examples.MinFinder.T((-3));
        int int72 = t71.getVal();
        int int73 = t71.getVal();
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        int int76 = t71.getVal();
        int int77 = t71.getVal();
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) 'a');
        int int80 = t79.getVal();
        examples.MinFinder.T[] tArray81 = new examples.MinFinder.T[] { t60, t62, t69, t71, t79 };
        java.util.ArrayList<examples.MinFinder.T> tList82 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList82, tArray81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder85 = new examples.MinFinder(tList82);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList82);
        examples.MinFinder.T t87 = minFinder86.findMin();
        minFinder57.chval(t87, 10);
        minFinder0.add(t87);
        examples.MinFinder minFinder91 = new examples.MinFinder();
        examples.MinFinder.T t92 = minFinder91.findMin();
        examples.MinFinder.T t94 = new examples.MinFinder.T(3);
        minFinder91.chval(t94, (int) (short) -1);
        minFinder0.add(t94);
        int int98 = t94.getVal();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNotNull(tArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
        org.junit.Assert.assertNotNull(tArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(t87);
        org.junit.Assert.assertNull(t92);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 3 + "'", int98 == 3);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        minFinder37.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        minFinder37.add(t42);
        minFinder31.chval(t42, 5);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        examples.MinFinder.T t50 = new examples.MinFinder.T(3);
        minFinder47.chval(t50, (int) (short) -1);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        minFinder47.add(t56);
        examples.MinFinder.T t61 = new examples.MinFinder.T((-9));
        minFinder47.add(t61);
        minFinder31.chval(t61, (-10));
        boolean boolean65 = t30.equals((java.lang.Object) t61);
        examples.MinFinder.T t67 = new examples.MinFinder.T(8);
        boolean boolean68 = t61.equals((java.lang.Object) 8);
        minFinder26.add(t61);
        int int70 = t61.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t27);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-9) + "'", int70 == (-9));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        int int16 = t13.getVal();
        int int17 = t13.getVal();
        int int18 = t13.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        int int23 = t22.getVal();
        int int24 = t22.getVal();
        int int25 = t22.getVal();
        int int26 = t22.getVal();
        int int27 = t22.getVal();
        int int28 = t22.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) 'a');
        int int31 = t30.getVal();
        examples.MinFinder.T[] tArray32 = new examples.MinFinder.T[] { t11, t13, t20, t22, t30 };
        java.util.ArrayList<examples.MinFinder.T> tList33 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList33, tArray32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList33);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList33);
        examples.MinFinder.T t41 = new examples.MinFinder.T((int) 'a');
        minFinder39.add(t41);
        boolean boolean44 = t41.equals((java.lang.Object) 8.4d);
        minFinder0.chval(t41, 1);
        examples.MinFinder minFinder47 = new examples.MinFinder();
        examples.MinFinder.T t48 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t50 = minFinder47.findMin();
        minFinder47.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((-3));
        int int54 = t53.getVal();
        int int55 = t53.getVal();
        int int56 = t53.getVal();
        int int57 = t53.getVal();
        minFinder47.chval(t53, 0);
        minFinder47.clear();
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        minFinder61.clear();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) (short) 0);
        minFinder61.chval(t76, (int) '4');
        minFinder47.add(t76);
        examples.MinFinder.T t81 = new examples.MinFinder.T((-3));
        int int82 = t81.getVal();
        int int83 = t81.getVal();
        int int84 = t81.getVal();
        int int85 = t81.getVal();
        boolean boolean86 = t76.equals((java.lang.Object) t81);
        minFinder0.chval(t81, 0);
        examples.MinFinder.T t90 = new examples.MinFinder.T((-9));
        boolean boolean92 = t90.equals((java.lang.Object) 6);
        minFinder0.add(t90);
        minFinder0.clear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 97 + "'", int31 == 97);
        org.junit.Assert.assertNotNull(tArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder.T t42 = minFinder41.findMin();
        examples.MinFinder.T t44 = new examples.MinFinder.T(0);
        java.lang.Object obj45 = null;
        boolean boolean46 = t44.equals(obj45);
        examples.MinFinder.T t48 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        int int55 = t50.getVal();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        examples.MinFinder.T[] tArray69 = new examples.MinFinder.T[] { t48, t50, t57, t59, t67 };
        java.util.ArrayList<examples.MinFinder.T> tList70 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList70, tArray69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList70);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList70);
        minFinder79.clear();
        boolean boolean81 = t44.equals((java.lang.Object) minFinder79);
        // The following exception was thrown during execution in test generation
        try {
            minFinder41.chval(t44, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(tArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder minFinder11 = new examples.MinFinder();
        examples.MinFinder.T t12 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t14 = minFinder11.findMin();
        minFinder11.clear();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        minFinder11.chval(t17, 0);
        minFinder0.add(t17);
        java.lang.Class<?> wildcardClass25 = t17.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        examples.MinFinder.T t1 = new examples.MinFinder.T(1);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((int) 'a');
        int int8 = t7.getVal();
        minFinder2.add(t7);
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder2.add(t11);
        boolean boolean13 = t1.equals((java.lang.Object) t11);
        int int14 = t11.getVal();
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t18 = minFinder15.findMin();
        minFinder15.clear();
        examples.MinFinder.T t20 = minFinder15.findMin();
        examples.MinFinder.T t21 = minFinder15.findMin();
        minFinder15.clear();
        minFinder15.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        int int45 = t44.getVal();
        examples.MinFinder.T[] tArray46 = new examples.MinFinder.T[] { t25, t27, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList47 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList47, tArray46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList47);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList47);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        int int75 = t69.getVal();
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) 'a');
        int int78 = t77.getVal();
        examples.MinFinder.T[] tArray79 = new examples.MinFinder.T[] { t58, t60, t67, t69, t77 };
        java.util.ArrayList<examples.MinFinder.T> tList80 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList80, tArray79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList80);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList80);
        examples.MinFinder.T t85 = minFinder84.findMin();
        int int86 = t85.getVal();
        minFinder56.add(t85);
        examples.MinFinder.T t88 = minFinder56.findMin();
        int int89 = t88.getVal();
        minFinder15.add(t88);
        examples.MinFinder.T t91 = minFinder15.findMin();
        examples.MinFinder.T t92 = minFinder15.findMin();
        int int93 = t92.getVal();
        boolean boolean94 = t11.equals((java.lang.Object) int93);
        int int95 = t11.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 97 + "'", int45 == 97);
        org.junit.Assert.assertNotNull(tArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertNotNull(tArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(t85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-3) + "'", int86 == (-3));
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-3) + "'", int89 == (-3));
        org.junit.Assert.assertNotNull(t91);
        org.junit.Assert.assertNotNull(t92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        minFinder2.clear();
        examples.MinFinder.T t18 = minFinder2.findMin();
        minFinder2.clear();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t18);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T(3);
        minFinder13.chval(t16, (int) (short) -1);
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        examples.MinFinder.T t22 = new examples.MinFinder.T(3);
        minFinder19.chval(t22, (int) (short) -1);
        minFinder13.add(t22);
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        int int28 = t27.getVal();
        minFinder13.add(t27);
        minFinder0.add(t27);
        java.lang.Class<?> wildcardClass31 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 97 + "'", int28 == 97);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        int int32 = t30.getVal();
        java.lang.Class<?> wildcardClass33 = t30.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        minFinder0.add(t14);
        minFinder0.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t19 = new examples.MinFinder.T(100);
        minFinder17.add(t19);
        minFinder0.chval(t19, (int) '#');
        minFinder0.clear();
        examples.MinFinder.T t24 = minFinder0.findMin();
        examples.MinFinder.T t25 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        boolean boolean26 = t24.equals((java.lang.Object) (-1));
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList50);
        boolean boolean58 = t24.equals((java.lang.Object) minFinder57);
        boolean boolean59 = t19.equals((java.lang.Object) t24);
        int int60 = t19.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder.T t88 = minFinder87.findMin();
        minFinder87.clear();
        minFinder87.clear();
        examples.MinFinder.T t91 = minFinder87.findMin();
        examples.MinFinder.T t93 = new examples.MinFinder.T(100);
        minFinder87.add(t93);
        boolean boolean95 = t19.equals((java.lang.Object) minFinder87);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t88);
        org.junit.Assert.assertNull(t91);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 0);
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t4 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t6 = minFinder3.findMin();
        minFinder3.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        minFinder3.chval(t9, 0);
        minFinder3.clear();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        examples.MinFinder.T t20 = new examples.MinFinder.T(3);
        minFinder17.chval(t20, (int) (short) -1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        examples.MinFinder.T t26 = new examples.MinFinder.T(3);
        minFinder23.chval(t26, (int) (short) -1);
        minFinder17.add(t26);
        minFinder17.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) (short) 0);
        minFinder17.chval(t32, (int) '4');
        minFinder3.add(t32);
        int int36 = t32.getVal();
        examples.MinFinder minFinder37 = new examples.MinFinder();
        examples.MinFinder.T t38 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t40 = minFinder37.findMin();
        minFinder37.clear();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        int int44 = t43.getVal();
        int int45 = t43.getVal();
        int int46 = t43.getVal();
        int int47 = t43.getVal();
        minFinder37.chval(t43, 0);
        boolean boolean50 = t32.equals((java.lang.Object) 0);
        int int51 = t32.getVal();
        int int52 = t32.getVal();
        boolean boolean53 = t1.equals((java.lang.Object) t32);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNull(t4);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        int int34 = t33.getVal();
        minFinder18.chval(t33, (-5));
        minFinder0.chval(t33, 0);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        examples.MinFinder.T t53 = new examples.MinFinder.T((-9));
        minFinder39.add(t53);
        examples.MinFinder.T t55 = minFinder39.findMin();
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        minFinder56.clear();
        examples.MinFinder.T t59 = minFinder56.findMin();
        minFinder56.clear();
        minFinder56.clear();
        examples.MinFinder.T t63 = new examples.MinFinder.T((-9));
        int int64 = t63.getVal();
        minFinder56.chval(t63, 10);
        int int67 = t63.getVal();
        minFinder39.add(t63);
        examples.MinFinder.T t69 = minFinder39.findMin();
        minFinder0.chval(t69, (int) (short) 100);
        java.lang.Class<?> wildcardClass72 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-9) + "'", int67 == (-9));
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) (short) 0);
        int int20 = t19.getVal();
        minFinder0.chval(t19, 100);
        examples.MinFinder.T t23 = minFinder0.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(0);
        java.lang.Object obj26 = null;
        boolean boolean27 = t25.equals(obj26);
        minFinder0.chval(t25, (int) '#');
        examples.MinFinder.T t31 = new examples.MinFinder.T((-6));
        minFinder0.chval(t31, (int) (short) 1);
        int int34 = t31.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-6) + "'", int34 == (-6));
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        boolean boolean66 = t52.equals((java.lang.Object) minFinder53);
        minFinder53.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder53.chval(t69, 1);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-1));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        boolean boolean77 = t69.equals((java.lang.Object) int76);
        minFinder29.add(t69);
        examples.MinFinder.T t79 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(t79);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList56);
        java.lang.Class<?> wildcardClass74 = minFinder73.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList39);
        examples.MinFinder.T t47 = minFinder46.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(t47);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder.T t37 = minFinder36.findMin();
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        minFinder33.clear();
        minFinder33.clear();
        minFinder33.clear();
        boolean boolean38 = t24.equals((java.lang.Object) minFinder33);
        examples.MinFinder.T t40 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder41 = new examples.MinFinder();
        examples.MinFinder.T t42 = minFinder41.findMin();
        minFinder41.clear();
        examples.MinFinder.T t44 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        boolean boolean47 = t40.equals((java.lang.Object) minFinder41);
        int int48 = t40.getVal();
        minFinder33.chval(t40, 97);
        int int51 = t40.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 10 + "'", int51 == 10);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t37 = minFinder34.findMin();
        minFinder34.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder34.chval(t40, 0);
        minFinder34.clear();
        examples.MinFinder.T t48 = minFinder34.findMin();
        minFinder34.clear();
        minFinder34.clear();
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        examples.MinFinder.T t54 = minFinder51.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-1));
        minFinder51.chval(t56, 100);
        boolean boolean60 = t56.equals((java.lang.Object) 5L);
        minFinder34.add(t56);
        examples.MinFinder.T t62 = minFinder34.findMin();
        int int63 = t62.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T(3);
        examples.MinFinder.T t67 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        int int73 = t69.getVal();
        int int74 = t69.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        int int81 = t78.getVal();
        int int82 = t78.getVal();
        int int83 = t78.getVal();
        int int84 = t78.getVal();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        int int87 = t86.getVal();
        examples.MinFinder.T[] tArray88 = new examples.MinFinder.T[] { t67, t69, t76, t78, t86 };
        java.util.ArrayList<examples.MinFinder.T> tList89 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList89, tArray88);
        examples.MinFinder minFinder91 = new examples.MinFinder(tList89);
        examples.MinFinder minFinder92 = new examples.MinFinder(tList89);
        java.lang.Class<?> wildcardClass93 = tList89.getClass();
        boolean boolean94 = t65.equals((java.lang.Object) tList89);
        int int95 = t65.getVal();
        int int96 = t65.getVal();
        boolean boolean97 = t62.equals((java.lang.Object) int96);
        minFinder0.add(t62);
        java.lang.Class<?> wildcardClass99 = t62.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertNull(t48);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-3) + "'", int84 == (-3));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 97 + "'", int87 == 97);
        org.junit.Assert.assertNotNull(tArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(wildcardClass93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 3 + "'", int95 == 3);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass18 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T(3);
        minFinder14.chval(t17, (int) (short) -1);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) (short) 0);
        minFinder14.chval(t29, (int) '4');
        minFinder0.add(t29);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        boolean boolean39 = t29.equals((java.lang.Object) t34);
        boolean boolean41 = t34.equals((java.lang.Object) (byte) 0);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) (-1));
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList69);
        boolean boolean79 = t43.equals((java.lang.Object) minFinder78);
        examples.MinFinder minFinder80 = new examples.MinFinder();
        examples.MinFinder.T t81 = minFinder80.findMin();
        examples.MinFinder.T t83 = new examples.MinFinder.T(3);
        minFinder80.chval(t83, (int) (short) -1);
        boolean boolean86 = t43.equals((java.lang.Object) minFinder80);
        examples.MinFinder.T t87 = minFinder80.findMin();
        examples.MinFinder.T t89 = new examples.MinFinder.T((-3));
        int int90 = t89.getVal();
        int int91 = t89.getVal();
        int int92 = t89.getVal();
        int int93 = t89.getVal();
        minFinder80.add(t89);
        boolean boolean95 = t34.equals((java.lang.Object) t89);
        int int96 = t34.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(t81);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(t87);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + (-3) + "'", int91 == (-3));
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-3) + "'", int92 == (-3));
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-3) + "'", int93 == (-3));
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-3) + "'", int96 == (-3));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        minFinder41.clear();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t47 = minFinder44.findMin();
        minFinder44.clear();
        examples.MinFinder.T t49 = minFinder44.findMin();
        minFinder44.clear();
        minFinder44.clear();
        examples.MinFinder.T t52 = minFinder44.findMin();
        examples.MinFinder.T t53 = null;
        minFinder44.chval(t53, (-9));
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        int int66 = t61.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t70 = new examples.MinFinder.T((-3));
        int int71 = t70.getVal();
        int int72 = t70.getVal();
        int int73 = t70.getVal();
        int int74 = t70.getVal();
        int int75 = t70.getVal();
        int int76 = t70.getVal();
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        int int79 = t78.getVal();
        examples.MinFinder.T[] tArray80 = new examples.MinFinder.T[] { t59, t61, t68, t70, t78 };
        java.util.ArrayList<examples.MinFinder.T> tList81 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList81, tArray80);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList81);
        examples.MinFinder minFinder84 = new examples.MinFinder(tList81);
        java.lang.Class<?> wildcardClass85 = tList81.getClass();
        boolean boolean86 = t57.equals((java.lang.Object) tList81);
        int int87 = t57.getVal();
        minFinder44.chval(t57, (-9));
        minFinder41.chval(t57, (-8));
        examples.MinFinder.T t92 = minFinder41.findMin();
        minFinder41.clear();
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertNotNull(tArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 3 + "'", int87 == 3);
        org.junit.Assert.assertNull(t92);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        int int11 = t6.getVal();
        int int12 = t6.getVal();
        minFinder0.chval(t6, (int) ' ');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        int int44 = t38.getVal();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T[] tArray53 = new examples.MinFinder.T[] { t16, t18, t25, t30, t36, t38, t46 };
        java.util.ArrayList<examples.MinFinder.T> tList54 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList54, tArray53);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList54);
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        minFinder56.add(t58);
        examples.MinFinder.T t60 = minFinder56.findMin();
        int int61 = t60.getVal();
        boolean boolean62 = t6.equals((java.lang.Object) t60);
        int int63 = t6.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertNotNull(tArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(t60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t18 = minFinder13.findMin();
        minFinder13.clear();
        minFinder13.clear();
        minFinder13.clear();
        boolean boolean22 = t9.equals((java.lang.Object) minFinder13);
        minFinder13.clear();
        examples.MinFinder.T t24 = minFinder13.findMin();
        examples.MinFinder.T t25 = minFinder13.findMin();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        int int33 = t28.getVal();
        minFinder26.chval(t28, (int) ' ');
        examples.MinFinder.T t37 = new examples.MinFinder.T((-9));
        boolean boolean39 = t37.equals((java.lang.Object) 6);
        minFinder26.chval(t37, 97);
        int int42 = t37.getVal();
        minFinder13.chval(t37, 0);
        java.lang.Class<?> wildcardClass45 = t37.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-9) + "'", int42 == (-9));
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        examples.MinFinder.T t1 = new examples.MinFinder.T(10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        minFinder2.clear();
        boolean boolean8 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t9 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-9));
        int int29 = t28.getVal();
        minFinder26.chval(t28, (-100));
        minFinder13.chval(t28, 0);
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        java.lang.Object obj40 = null;
        boolean boolean41 = t35.equals(obj40);
        minFinder13.add(t35);
        boolean boolean43 = t12.equals((java.lang.Object) t35);
        int int44 = t35.getVal();
        int int45 = t35.getVal();
        minFinder2.chval(t35, 8);
        minFinder2.clear();
        examples.MinFinder.T t49 = minFinder2.findMin();
        examples.MinFinder.T t50 = minFinder2.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-9) + "'", int29 == (-9));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertNull(t50);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        boolean boolean70 = t1.equals((java.lang.Object) (byte) 100);
        int int71 = t1.getVal();
        java.lang.Class<?> wildcardClass72 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 7 + "'", int71 == 7);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) 'a');
        int int35 = t34.getVal();
        minFinder20.add(t34);
        minFinder0.add(t34);
        minFinder0.clear();
        examples.MinFinder.T t40 = new examples.MinFinder.T((-1));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        minFinder0.chval(t40, 9);
        int int47 = t40.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 97 + "'", int35 == 97);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        examples.MinFinder.T t33 = minFinder29.findMin();
        examples.MinFinder.T t34 = null;
        minFinder29.chval(t34, (-9));
        minFinder29.clear();
        examples.MinFinder.T t38 = minFinder29.findMin();
        examples.MinFinder.T t39 = minFinder29.findMin();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        minFinder40.add(t54);
        examples.MinFinder.T t60 = new examples.MinFinder.T((int) 'a');
        int int61 = t60.getVal();
        boolean boolean62 = t54.equals((java.lang.Object) int61);
        minFinder29.chval(t54, (int) (short) 100);
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertNull(t38);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 97 + "'", int61 == 97);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-9));
        int int16 = t15.getVal();
        minFinder13.chval(t15, (-100));
        minFinder0.chval(t15, 0);
        int int21 = t15.getVal();
        int int22 = t15.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder25 = new examples.MinFinder();
        examples.MinFinder.T t26 = minFinder25.findMin();
        examples.MinFinder.T t28 = new examples.MinFinder.T(3);
        minFinder25.chval(t28, (int) (short) -1);
        examples.MinFinder minFinder31 = new examples.MinFinder();
        examples.MinFinder.T t32 = minFinder31.findMin();
        examples.MinFinder.T t34 = new examples.MinFinder.T(3);
        minFinder31.chval(t34, (int) (short) -1);
        minFinder25.add(t34);
        boolean boolean38 = t24.equals((java.lang.Object) minFinder25);
        examples.MinFinder.T t39 = minFinder25.findMin();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        minFinder40.clear();
        boolean boolean54 = t39.equals((java.lang.Object) minFinder40);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t58 = minFinder55.findMin();
        minFinder55.clear();
        examples.MinFinder.T t61 = new examples.MinFinder.T((-3));
        int int62 = t61.getVal();
        int int63 = t61.getVal();
        int int64 = t61.getVal();
        int int65 = t61.getVal();
        minFinder55.chval(t61, 0);
        examples.MinFinder.T t69 = new examples.MinFinder.T((-3));
        int int70 = t69.getVal();
        int int71 = t69.getVal();
        int int72 = t69.getVal();
        minFinder55.add(t69);
        boolean boolean74 = t39.equals((java.lang.Object) minFinder55);
        minFinder55.clear();
        boolean boolean76 = t15.equals((java.lang.Object) minFinder55);
        minFinder55.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-9) + "'", int16 == (-9));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-9) + "'", int21 == (-9));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-9) + "'", int22 == (-9));
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t32);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        int int43 = t38.getVal();
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        int int51 = t50.getVal();
        int int52 = t50.getVal();
        int int53 = t50.getVal();
        int int54 = t50.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        int int71 = t66.getVal();
        int int72 = t66.getVal();
        examples.MinFinder.T[] tArray73 = new examples.MinFinder.T[] { t36, t38, t45, t50, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList74 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList74, tArray73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList74);
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        minFinder76.add(t78);
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t82 = minFinder76.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T((-7));
        minFinder76.add(t84);
        minFinder0.add(t84);
        examples.MinFinder.T t87 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertNotNull(tArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNotNull(t87);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        minFinder29.add(t31);
        minFinder29.clear();
        minFinder29.clear();
        examples.MinFinder.T t35 = minFinder29.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t35);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-9));
        int int46 = t45.getVal();
        minFinder43.add(t45);
        minFinder43.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-9) + "'", int46 == (-9));
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList23);
        minFinder39.clear();
        minFinder39.clear();
        minFinder39.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        examples.MinFinder.T t12 = minFinder0.findMin();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        int int29 = t28.getVal();
        int int30 = t28.getVal();
        int int31 = t28.getVal();
        int int32 = t28.getVal();
        examples.MinFinder.T t34 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        int int42 = t36.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T[] tArray51 = new examples.MinFinder.T[] { t14, t16, t23, t28, t34, t36, t44 };
        java.util.ArrayList<examples.MinFinder.T> tList52 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList52, tArray51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList52);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        minFinder54.add(t56);
        examples.MinFinder.T t58 = minFinder54.findMin();
        minFinder0.add(t58);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        minFinder60.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((int) (short) 0);
        minFinder60.chval(t75, (int) '4');
        examples.MinFinder.T t79 = new examples.MinFinder.T((int) (short) 0);
        int int80 = t79.getVal();
        minFinder60.chval(t79, 100);
        boolean boolean83 = t58.equals((java.lang.Object) t79);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNotNull(tArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(t58);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        examples.MinFinder.T t66 = minFinder62.findMin();
        minFinder62.clear();
        minFinder62.clear();
        boolean boolean69 = t17.equals((java.lang.Object) minFinder62);
        minFinder62.clear();
        examples.MinFinder.T t71 = minFinder62.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(t66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(t71);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder15.chval(t18, (int) (short) -1);
        examples.MinFinder minFinder21 = new examples.MinFinder();
        examples.MinFinder.T t22 = minFinder21.findMin();
        examples.MinFinder.T t24 = new examples.MinFinder.T(3);
        minFinder21.chval(t24, (int) (short) -1);
        minFinder15.add(t24);
        boolean boolean28 = t14.equals((java.lang.Object) minFinder15);
        minFinder15.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder15.chval(t31, 1);
        minFinder0.add(t31);
        int int35 = t31.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) (byte) 100);
        boolean boolean39 = t37.equals((java.lang.Object) 'a');
        int int40 = t37.getVal();
        boolean boolean41 = t31.equals((java.lang.Object) t37);
        java.lang.Class<?> wildcardClass42 = t31.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(wildcardClass42);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        minFinder2.clear();
        examples.MinFinder.T t18 = new examples.MinFinder.T(3);
        minFinder2.chval(t18, 1);
        examples.MinFinder.T t21 = minFinder2.findMin();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        minFinder22.clear();
        minFinder22.clear();
        minFinder22.clear();
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t29 = minFinder26.findMin();
        minFinder26.clear();
        examples.MinFinder.T t32 = new examples.MinFinder.T((-3));
        int int33 = t32.getVal();
        int int34 = t32.getVal();
        int int35 = t32.getVal();
        int int36 = t32.getVal();
        minFinder26.chval(t32, 0);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        boolean boolean42 = t40.equals((java.lang.Object) (-1));
        int int43 = t40.getVal();
        minFinder26.chval(t40, 0);
        minFinder22.add(t40);
        minFinder2.chval(t40, 8);
        java.lang.Class<?> wildcardClass49 = t40.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        boolean boolean33 = t31.equals((java.lang.Object) (-1));
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList57);
        boolean boolean67 = t31.equals((java.lang.Object) minFinder66);
        boolean boolean68 = t29.equals((java.lang.Object) boolean67);
        examples.MinFinder minFinder69 = new examples.MinFinder();
        examples.MinFinder.T t70 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t72 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t74 = minFinder69.findMin();
        examples.MinFinder.T t75 = minFinder69.findMin();
        minFinder69.clear();
        examples.MinFinder.T t78 = new examples.MinFinder.T((-3));
        int int79 = t78.getVal();
        int int80 = t78.getVal();
        minFinder69.add(t78);
        boolean boolean82 = t29.equals((java.lang.Object) t78);
        examples.MinFinder minFinder83 = new examples.MinFinder();
        examples.MinFinder.T t84 = minFinder83.findMin();
        minFinder83.clear();
        minFinder83.clear();
        examples.MinFinder.T t88 = new examples.MinFinder.T((int) 'a');
        int int89 = t88.getVal();
        minFinder83.add(t88);
        minFinder83.clear();
        examples.MinFinder.T t93 = new examples.MinFinder.T((int) 'a');
        minFinder83.add(t93);
        examples.MinFinder.T t95 = minFinder83.findMin();
        boolean boolean96 = t29.equals((java.lang.Object) t95);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t75);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNull(t84);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 97 + "'", int89 == 97);
        org.junit.Assert.assertNotNull(t95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        examples.MinFinder.T t35 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T[] tArray75 = new examples.MinFinder.T[] { t38, t40, t47, t52, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList76 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList76, tArray75);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList76);
        examples.MinFinder minFinder80 = new examples.MinFinder(tList76);
        examples.MinFinder.T t81 = minFinder80.findMin();
        examples.MinFinder.T t82 = minFinder80.findMin();
        minFinder0.chval(t82, (-8));
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(tArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertNotNull(t82);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        examples.MinFinder.T t21 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNotNull(t21);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder29 = new examples.MinFinder();
        examples.MinFinder.T t30 = minFinder29.findMin();
        examples.MinFinder.T t32 = new examples.MinFinder.T(3);
        minFinder29.chval(t32, (int) (short) -1);
        examples.MinFinder minFinder35 = new examples.MinFinder();
        examples.MinFinder.T t36 = minFinder35.findMin();
        examples.MinFinder.T t38 = new examples.MinFinder.T(3);
        minFinder35.chval(t38, (int) (short) -1);
        minFinder29.add(t38);
        boolean boolean42 = t28.equals((java.lang.Object) minFinder29);
        examples.MinFinder.T t43 = minFinder29.findMin();
        minFinder25.add(t43);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder45.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        minFinder52.add(t66);
        examples.MinFinder.T t69 = minFinder52.findMin();
        minFinder45.chval(t69, (-1));
        boolean boolean72 = t43.equals((java.lang.Object) (-1));
        java.lang.Class<?> wildcardClass73 = t43.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertNull(t36);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(t43);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(t69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t78 = null;
        minFinder0.add(t78);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) (byte) 1);
        minFinder0.chval(t12, 4);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t16 = minFinder15.findMin();
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        examples.MinFinder.T[] tArray39 = new examples.MinFinder.T[] { t18, t20, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList40 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList40, tArray39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList40);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList40);
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t46 = minFinder44.findMin();
        minFinder15.add(t46);
        examples.MinFinder.T t48 = minFinder15.findMin();
        minFinder0.add(t48);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertNotNull(tArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(t45);
        org.junit.Assert.assertNotNull(t46);
        org.junit.Assert.assertNotNull(t48);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder minFinder43 = new examples.MinFinder();
        examples.MinFinder.T t44 = minFinder43.findMin();
        minFinder43.clear();
        minFinder43.clear();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        minFinder43.add(t48);
        examples.MinFinder.T t52 = new examples.MinFinder.T(1);
        boolean boolean53 = t48.equals((java.lang.Object) t52);
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        minFinder41.chval(t52, (int) 'a');
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        int int65 = t59.getVal();
        boolean boolean67 = t59.equals((java.lang.Object) 0.0f);
        java.lang.Class<?> wildcardClass68 = t59.getClass();
        boolean boolean69 = t52.equals((java.lang.Object) t59);
        int int70 = t59.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t13 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t71 = minFinder66.findMin();
        examples.MinFinder.T t72 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        minFinder66.add(t75);
        minFinder0.add(t75);
        examples.MinFinder.T t80 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass81 = t80.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        boolean boolean3 = t1.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T(3);
        minFinder4.chval(t7, (int) (short) -1);
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        int int17 = t11.getVal();
        boolean boolean19 = t11.equals((java.lang.Object) (-8.7d));
        minFinder4.chval(t11, (-100));
        boolean boolean22 = t1.equals((java.lang.Object) t11);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        minFinder23.chval(t29, 0);
        minFinder23.clear();
        examples.MinFinder.T t37 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t42 = minFinder39.findMin();
        minFinder39.clear();
        examples.MinFinder.T t44 = minFinder39.findMin();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        boolean boolean48 = t46.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        examples.MinFinder.T t52 = new examples.MinFinder.T(3);
        minFinder49.chval(t52, (int) (short) -1);
        examples.MinFinder.T t56 = new examples.MinFinder.T((-3));
        int int57 = t56.getVal();
        int int58 = t56.getVal();
        int int59 = t56.getVal();
        int int60 = t56.getVal();
        int int61 = t56.getVal();
        int int62 = t56.getVal();
        boolean boolean64 = t56.equals((java.lang.Object) (-8.7d));
        minFinder49.chval(t56, (-100));
        boolean boolean67 = t46.equals((java.lang.Object) t56);
        minFinder39.add(t56);
        examples.MinFinder.T t70 = new examples.MinFinder.T((int) (short) -1);
        minFinder39.add(t70);
        minFinder23.add(t70);
        boolean boolean73 = t11.equals((java.lang.Object) minFinder23);
        java.lang.Class<?> wildcardClass74 = minFinder23.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t42);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(wildcardClass74);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        examples.MinFinder minFinder3 = new examples.MinFinder();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        minFinder3.chval(t5, (int) ' ');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-9));
        boolean boolean16 = t14.equals((java.lang.Object) 6);
        minFinder3.chval(t14, 97);
        boolean boolean19 = t1.equals((java.lang.Object) t14);
        int int20 = t1.getVal();
        boolean boolean22 = t1.equals((java.lang.Object) 1);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t28 = minFinder23.findMin();
        examples.MinFinder.T t29 = minFinder23.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        minFinder33.chval(t35, (int) ' ');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-9));
        boolean boolean46 = t44.equals((java.lang.Object) 6);
        minFinder33.chval(t44, 97);
        boolean boolean49 = t31.equals((java.lang.Object) t44);
        minFinder23.add(t31);
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        boolean boolean59 = t52.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder60.clear();
        examples.MinFinder.T t74 = minFinder60.findMin();
        examples.MinFinder.T t76 = new examples.MinFinder.T((-3));
        boolean boolean78 = t76.equals((java.lang.Object) ' ');
        minFinder60.add(t76);
        boolean boolean80 = t52.equals((java.lang.Object) t76);
        minFinder23.add(t76);
        boolean boolean82 = t1.equals((java.lang.Object) t76);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder();
        examples.MinFinder.T t31 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t33 = minFinder30.findMin();
        minFinder30.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        minFinder30.chval(t36, 0);
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) (-1));
        int int47 = t44.getVal();
        minFinder30.chval(t44, 0);
        minFinder29.add(t44);
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        boolean boolean66 = t52.equals((java.lang.Object) minFinder53);
        minFinder53.clear();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder53.chval(t69, 1);
        examples.MinFinder.T t73 = new examples.MinFinder.T((-1));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        boolean boolean77 = t69.equals((java.lang.Object) int76);
        minFinder29.add(t69);
        minFinder29.clear();
        minFinder29.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(t31);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-9));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        examples.MinFinder minFinder4 = new examples.MinFinder();
        examples.MinFinder.T t5 = minFinder4.findMin();
        minFinder4.clear();
        examples.MinFinder.T t7 = minFinder4.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-1));
        minFinder4.chval(t9, 100);
        examples.MinFinder.T t13 = new examples.MinFinder.T((-3));
        int int14 = t13.getVal();
        int int15 = t13.getVal();
        minFinder4.add(t13);
        minFinder4.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        boolean boolean21 = t19.equals((java.lang.Object) (-1));
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        int int30 = t25.getVal();
        examples.MinFinder.T t32 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        int int35 = t34.getVal();
        int int36 = t34.getVal();
        int int37 = t34.getVal();
        int int38 = t34.getVal();
        int int39 = t34.getVal();
        int int40 = t34.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) 'a');
        int int43 = t42.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t23, t25, t32, t34, t42 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList45);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList45);
        boolean boolean55 = t19.equals((java.lang.Object) minFinder54);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        boolean boolean62 = t19.equals((java.lang.Object) minFinder56);
        minFinder4.chval(t19, 97);
        minFinder4.clear();
        boolean boolean66 = t1.equals((java.lang.Object) minFinder4);
        examples.MinFinder.T t67 = minFinder4.findMin();
        minFinder4.clear();
        minFinder4.clear();
        examples.MinFinder.T t70 = minFinder4.findMin();
        examples.MinFinder.T t71 = minFinder4.findMin();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-9) + "'", int2 == (-9));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 97 + "'", int43 == 97);
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t70);
        org.junit.Assert.assertNull(t71);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        int int24 = t19.getVal();
        boolean boolean26 = t19.equals((java.lang.Object) 0.0d);
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t30 = minFinder27.findMin();
        minFinder27.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        int int37 = t33.getVal();
        minFinder27.chval(t33, 0);
        minFinder27.clear();
        examples.MinFinder.T t41 = minFinder27.findMin();
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        boolean boolean45 = t43.equals((java.lang.Object) ' ');
        minFinder27.add(t43);
        boolean boolean47 = t19.equals((java.lang.Object) t43);
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t51 = new examples.MinFinder.T((-3));
        int int52 = t51.getVal();
        int int53 = t51.getVal();
        int int54 = t51.getVal();
        int int55 = t51.getVal();
        int int56 = t51.getVal();
        examples.MinFinder.T t58 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t60 = new examples.MinFinder.T((-3));
        int int61 = t60.getVal();
        int int62 = t60.getVal();
        int int63 = t60.getVal();
        int int64 = t60.getVal();
        int int65 = t60.getVal();
        int int66 = t60.getVal();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        examples.MinFinder.T[] tArray70 = new examples.MinFinder.T[] { t49, t51, t58, t60, t68 };
        java.util.ArrayList<examples.MinFinder.T> tList71 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList71, tArray70);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList71);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList71);
        examples.MinFinder.T t78 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t78);
        boolean boolean80 = t19.equals((java.lang.Object) t78);
        minFinder0.add(t19);
        java.lang.Class<?> wildcardClass82 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNotNull(tArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(wildcardClass82);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        examples.MinFinder.T t45 = new examples.MinFinder.T((-9));
        int int46 = t45.getVal();
        minFinder43.add(t45);
        examples.MinFinder minFinder48 = new examples.MinFinder();
        examples.MinFinder.T t49 = minFinder48.findMin();
        minFinder48.clear();
        minFinder48.clear();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        minFinder48.add(t53);
        examples.MinFinder.T t57 = new examples.MinFinder.T(1);
        boolean boolean58 = t53.equals((java.lang.Object) t57);
        minFinder43.add(t53);
        java.lang.Class<?> wildcardClass60 = t53.getClass();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-9) + "'", int46 == (-9));
        org.junit.Assert.assertNull(t49);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        examples.MinFinder minFinder12 = new examples.MinFinder();
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        minFinder12.chval(t14, (int) ' ');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        java.lang.Object obj28 = null;
        boolean boolean29 = t23.equals(obj28);
        int int30 = t23.getVal();
        minFinder12.chval(t23, 0);
        minFinder0.add(t23);
        minFinder0.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        boolean boolean38 = t36.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        boolean boolean54 = t46.equals((java.lang.Object) (-8.7d));
        minFinder39.chval(t46, (-100));
        boolean boolean57 = t36.equals((java.lang.Object) t46);
        minFinder0.chval(t36, (int) (byte) 1);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        boolean boolean75 = t2.equals((java.lang.Object) t66);
        examples.MinFinder minFinder76 = new examples.MinFinder();
        examples.MinFinder.T t77 = minFinder76.findMin();
        minFinder76.clear();
        minFinder76.clear();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        minFinder76.add(t81);
        minFinder76.clear();
        examples.MinFinder.T t86 = new examples.MinFinder.T((int) 'a');
        minFinder76.add(t86);
        boolean boolean88 = t2.equals((java.lang.Object) t86);
        java.lang.Class<?> wildcardClass89 = t86.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(t77);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder minFinder17 = new examples.MinFinder();
        examples.MinFinder.T t18 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t20 = minFinder17.findMin();
        minFinder17.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        minFinder17.chval(t23, 0);
        minFinder17.clear();
        boolean boolean31 = t16.equals((java.lang.Object) minFinder17);
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t35 = minFinder32.findMin();
        minFinder32.clear();
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        int int39 = t38.getVal();
        int int40 = t38.getVal();
        int int41 = t38.getVal();
        int int42 = t38.getVal();
        minFinder32.chval(t38, 0);
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        minFinder32.add(t46);
        boolean boolean51 = t16.equals((java.lang.Object) minFinder32);
        examples.MinFinder.T t52 = minFinder32.findMin();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(t52);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        minFinder26.clear();
        minFinder26.clear();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        minFinder26.add(t31);
        minFinder20.chval(t31, 5);
        examples.MinFinder minFinder36 = new examples.MinFinder();
        examples.MinFinder.T t37 = minFinder36.findMin();
        examples.MinFinder.T t39 = new examples.MinFinder.T(3);
        minFinder36.chval(t39, (int) (short) -1);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        examples.MinFinder.T t45 = new examples.MinFinder.T(3);
        minFinder42.chval(t45, (int) (short) -1);
        minFinder36.add(t45);
        examples.MinFinder.T t50 = new examples.MinFinder.T((-9));
        minFinder36.add(t50);
        minFinder20.chval(t50, (-10));
        minFinder0.chval(t50, (-1));
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t59 = new examples.MinFinder.T((-3));
        int int60 = t59.getVal();
        int int61 = t59.getVal();
        int int62 = t59.getVal();
        int int63 = t59.getVal();
        int int64 = t59.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t68 = new examples.MinFinder.T((-3));
        int int69 = t68.getVal();
        int int70 = t68.getVal();
        int int71 = t68.getVal();
        int int72 = t68.getVal();
        int int73 = t68.getVal();
        int int74 = t68.getVal();
        examples.MinFinder.T t76 = new examples.MinFinder.T((int) 'a');
        int int77 = t76.getVal();
        examples.MinFinder.T[] tArray78 = new examples.MinFinder.T[] { t57, t59, t66, t68, t76 };
        java.util.ArrayList<examples.MinFinder.T> tList79 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList79, tArray78);
        examples.MinFinder minFinder81 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder82 = new examples.MinFinder(tList79);
        examples.MinFinder minFinder83 = new examples.MinFinder(tList79);
        examples.MinFinder.T t84 = minFinder83.findMin();
        int int85 = t84.getVal();
        minFinder0.chval(t84, (int) ' ');
        examples.MinFinder.T t88 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNull(t37);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-3) + "'", int72 == (-3));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-3) + "'", int73 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 97 + "'", int77 == 97);
        org.junit.Assert.assertNotNull(tArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(t84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-3) + "'", int85 == (-3));
        org.junit.Assert.assertNull(t88);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        java.lang.Class<?> wildcardClass33 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        minFinder0.clear();
        examples.MinFinder.T t7 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder minFinder9 = new examples.MinFinder();
        examples.MinFinder.T t10 = minFinder9.findMin();
        minFinder9.clear();
        minFinder9.clear();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder9.add(t14);
        minFinder0.chval(t14, (-5));
        examples.MinFinder.T t20 = new examples.MinFinder.T(0);
        java.lang.Object obj21 = null;
        boolean boolean22 = t20.equals(obj21);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t26 = new examples.MinFinder.T((-3));
        int int27 = t26.getVal();
        int int28 = t26.getVal();
        int int29 = t26.getVal();
        int int30 = t26.getVal();
        int int31 = t26.getVal();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        int int36 = t35.getVal();
        int int37 = t35.getVal();
        int int38 = t35.getVal();
        int int39 = t35.getVal();
        int int40 = t35.getVal();
        int int41 = t35.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        int int44 = t43.getVal();
        examples.MinFinder.T[] tArray45 = new examples.MinFinder.T[] { t24, t26, t33, t35, t43 };
        java.util.ArrayList<examples.MinFinder.T> tList46 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList46, tArray45);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder51 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList46);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList46);
        minFinder55.clear();
        boolean boolean57 = t20.equals((java.lang.Object) minFinder55);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t60 = new examples.MinFinder.T((-9));
        int int61 = t60.getVal();
        minFinder58.chval(t60, (-100));
        int int64 = t60.getVal();
        minFinder55.chval(t60, (-4));
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        minFinder67.clear();
        minFinder67.clear();
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) 'a');
        int int73 = t72.getVal();
        minFinder67.add(t72);
        minFinder67.clear();
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) 'a');
        minFinder67.add(t77);
        examples.MinFinder.T t80 = new examples.MinFinder.T((-3));
        minFinder67.add(t80);
        minFinder55.add(t80);
        minFinder0.add(t80);
        examples.MinFinder.T t84 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 97 + "'", int44 == 97);
        org.junit.Assert.assertNotNull(tArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-9) + "'", int61 == (-9));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-9) + "'", int64 == (-9));
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 97 + "'", int73 == 97);
        org.junit.Assert.assertNotNull(t84);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t11 = new examples.MinFinder.T((-3));
        int int12 = t11.getVal();
        int int13 = t11.getVal();
        int int14 = t11.getVal();
        int int15 = t11.getVal();
        int int16 = t11.getVal();
        examples.MinFinder.T t18 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        int int25 = t20.getVal();
        int int26 = t20.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        int int29 = t28.getVal();
        examples.MinFinder.T[] tArray30 = new examples.MinFinder.T[] { t9, t11, t18, t20, t28 };
        java.util.ArrayList<examples.MinFinder.T> tList31 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList31, tArray30);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList31);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList31);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList31);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList31);
        examples.MinFinder minFinder38 = new examples.MinFinder();
        examples.MinFinder.T t39 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t41 = minFinder38.findMin();
        minFinder38.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        minFinder38.chval(t44, 0);
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        boolean boolean54 = t52.equals((java.lang.Object) (-1));
        int int55 = t52.getVal();
        minFinder38.chval(t52, 0);
        minFinder37.add(t52);
        examples.MinFinder.T t59 = minFinder37.findMin();
        examples.MinFinder.T t60 = minFinder37.findMin();
        minFinder0.add(t60);
        minFinder0.clear();
        minFinder0.clear();
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 97 + "'", int29 == 97);
        org.junit.Assert.assertNotNull(tArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(t39);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertNotNull(t60);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        examples.MinFinder.T t1 = new examples.MinFinder.T(7);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        examples.MinFinder minFinder15 = new examples.MinFinder();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-9));
        int int18 = t17.getVal();
        minFinder15.chval(t17, (-100));
        minFinder2.chval(t17, 0);
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        java.lang.Object obj29 = null;
        boolean boolean30 = t24.equals(obj29);
        minFinder2.add(t24);
        boolean boolean32 = t1.equals((java.lang.Object) t24);
        examples.MinFinder.T t34 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        int int41 = t36.getVal();
        examples.MinFinder.T t43 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        int int51 = t45.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        int int54 = t53.getVal();
        examples.MinFinder.T[] tArray55 = new examples.MinFinder.T[] { t34, t36, t43, t45, t53 };
        java.util.ArrayList<examples.MinFinder.T> tList56 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList56, tArray55);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder63 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder64 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder65 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder66 = new examples.MinFinder(tList56);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList56);
        boolean boolean68 = t1.equals((java.lang.Object) tList56);
        java.lang.Class<?> wildcardClass69 = t1.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-9) + "'", int18 == (-9));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 97 + "'", int54 == 97);
        org.junit.Assert.assertNotNull(tArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t15 = minFinder10.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        boolean boolean35 = t27.equals((java.lang.Object) (-8.7d));
        minFinder20.chval(t27, (-100));
        boolean boolean38 = t17.equals((java.lang.Object) t27);
        minFinder10.add(t27);
        int int40 = t27.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) int40);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        minFinder49.chval(t55, (int) ' ');
        minFinder42.add(t55);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        java.lang.Object obj71 = null;
        boolean boolean72 = t66.equals(obj71);
        minFinder42.add(t66);
        examples.MinFinder.T t74 = minFinder42.findMin();
        examples.MinFinder.T t75 = minFinder42.findMin();
        boolean boolean76 = t1.equals((java.lang.Object) t75);
        int int77 = t1.getVal();
        int int78 = t1.getVal();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        examples.MinFinder.T t1 = new examples.MinFinder.T(0);
        java.lang.Object obj2 = null;
        boolean boolean3 = t1.equals(obj2);
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        int int8 = t7.getVal();
        int int9 = t7.getVal();
        int int10 = t7.getVal();
        int int11 = t7.getVal();
        int int12 = t7.getVal();
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        int int20 = t16.getVal();
        int int21 = t16.getVal();
        int int22 = t16.getVal();
        examples.MinFinder.T t24 = new examples.MinFinder.T((int) 'a');
        int int25 = t24.getVal();
        examples.MinFinder.T[] tArray26 = new examples.MinFinder.T[] { t5, t7, t14, t16, t24 };
        java.util.ArrayList<examples.MinFinder.T> tList27 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList27, tArray26);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder33 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList27);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList27);
        minFinder36.clear();
        boolean boolean38 = t1.equals((java.lang.Object) minFinder36);
        int int39 = t1.getVal();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 97 + "'", int25 == 97);
        org.junit.Assert.assertNotNull(tArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        int int13 = t9.getVal();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t20 = new examples.MinFinder.T((-3));
        int int21 = t20.getVal();
        int int22 = t20.getVal();
        int int23 = t20.getVal();
        int int24 = t20.getVal();
        minFinder14.chval(t20, 0);
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        boolean boolean30 = t28.equals((java.lang.Object) (-1));
        int int31 = t28.getVal();
        minFinder14.chval(t28, 0);
        examples.MinFinder minFinder34 = new examples.MinFinder();
        examples.MinFinder.T t35 = minFinder34.findMin();
        examples.MinFinder.T t37 = new examples.MinFinder.T(3);
        minFinder34.chval(t37, (int) (short) -1);
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        minFinder40.clear();
        examples.MinFinder.T t45 = new examples.MinFinder.T((int) 'a');
        int int46 = t45.getVal();
        minFinder40.add(t45);
        minFinder34.chval(t45, 5);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        examples.MinFinder.T t53 = new examples.MinFinder.T(3);
        minFinder50.chval(t53, (int) (short) -1);
        examples.MinFinder minFinder56 = new examples.MinFinder();
        examples.MinFinder.T t57 = minFinder56.findMin();
        examples.MinFinder.T t59 = new examples.MinFinder.T(3);
        minFinder56.chval(t59, (int) (short) -1);
        minFinder50.add(t59);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-9));
        minFinder50.add(t64);
        minFinder34.chval(t64, (-10));
        minFinder14.chval(t64, (-1));
        boolean boolean70 = t9.equals((java.lang.Object) minFinder14);
        examples.MinFinder.T t72 = new examples.MinFinder.T((int) (byte) 0);
        int int73 = t72.getVal();
        minFinder14.chval(t72, (int) (byte) 100);
        minFinder14.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertNull(t35);
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 97 + "'", int46 == 97);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertNull(t57);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t18 = new examples.MinFinder.T((-3));
        int int19 = t18.getVal();
        int int20 = t18.getVal();
        int int21 = t18.getVal();
        int int22 = t18.getVal();
        int int23 = t18.getVal();
        examples.MinFinder.T t25 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) 'a');
        int int36 = t35.getVal();
        examples.MinFinder.T[] tArray37 = new examples.MinFinder.T[] { t16, t18, t25, t27, t35 };
        java.util.ArrayList<examples.MinFinder.T> tList38 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList38, tArray37);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList38);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList38);
        examples.MinFinder.T t48 = null;
        minFinder47.chval(t48, (-1));
        minFinder47.clear();
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        examples.MinFinder minFinder58 = new examples.MinFinder();
        examples.MinFinder.T t59 = minFinder58.findMin();
        examples.MinFinder.T t61 = new examples.MinFinder.T(3);
        minFinder58.chval(t61, (int) (short) -1);
        minFinder52.add(t61);
        minFinder47.add(t61);
        minFinder0.add(t61);
        int int67 = t61.getVal();
        examples.MinFinder minFinder68 = new examples.MinFinder();
        examples.MinFinder.T t69 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t71 = minFinder68.findMin();
        minFinder68.clear();
        examples.MinFinder.T t74 = new examples.MinFinder.T((-3));
        int int75 = t74.getVal();
        int int76 = t74.getVal();
        int int77 = t74.getVal();
        int int78 = t74.getVal();
        minFinder68.chval(t74, 0);
        minFinder68.clear();
        examples.MinFinder.T t82 = minFinder68.findMin();
        minFinder68.clear();
        minFinder68.clear();
        examples.MinFinder minFinder85 = new examples.MinFinder();
        examples.MinFinder.T t86 = minFinder85.findMin();
        minFinder85.clear();
        examples.MinFinder.T t88 = minFinder85.findMin();
        examples.MinFinder.T t90 = new examples.MinFinder.T((-1));
        minFinder85.chval(t90, 100);
        boolean boolean94 = t90.equals((java.lang.Object) 5L);
        minFinder68.add(t90);
        examples.MinFinder.T t96 = minFinder68.findMin();
        int int97 = t96.getVal();
        boolean boolean98 = t61.equals((java.lang.Object) int97);
        java.lang.Class<?> wildcardClass99 = t61.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 97 + "'", int36 == 97);
        org.junit.Assert.assertNotNull(tArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertNull(t59);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertNull(t82);
        org.junit.Assert.assertNull(t86);
        org.junit.Assert.assertNull(t88);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(t96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = null;
        minFinder0.add(t6);
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        java.lang.Class<?> wildcardClass11 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t16 = minFinder2.findMin();
        examples.MinFinder.T t17 = minFinder2.findMin();
        examples.MinFinder.T t18 = minFinder2.findMin();
        examples.MinFinder.T t19 = minFinder2.findMin();
        java.lang.Class<?> wildcardClass20 = t19.getClass();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(t16);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNotNull(t19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-9));
        int int3 = t2.getVal();
        minFinder0.chval(t2, (-100));
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        int int12 = t9.getVal();
        int int13 = t9.getVal();
        int int14 = t9.getVal();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        int int17 = t16.getVal();
        int int18 = t16.getVal();
        int int19 = t16.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        examples.MinFinder.T t27 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        int int30 = t29.getVal();
        int int31 = t29.getVal();
        int int32 = t29.getVal();
        int int33 = t29.getVal();
        int int34 = t29.getVal();
        int int35 = t29.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        int int43 = t37.getVal();
        examples.MinFinder.T[] tArray44 = new examples.MinFinder.T[] { t7, t9, t16, t21, t27, t29, t37 };
        java.util.ArrayList<examples.MinFinder.T> tList45 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList45, tArray44);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList45);
        minFinder47.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        minFinder49.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((-9));
        int int57 = t56.getVal();
        minFinder49.chval(t56, 10);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t63 = minFinder60.findMin();
        minFinder60.clear();
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        minFinder60.chval(t66, 0);
        minFinder49.add(t66);
        minFinder47.add(t66);
        minFinder0.add(t66);
        minFinder0.clear();
        examples.MinFinder.T t77 = minFinder0.findMin();
        examples.MinFinder.T t78 = null;
        minFinder0.add(t78);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-9) + "'", int3 == (-9));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertNotNull(tArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-9) + "'", int57 == (-9));
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t63);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertNull(t77);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-9));
        int int8 = t7.getVal();
        minFinder0.chval(t7, 10);
        examples.MinFinder.T t11 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        minFinder13.clear();
        examples.MinFinder minFinder27 = new examples.MinFinder();
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T(3);
        minFinder27.chval(t30, (int) (short) -1);
        examples.MinFinder minFinder33 = new examples.MinFinder();
        examples.MinFinder.T t34 = minFinder33.findMin();
        examples.MinFinder.T t36 = new examples.MinFinder.T(3);
        minFinder33.chval(t36, (int) (short) -1);
        minFinder27.add(t36);
        minFinder27.clear();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) (short) 0);
        minFinder27.chval(t42, (int) '4');
        minFinder13.add(t42);
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        int int48 = t47.getVal();
        int int49 = t47.getVal();
        int int50 = t47.getVal();
        int int51 = t47.getVal();
        boolean boolean52 = t42.equals((java.lang.Object) t47);
        int int53 = t47.getVal();
        minFinder0.add(t47);
        examples.MinFinder.T t55 = null;
        minFinder0.chval(t55, 97);
        java.lang.Class<?> wildcardClass58 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-9) + "'", int8 == (-9));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        minFinder42.clear();
        examples.MinFinder.T t44 = minFinder42.findMin();
        examples.MinFinder.T t45 = minFinder42.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t44);
        org.junit.Assert.assertNull(t45);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, 0);
        examples.MinFinder.T t12 = minFinder0.findMin();
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t12);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        examples.MinFinder.T t14 = new examples.MinFinder.T((int) 'a');
        int int15 = t14.getVal();
        minFinder0.add(t14);
        examples.MinFinder.T t17 = minFinder0.findMin();
        examples.MinFinder.T t18 = minFinder0.findMin();
        examples.MinFinder minFinder19 = new examples.MinFinder();
        examples.MinFinder.T t20 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t22 = minFinder19.findMin();
        minFinder19.clear();
        examples.MinFinder.T t25 = new examples.MinFinder.T((-3));
        int int26 = t25.getVal();
        int int27 = t25.getVal();
        int int28 = t25.getVal();
        int int29 = t25.getVal();
        minFinder19.chval(t25, 0);
        examples.MinFinder.T t33 = new examples.MinFinder.T((-3));
        int int34 = t33.getVal();
        int int35 = t33.getVal();
        int int36 = t33.getVal();
        minFinder19.add(t33);
        int int38 = t33.getVal();
        minFinder0.add(t33);
        examples.MinFinder.T t40 = minFinder0.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T((-3));
        int int43 = t42.getVal();
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        minFinder44.chval(t46, (int) ' ');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-9));
        boolean boolean57 = t55.equals((java.lang.Object) 6);
        minFinder44.chval(t55, 97);
        boolean boolean60 = t42.equals((java.lang.Object) t55);
        int int61 = t42.getVal();
        minFinder0.add(t42);
        examples.MinFinder.T t64 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder65 = new examples.MinFinder();
        examples.MinFinder.T t66 = minFinder65.findMin();
        examples.MinFinder.T t68 = new examples.MinFinder.T(3);
        minFinder65.chval(t68, (int) (short) -1);
        examples.MinFinder minFinder71 = new examples.MinFinder();
        examples.MinFinder.T t72 = minFinder71.findMin();
        examples.MinFinder.T t74 = new examples.MinFinder.T(3);
        minFinder71.chval(t74, (int) (short) -1);
        minFinder65.add(t74);
        boolean boolean78 = t64.equals((java.lang.Object) minFinder65);
        examples.MinFinder.T t79 = minFinder65.findMin();
        examples.MinFinder.T t80 = minFinder65.findMin();
        examples.MinFinder.T t81 = minFinder65.findMin();
        minFinder65.clear();
        examples.MinFinder.T t84 = new examples.MinFinder.T((int) (short) 0);
        int int85 = t84.getVal();
        boolean boolean87 = t84.equals((java.lang.Object) 2);
        int int88 = t84.getVal();
        minFinder65.chval(t84, (-6));
        boolean boolean91 = t42.equals((java.lang.Object) (-6));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 97 + "'", int15 == 97);
        org.junit.Assert.assertNotNull(t17);
        org.junit.Assert.assertNotNull(t18);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertNotNull(t40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertNull(t66);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(t79);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(t81);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        minFinder25.clear();
        examples.MinFinder.T t28 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t39 = new examples.MinFinder.T((-3));
        int int40 = t39.getVal();
        int int41 = t39.getVal();
        int int42 = t39.getVal();
        int int43 = t39.getVal();
        int int44 = t39.getVal();
        int int45 = t39.getVal();
        examples.MinFinder.T t47 = new examples.MinFinder.T((int) 'a');
        int int48 = t47.getVal();
        examples.MinFinder.T[] tArray49 = new examples.MinFinder.T[] { t28, t30, t37, t39, t47 };
        java.util.ArrayList<examples.MinFinder.T> tList50 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList50, tArray49);
        examples.MinFinder minFinder52 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList50);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList50);
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T((int) (short) 100);
        minFinder54.add(t57);
        examples.MinFinder.T t59 = minFinder54.findMin();
        minFinder25.chval(t59, (-6));
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) (short) 0);
        int int64 = t63.getVal();
        boolean boolean65 = t59.equals((java.lang.Object) t63);
        int int66 = t59.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 97 + "'", int48 == 97);
        org.junit.Assert.assertNotNull(tArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(t55);
        org.junit.Assert.assertNotNull(t59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder.T t28 = minFinder27.findMin();
        examples.MinFinder.T t30 = new examples.MinFinder.T((int) (short) 100);
        minFinder27.add(t30);
        examples.MinFinder.T t32 = null;
        minFinder27.chval(t32, (int) (byte) 10);
        examples.MinFinder.T t36 = new examples.MinFinder.T((int) (byte) 1);
        int int37 = t36.getVal();
        minFinder27.add(t36);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-6));
        int int41 = t40.getVal();
        // The following exception was thrown during execution in test generation
        try {
            minFinder27.chval(t40, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(t28);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-6) + "'", int41 == (-6));
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t7 = new examples.MinFinder.T((-3));
        boolean boolean9 = t7.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        examples.MinFinder.T t13 = new examples.MinFinder.T(3);
        minFinder10.chval(t13, (int) (short) -1);
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        int int18 = t17.getVal();
        int int19 = t17.getVal();
        int int20 = t17.getVal();
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        boolean boolean25 = t17.equals((java.lang.Object) (-8.7d));
        minFinder10.chval(t17, (-100));
        boolean boolean28 = t7.equals((java.lang.Object) t17);
        minFinder0.add(t17);
        java.lang.Class<?> wildcardClass30 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        boolean boolean10 = t8.equals((java.lang.Object) (-1));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((int) 'a');
        int int32 = t31.getVal();
        examples.MinFinder.T[] tArray33 = new examples.MinFinder.T[] { t12, t14, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList34 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList34, tArray33);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList34);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList34);
        boolean boolean42 = t8.equals((java.lang.Object) minFinder41);
        minFinder0.chval(t8, (int) (short) 0);
        minFinder0.clear();
        examples.MinFinder.T t47 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        int int54 = t49.getVal();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t58 = new examples.MinFinder.T((-3));
        int int59 = t58.getVal();
        int int60 = t58.getVal();
        int int61 = t58.getVal();
        int int62 = t58.getVal();
        int int63 = t58.getVal();
        int int64 = t58.getVal();
        examples.MinFinder.T t66 = new examples.MinFinder.T((int) 'a');
        int int67 = t66.getVal();
        examples.MinFinder.T[] tArray68 = new examples.MinFinder.T[] { t47, t49, t56, t58, t66 };
        java.util.ArrayList<examples.MinFinder.T> tList69 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList69, tArray68);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder73 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder74 = new examples.MinFinder(tList69);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList69);
        examples.MinFinder.T t77 = new examples.MinFinder.T((int) 'a');
        minFinder75.add(t77);
        examples.MinFinder.T t80 = new examples.MinFinder.T((int) 'a');
        minFinder75.add(t80);
        minFinder0.chval(t80, 2);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 97 + "'", int32 == 97);
        org.junit.Assert.assertNotNull(tArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-3) + "'", int64 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 97 + "'", int67 == 97);
        org.junit.Assert.assertNotNull(tArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        int int18 = t12.getVal();
        examples.MinFinder.T t20 = new examples.MinFinder.T((int) 'a');
        int int21 = t20.getVal();
        examples.MinFinder.T[] tArray22 = new examples.MinFinder.T[] { t1, t3, t10, t12, t20 };
        java.util.ArrayList<examples.MinFinder.T> tList23 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList23, tArray22);
        examples.MinFinder minFinder25 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder26 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList23);
        examples.MinFinder minFinder32 = new examples.MinFinder(tList23);
        minFinder32.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        int int52 = t46.getVal();
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) 'a');
        int int55 = t54.getVal();
        examples.MinFinder.T[] tArray56 = new examples.MinFinder.T[] { t35, t37, t44, t46, t54 };
        java.util.ArrayList<examples.MinFinder.T> tList57 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList57, tArray56);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList57);
        examples.MinFinder minFinder61 = new examples.MinFinder(tList57);
        examples.MinFinder.T t62 = minFinder61.findMin();
        minFinder32.chval(t62, 10);
        examples.MinFinder.T t65 = minFinder32.findMin();
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        minFinder66.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        int int72 = t71.getVal();
        minFinder66.add(t71);
        int int74 = t71.getVal();
        int int75 = t71.getVal();
        minFinder32.chval(t71, (int) (short) 0);
        int int78 = t71.getVal();
        int int79 = t71.getVal();
        int int80 = t71.getVal();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 97 + "'", int21 == 97);
        org.junit.Assert.assertNotNull(tArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 97 + "'", int55 == 97);
        org.junit.Assert.assertNotNull(tArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(t62);
        org.junit.Assert.assertNull(t65);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 97 + "'", int72 == 97);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 97 + "'", int75 == 97);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 97 + "'", int79 == 97);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 97 + "'", int80 == 97);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T(5);
        int int7 = t6.getVal();
        minFinder0.chval(t6, 5);
        int int10 = t6.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 5 + "'", int7 == 5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t2 = new examples.MinFinder.T((-3));
        int int3 = t2.getVal();
        int int4 = t2.getVal();
        int int5 = t2.getVal();
        int int6 = t2.getVal();
        int int7 = t2.getVal();
        minFinder0.chval(t2, (int) ' ');
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-1));
        minFinder10.chval(t15, 100);
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        minFinder10.add(t19);
        examples.MinFinder minFinder23 = new examples.MinFinder();
        examples.MinFinder.T t24 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t26 = minFinder23.findMin();
        minFinder23.clear();
        examples.MinFinder.T t28 = minFinder23.findMin();
        minFinder23.clear();
        minFinder23.clear();
        minFinder23.clear();
        boolean boolean32 = t19.equals((java.lang.Object) minFinder23);
        minFinder23.clear();
        minFinder23.clear();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        examples.MinFinder minFinder40 = new examples.MinFinder();
        examples.MinFinder.T t41 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t43 = minFinder40.findMin();
        minFinder40.clear();
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        minFinder40.chval(t46, 0);
        examples.MinFinder.T t54 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder55 = new examples.MinFinder();
        examples.MinFinder.T t56 = minFinder55.findMin();
        examples.MinFinder.T t58 = new examples.MinFinder.T(3);
        minFinder55.chval(t58, (int) (short) -1);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        minFinder55.add(t64);
        boolean boolean68 = t54.equals((java.lang.Object) minFinder55);
        minFinder55.clear();
        examples.MinFinder.T t71 = new examples.MinFinder.T(3);
        minFinder55.chval(t71, 1);
        minFinder40.add(t71);
        boolean boolean75 = t36.equals((java.lang.Object) t71);
        minFinder23.chval(t71, 32);
        boolean boolean78 = t2.equals((java.lang.Object) t71);
        java.lang.Class<?> wildcardClass79 = t71.getClass();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertNull(t24);
        org.junit.Assert.assertNull(t26);
        org.junit.Assert.assertNull(t28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertNull(t41);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertNull(t56);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = null;
        minFinder0.chval(t9, (-9));
        java.lang.Class<?> wildcardClass12 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder();
        examples.MinFinder.T t40 = minFinder39.findMin();
        examples.MinFinder.T t42 = new examples.MinFinder.T(3);
        minFinder39.chval(t42, (int) (short) -1);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        minFinder39.add(t48);
        minFinder38.add(t48);
        examples.MinFinder.T t53 = minFinder38.findMin();
        examples.MinFinder minFinder54 = new examples.MinFinder();
        examples.MinFinder.T t55 = minFinder54.findMin();
        examples.MinFinder.T t57 = new examples.MinFinder.T(3);
        minFinder54.chval(t57, (int) (short) -1);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        minFinder54.add(t63);
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) 'a');
        int int69 = t68.getVal();
        minFinder54.add(t68);
        boolean boolean71 = t53.equals((java.lang.Object) t68);
        minFinder0.chval(t68, 0);
        int int74 = t68.getVal();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(t40);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNotNull(t53);
        org.junit.Assert.assertNull(t55);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 97 + "'", int74 == 97);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder minFinder16 = new examples.MinFinder();
        examples.MinFinder.T t17 = minFinder16.findMin();
        examples.MinFinder.T t19 = new examples.MinFinder.T(3);
        minFinder16.chval(t19, (int) (short) -1);
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        minFinder16.add(t25);
        examples.MinFinder.T t30 = new examples.MinFinder.T((-9));
        minFinder16.add(t30);
        minFinder0.chval(t30, (-10));
        examples.MinFinder.T t34 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t36 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t34);
        org.junit.Assert.assertNull(t36);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T(6);
        examples.MinFinder minFinder45 = new examples.MinFinder();
        examples.MinFinder.T t46 = minFinder45.findMin();
        examples.MinFinder.T t48 = new examples.MinFinder.T(3);
        minFinder45.chval(t48, (int) (short) -1);
        examples.MinFinder minFinder51 = new examples.MinFinder();
        examples.MinFinder.T t52 = minFinder51.findMin();
        minFinder51.clear();
        minFinder51.clear();
        examples.MinFinder.T t56 = new examples.MinFinder.T((int) 'a');
        int int57 = t56.getVal();
        minFinder51.add(t56);
        minFinder45.chval(t56, 5);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t62 = minFinder61.findMin();
        examples.MinFinder.T t64 = new examples.MinFinder.T(3);
        minFinder61.chval(t64, (int) (short) -1);
        examples.MinFinder minFinder67 = new examples.MinFinder();
        examples.MinFinder.T t68 = minFinder67.findMin();
        examples.MinFinder.T t70 = new examples.MinFinder.T(3);
        minFinder67.chval(t70, (int) (short) -1);
        minFinder61.add(t70);
        examples.MinFinder.T t75 = new examples.MinFinder.T((-9));
        minFinder61.add(t75);
        minFinder45.chval(t75, (-10));
        boolean boolean79 = t44.equals((java.lang.Object) t75);
        minFinder41.chval(t75, 1);
        examples.MinFinder.T t82 = minFinder41.findMin();
        examples.MinFinder.T t84 = new examples.MinFinder.T((-2));
        minFinder41.chval(t84, (-3));
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t46);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 97 + "'", int57 == 97);
        org.junit.Assert.assertNull(t62);
        org.junit.Assert.assertNull(t68);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNull(t82);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder minFinder14 = new examples.MinFinder();
        examples.MinFinder.T t15 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t17 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t19 = minFinder14.findMin();
        examples.MinFinder.T t20 = minFinder14.findMin();
        minFinder14.clear();
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        minFinder14.add(t23);
        minFinder14.clear();
        examples.MinFinder.T t29 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        int int45 = t40.getVal();
        int int46 = t40.getVal();
        examples.MinFinder.T t48 = new examples.MinFinder.T((int) 'a');
        int int49 = t48.getVal();
        examples.MinFinder.T[] tArray50 = new examples.MinFinder.T[] { t29, t31, t38, t40, t48 };
        java.util.ArrayList<examples.MinFinder.T> tList51 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList51, tArray50);
        examples.MinFinder minFinder53 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder54 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder55 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder56 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder57 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder58 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder59 = new examples.MinFinder(tList51);
        examples.MinFinder minFinder60 = new examples.MinFinder(tList51);
        examples.MinFinder.T t62 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        int int65 = t64.getVal();
        int int66 = t64.getVal();
        int int67 = t64.getVal();
        int int68 = t64.getVal();
        int int69 = t64.getVal();
        examples.MinFinder.T t71 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t73 = new examples.MinFinder.T((-3));
        int int74 = t73.getVal();
        int int75 = t73.getVal();
        int int76 = t73.getVal();
        int int77 = t73.getVal();
        int int78 = t73.getVal();
        int int79 = t73.getVal();
        examples.MinFinder.T t81 = new examples.MinFinder.T((int) 'a');
        int int82 = t81.getVal();
        examples.MinFinder.T[] tArray83 = new examples.MinFinder.T[] { t62, t64, t71, t73, t81 };
        java.util.ArrayList<examples.MinFinder.T> tList84 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList84, tArray83);
        examples.MinFinder minFinder86 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder87 = new examples.MinFinder(tList84);
        examples.MinFinder minFinder88 = new examples.MinFinder(tList84);
        examples.MinFinder.T t89 = minFinder88.findMin();
        int int90 = t89.getVal();
        minFinder60.add(t89);
        minFinder14.add(t89);
        minFinder0.add(t89);
        examples.MinFinder.T t95 = new examples.MinFinder.T(1);
        int int96 = t95.getVal();
        java.lang.Class<?> wildcardClass97 = t95.getClass();
        boolean boolean98 = t89.equals((java.lang.Object) t95);
        java.lang.Class<?> wildcardClass99 = t95.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertNull(t17);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 97 + "'", int49 == 97);
        org.junit.Assert.assertNotNull(tArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-3) + "'", int65 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-3) + "'", int75 == (-3));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-3) + "'", int78 == (-3));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-3) + "'", int79 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 97 + "'", int82 == 97);
        org.junit.Assert.assertNotNull(tArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(t89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-3) + "'", int90 == (-3));
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertNotNull(wildcardClass97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (short) 100);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T(3);
        minFinder2.chval(t5, (int) (short) -1);
        examples.MinFinder minFinder8 = new examples.MinFinder();
        examples.MinFinder.T t9 = minFinder8.findMin();
        examples.MinFinder.T t11 = new examples.MinFinder.T(3);
        minFinder8.chval(t11, (int) (short) -1);
        minFinder2.add(t11);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        java.lang.Object obj16 = null;
        boolean boolean17 = t1.equals(obj16);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        minFinder6.clear();
        examples.MinFinder.T t11 = new examples.MinFinder.T((int) 'a');
        int int12 = t11.getVal();
        minFinder6.add(t11);
        minFinder0.chval(t11, 5);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t21 = minFinder18.findMin();
        minFinder18.clear();
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        minFinder18.chval(t24, 0);
        boolean boolean31 = t17.equals((java.lang.Object) minFinder18);
        minFinder0.add(t17);
        examples.MinFinder.T t33 = minFinder0.findMin();
        examples.MinFinder.T t35 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t37 = new examples.MinFinder.T((-3));
        int int38 = t37.getVal();
        int int39 = t37.getVal();
        int int40 = t37.getVal();
        int int41 = t37.getVal();
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        examples.MinFinder.T t49 = new examples.MinFinder.T((-3));
        int int50 = t49.getVal();
        int int51 = t49.getVal();
        int int52 = t49.getVal();
        int int53 = t49.getVal();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t57 = new examples.MinFinder.T((-3));
        int int58 = t57.getVal();
        int int59 = t57.getVal();
        int int60 = t57.getVal();
        int int61 = t57.getVal();
        int int62 = t57.getVal();
        int int63 = t57.getVal();
        examples.MinFinder.T t65 = new examples.MinFinder.T((-3));
        int int66 = t65.getVal();
        int int67 = t65.getVal();
        int int68 = t65.getVal();
        int int69 = t65.getVal();
        int int70 = t65.getVal();
        int int71 = t65.getVal();
        examples.MinFinder.T[] tArray72 = new examples.MinFinder.T[] { t35, t37, t44, t49, t55, t57, t65 };
        java.util.ArrayList<examples.MinFinder.T> tList73 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList73, tArray72);
        examples.MinFinder minFinder75 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder76 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder77 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder78 = new examples.MinFinder(tList73);
        examples.MinFinder minFinder79 = new examples.MinFinder(tList73);
        examples.MinFinder.T t80 = minFinder79.findMin();
        examples.MinFinder.T t81 = minFinder79.findMin();
        minFinder0.add(t81);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 97 + "'", int12 == 97);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-3) + "'", int52 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-3) + "'", int62 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-3) + "'", int63 == (-3));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-3) + "'", int66 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(tArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(t81);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t22 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t24 = new examples.MinFinder.T((-3));
        int int25 = t24.getVal();
        int int26 = t24.getVal();
        int int27 = t24.getVal();
        int int28 = t24.getVal();
        int int29 = t24.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        examples.MinFinder.T t36 = new examples.MinFinder.T((-3));
        int int37 = t36.getVal();
        int int38 = t36.getVal();
        int int39 = t36.getVal();
        int int40 = t36.getVal();
        examples.MinFinder.T t42 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        int int45 = t44.getVal();
        int int46 = t44.getVal();
        int int47 = t44.getVal();
        int int48 = t44.getVal();
        int int49 = t44.getVal();
        int int50 = t44.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((-3));
        int int53 = t52.getVal();
        int int54 = t52.getVal();
        int int55 = t52.getVal();
        int int56 = t52.getVal();
        int int57 = t52.getVal();
        int int58 = t52.getVal();
        examples.MinFinder.T[] tArray59 = new examples.MinFinder.T[] { t22, t24, t31, t36, t42, t44, t52 };
        java.util.ArrayList<examples.MinFinder.T> tList60 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList60, tArray59);
        examples.MinFinder minFinder62 = new examples.MinFinder(tList60);
        examples.MinFinder.T t64 = new examples.MinFinder.T((-3));
        minFinder62.add(t64);
        minFinder0.chval(t64, 1);
        minFinder0.clear();
        java.lang.Class<?> wildcardClass69 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-3) + "'", int38 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-3) + "'", int39 == (-3));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-3) + "'", int45 == (-3));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-3) + "'", int53 == (-3));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-3) + "'", int54 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertNotNull(tArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass69);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        minFinder41.clear();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        boolean boolean46 = t44.equals((java.lang.Object) ' ');
        minFinder41.chval(t44, (int) 'a');
        examples.MinFinder.T t50 = new examples.MinFinder.T((-3));
        minFinder41.add(t50);
        minFinder41.clear();
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        minFinder53.clear();
        examples.MinFinder.T t68 = new examples.MinFinder.T((int) (short) 0);
        minFinder53.chval(t68, (int) '4');
        minFinder41.add(t68);
        minFinder41.clear();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        examples.MinFinder.T t9 = new examples.MinFinder.T(3);
        minFinder6.chval(t9, (int) (short) -1);
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((int) (short) 0);
        minFinder0.chval(t15, (int) '4');
        examples.MinFinder minFinder18 = new examples.MinFinder();
        examples.MinFinder.T t19 = minFinder18.findMin();
        examples.MinFinder.T t21 = new examples.MinFinder.T(3);
        minFinder18.chval(t21, (int) (short) -1);
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        examples.MinFinder.T t27 = new examples.MinFinder.T(3);
        minFinder24.chval(t27, (int) (short) -1);
        minFinder18.add(t27);
        minFinder18.clear();
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) (short) 0);
        minFinder18.chval(t33, (int) '4');
        minFinder0.add(t33);
        examples.MinFinder.T t38 = new examples.MinFinder.T(32);
        minFinder0.add(t38);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t19);
        org.junit.Assert.assertNull(t25);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        examples.MinFinder.T t1 = new examples.MinFinder.T(3);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        java.lang.Class<?> wildcardClass29 = tList25.getClass();
        boolean boolean30 = t1.equals((java.lang.Object) tList25);
        int int31 = t1.getVal();
        examples.MinFinder minFinder32 = new examples.MinFinder();
        examples.MinFinder.T t33 = minFinder32.findMin();
        minFinder32.clear();
        minFinder32.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((int) 'a');
        int int38 = t37.getVal();
        minFinder32.add(t37);
        int int40 = t37.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) t37);
        int int42 = t37.getVal();
        examples.MinFinder.T t44 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t46 = new examples.MinFinder.T((-3));
        int int47 = t46.getVal();
        int int48 = t46.getVal();
        int int49 = t46.getVal();
        int int50 = t46.getVal();
        int int51 = t46.getVal();
        examples.MinFinder.T t53 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        examples.MinFinder.T t63 = new examples.MinFinder.T((int) 'a');
        int int64 = t63.getVal();
        examples.MinFinder.T[] tArray65 = new examples.MinFinder.T[] { t44, t46, t53, t55, t63 };
        java.util.ArrayList<examples.MinFinder.T> tList66 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList66, tArray65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder70 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder71 = new examples.MinFinder(tList66);
        examples.MinFinder minFinder72 = new examples.MinFinder(tList66);
        examples.MinFinder.T t74 = new examples.MinFinder.T((int) 'a');
        minFinder72.add(t74);
        examples.MinFinder.T t76 = minFinder72.findMin();
        boolean boolean77 = t37.equals((java.lang.Object) minFinder72);
        int int78 = t37.getVal();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNull(t33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 97 + "'", int38 == 97);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 97 + "'", int40 == 97);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 97 + "'", int42 == 97);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-3) + "'", int51 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 97 + "'", int64 == 97);
        org.junit.Assert.assertNotNull(tArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 97 + "'", int78 == 97);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertNull(t8);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t8 = minFinder0.findMin();
        examples.MinFinder.T t9 = minFinder0.findMin();
        examples.MinFinder.T t10 = minFinder0.findMin();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        boolean boolean19 = t12.equals((java.lang.Object) 100.0d);
        int int20 = t12.getVal();
        minFinder0.add(t12);
        examples.MinFinder.T t22 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass23 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t8);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertNull(t10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertNotNull(t22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        minFinder0.clear();
        examples.MinFinder.T t14 = minFinder0.findMin();
        examples.MinFinder.T t16 = new examples.MinFinder.T((-3));
        boolean boolean18 = t16.equals((java.lang.Object) ' ');
        minFinder0.add(t16);
        examples.MinFinder.T t20 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder22 = new examples.MinFinder();
        examples.MinFinder.T t23 = minFinder22.findMin();
        examples.MinFinder.T t25 = new examples.MinFinder.T(3);
        minFinder22.chval(t25, (int) (short) -1);
        examples.MinFinder minFinder28 = new examples.MinFinder();
        examples.MinFinder.T t29 = minFinder28.findMin();
        examples.MinFinder.T t31 = new examples.MinFinder.T(3);
        minFinder28.chval(t31, (int) (short) -1);
        minFinder22.add(t31);
        minFinder22.clear();
        examples.MinFinder.T t37 = new examples.MinFinder.T((-1));
        minFinder22.chval(t37, (int) (byte) 1);
        minFinder0.chval(t37, (-7));
        examples.MinFinder.T t43 = new examples.MinFinder.T(2);
        minFinder0.chval(t43, 7);
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder46.clear();
        examples.MinFinder minFinder53 = new examples.MinFinder();
        examples.MinFinder.T t54 = minFinder53.findMin();
        examples.MinFinder.T t56 = new examples.MinFinder.T(3);
        minFinder53.chval(t56, (int) (short) -1);
        examples.MinFinder minFinder59 = new examples.MinFinder();
        examples.MinFinder.T t60 = minFinder59.findMin();
        examples.MinFinder.T t62 = new examples.MinFinder.T(3);
        minFinder59.chval(t62, (int) (short) -1);
        minFinder53.add(t62);
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        int int68 = t67.getVal();
        minFinder53.add(t67);
        examples.MinFinder.T t70 = minFinder53.findMin();
        minFinder46.chval(t70, (-1));
        examples.MinFinder minFinder73 = new examples.MinFinder();
        examples.MinFinder.T t74 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder.T t76 = minFinder73.findMin();
        minFinder73.clear();
        examples.MinFinder.T t79 = new examples.MinFinder.T((-3));
        int int80 = t79.getVal();
        int int81 = t79.getVal();
        int int82 = t79.getVal();
        int int83 = t79.getVal();
        minFinder73.chval(t79, 0);
        examples.MinFinder minFinder86 = new examples.MinFinder();
        examples.MinFinder.T t88 = new examples.MinFinder.T((-9));
        int int89 = t88.getVal();
        minFinder86.chval(t88, (-100));
        minFinder73.chval(t88, 0);
        int int94 = t88.getVal();
        int int95 = t88.getVal();
        minFinder46.chval(t88, (-5));
        minFinder0.chval(t88, (-7));
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(t20);
        org.junit.Assert.assertNull(t23);
        org.junit.Assert.assertNull(t29);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t54);
        org.junit.Assert.assertNull(t60);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 97 + "'", int68 == 97);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertNull(t74);
        org.junit.Assert.assertNull(t76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-3) + "'", int80 == (-3));
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-3) + "'", int81 == (-3));
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-3) + "'", int82 == (-3));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-3) + "'", int83 == (-3));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-9) + "'", int89 == (-9));
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-9) + "'", int94 == (-9));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-9) + "'", int95 == (-9));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        int int4 = t3.getVal();
        int int5 = t3.getVal();
        int int6 = t3.getVal();
        int int7 = t3.getVal();
        int int8 = t3.getVal();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        int int11 = t10.getVal();
        int int12 = t10.getVal();
        int int13 = t10.getVal();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        int int16 = t15.getVal();
        int int17 = t15.getVal();
        int int18 = t15.getVal();
        int int19 = t15.getVal();
        examples.MinFinder.T t21 = new examples.MinFinder.T((int) '#');
        examples.MinFinder.T t23 = new examples.MinFinder.T((-3));
        int int24 = t23.getVal();
        int int25 = t23.getVal();
        int int26 = t23.getVal();
        int int27 = t23.getVal();
        int int28 = t23.getVal();
        int int29 = t23.getVal();
        examples.MinFinder.T t31 = new examples.MinFinder.T((-3));
        int int32 = t31.getVal();
        int int33 = t31.getVal();
        int int34 = t31.getVal();
        int int35 = t31.getVal();
        int int36 = t31.getVal();
        int int37 = t31.getVal();
        examples.MinFinder.T[] tArray38 = new examples.MinFinder.T[] { t1, t3, t10, t15, t21, t23, t31 };
        java.util.ArrayList<examples.MinFinder.T> tList39 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList39, tArray38);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder42 = new examples.MinFinder(tList39);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList39);
        minFinder43.clear();
        examples.MinFinder.T t45 = minFinder43.findMin();
        examples.MinFinder minFinder46 = new examples.MinFinder();
        examples.MinFinder.T t47 = minFinder46.findMin();
        examples.MinFinder.T t49 = new examples.MinFinder.T(3);
        minFinder46.chval(t49, (int) (short) -1);
        minFinder46.clear();
        minFinder46.clear();
        minFinder46.clear();
        minFinder46.clear();
        minFinder46.clear();
        examples.MinFinder minFinder57 = new examples.MinFinder();
        examples.MinFinder.T t58 = minFinder57.findMin();
        minFinder57.clear();
        minFinder57.clear();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        minFinder57.add(t62);
        minFinder57.clear();
        examples.MinFinder.T t67 = new examples.MinFinder.T((int) 'a');
        minFinder57.add(t67);
        int int69 = t67.getVal();
        minFinder46.chval(t67, 4);
        minFinder43.chval(t67, (int) (short) 0);
        examples.MinFinder.T t74 = minFinder43.findMin();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-3) + "'", int37 == (-3));
        org.junit.Assert.assertNotNull(tArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t47);
        org.junit.Assert.assertNull(t58);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 97 + "'", int69 == 97);
        org.junit.Assert.assertNull(t74);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        examples.MinFinder.T t1 = new examples.MinFinder.T((-3));
        int int2 = t1.getVal();
        int int3 = t1.getVal();
        int int4 = t1.getVal();
        int int5 = t1.getVal();
        int int6 = t1.getVal();
        int int7 = t1.getVal();
        boolean boolean9 = t1.equals((java.lang.Object) (-8.7d));
        examples.MinFinder minFinder10 = new examples.MinFinder();
        examples.MinFinder.T t11 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t13 = minFinder10.findMin();
        minFinder10.clear();
        examples.MinFinder.T t15 = minFinder10.findMin();
        examples.MinFinder.T t17 = new examples.MinFinder.T((-3));
        boolean boolean19 = t17.equals((java.lang.Object) (-1));
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        int int28 = t27.getVal();
        int int29 = t27.getVal();
        int int30 = t27.getVal();
        int int31 = t27.getVal();
        int int32 = t27.getVal();
        int int33 = t27.getVal();
        boolean boolean35 = t27.equals((java.lang.Object) (-8.7d));
        minFinder20.chval(t27, (-100));
        boolean boolean38 = t17.equals((java.lang.Object) t27);
        minFinder10.add(t27);
        int int40 = t27.getVal();
        boolean boolean41 = t1.equals((java.lang.Object) int40);
        examples.MinFinder minFinder42 = new examples.MinFinder();
        examples.MinFinder.T t43 = minFinder42.findMin();
        minFinder42.clear();
        examples.MinFinder.T t45 = minFinder42.findMin();
        minFinder42.clear();
        minFinder42.clear();
        minFinder42.clear();
        examples.MinFinder minFinder49 = new examples.MinFinder();
        examples.MinFinder.T t50 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t52 = minFinder49.findMin();
        minFinder49.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((-3));
        int int56 = t55.getVal();
        int int57 = t55.getVal();
        int int58 = t55.getVal();
        int int59 = t55.getVal();
        int int60 = t55.getVal();
        int int61 = t55.getVal();
        minFinder49.chval(t55, (int) ' ');
        minFinder42.add(t55);
        examples.MinFinder.T t66 = new examples.MinFinder.T((-3));
        int int67 = t66.getVal();
        int int68 = t66.getVal();
        int int69 = t66.getVal();
        int int70 = t66.getVal();
        java.lang.Object obj71 = null;
        boolean boolean72 = t66.equals(obj71);
        minFinder42.add(t66);
        examples.MinFinder.T t74 = minFinder42.findMin();
        examples.MinFinder.T t75 = minFinder42.findMin();
        boolean boolean76 = t1.equals((java.lang.Object) t75);
        java.lang.Object obj77 = null;
        boolean boolean78 = t1.equals(obj77);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-3) + "'", int2 == (-3));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3) + "'", int3 == (-3));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3) + "'", int4 == (-3));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-3) + "'", int5 == (-3));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(t11);
        org.junit.Assert.assertNull(t13);
        org.junit.Assert.assertNull(t15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-3) + "'", int28 == (-3));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-3) + "'", int29 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-3) + "'", int40 == (-3));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(t43);
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t50);
        org.junit.Assert.assertNull(t52);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-3) + "'", int61 == (-3));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-3) + "'", int67 == (-3));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-3) + "'", int68 == (-3));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-3) + "'", int69 == (-3));
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-3) + "'", int70 == (-3));
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(t74);
        org.junit.Assert.assertNotNull(t75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t5 = minFinder0.findMin();
        examples.MinFinder.T t6 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        int int17 = t12.getVal();
        examples.MinFinder.T t19 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        int int27 = t21.getVal();
        examples.MinFinder.T t29 = new examples.MinFinder.T((int) 'a');
        int int30 = t29.getVal();
        examples.MinFinder.T[] tArray31 = new examples.MinFinder.T[] { t10, t12, t19, t21, t29 };
        java.util.ArrayList<examples.MinFinder.T> tList32 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList32, tArray31);
        examples.MinFinder minFinder34 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder35 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder36 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder37 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder38 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder39 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder40 = new examples.MinFinder(tList32);
        examples.MinFinder minFinder41 = new examples.MinFinder(tList32);
        examples.MinFinder.T t43 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t45 = new examples.MinFinder.T((-3));
        int int46 = t45.getVal();
        int int47 = t45.getVal();
        int int48 = t45.getVal();
        int int49 = t45.getVal();
        int int50 = t45.getVal();
        examples.MinFinder.T t52 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t54 = new examples.MinFinder.T((-3));
        int int55 = t54.getVal();
        int int56 = t54.getVal();
        int int57 = t54.getVal();
        int int58 = t54.getVal();
        int int59 = t54.getVal();
        int int60 = t54.getVal();
        examples.MinFinder.T t62 = new examples.MinFinder.T((int) 'a');
        int int63 = t62.getVal();
        examples.MinFinder.T[] tArray64 = new examples.MinFinder.T[] { t43, t45, t52, t54, t62 };
        java.util.ArrayList<examples.MinFinder.T> tList65 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList65, tArray64);
        examples.MinFinder minFinder67 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder68 = new examples.MinFinder(tList65);
        examples.MinFinder minFinder69 = new examples.MinFinder(tList65);
        examples.MinFinder.T t70 = minFinder69.findMin();
        int int71 = t70.getVal();
        minFinder41.add(t70);
        examples.MinFinder.T t73 = minFinder41.findMin();
        int int74 = t73.getVal();
        minFinder0.add(t73);
        examples.MinFinder.T t76 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass77 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertNull(t6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-3) + "'", int27 == (-3));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 97 + "'", int30 == 97);
        org.junit.Assert.assertNotNull(tArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-3) + "'", int46 == (-3));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-3) + "'", int47 == (-3));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-3) + "'", int48 == (-3));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-3) + "'", int49 == (-3));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-3) + "'", int50 == (-3));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-3) + "'", int55 == (-3));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-3) + "'", int56 == (-3));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-3) + "'", int57 == (-3));
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-3) + "'", int58 == (-3));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-3) + "'", int59 == (-3));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-3) + "'", int60 == (-3));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 97 + "'", int63 == 97);
        org.junit.Assert.assertNotNull(tArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(t70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-3) + "'", int71 == (-3));
        org.junit.Assert.assertNotNull(t73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-3) + "'", int74 == (-3));
        org.junit.Assert.assertNotNull(t76);
        org.junit.Assert.assertNotNull(wildcardClass77);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        examples.MinFinder.T t1 = new examples.MinFinder.T(35);
        examples.MinFinder.T t3 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t5 = new examples.MinFinder.T((-3));
        int int6 = t5.getVal();
        int int7 = t5.getVal();
        int int8 = t5.getVal();
        int int9 = t5.getVal();
        int int10 = t5.getVal();
        examples.MinFinder.T t12 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        int int15 = t14.getVal();
        int int16 = t14.getVal();
        int int17 = t14.getVal();
        int int18 = t14.getVal();
        int int19 = t14.getVal();
        int int20 = t14.getVal();
        examples.MinFinder.T t22 = new examples.MinFinder.T((int) 'a');
        int int23 = t22.getVal();
        examples.MinFinder.T[] tArray24 = new examples.MinFinder.T[] { t3, t5, t12, t14, t22 };
        java.util.ArrayList<examples.MinFinder.T> tList25 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList25, tArray24);
        examples.MinFinder minFinder27 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder28 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder29 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder30 = new examples.MinFinder(tList25);
        examples.MinFinder minFinder31 = new examples.MinFinder(tList25);
        examples.MinFinder.T t33 = new examples.MinFinder.T((int) 'a');
        minFinder31.add(t33);
        boolean boolean35 = t1.equals((java.lang.Object) t33);
        java.lang.Class<?> wildcardClass36 = t1.getClass();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-3) + "'", int6 == (-3));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-3) + "'", int18 == (-3));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-3) + "'", int19 == (-3));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 97 + "'", int23 == 97);
        org.junit.Assert.assertNotNull(tArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardClass36);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        examples.MinFinder.T t3 = new examples.MinFinder.T(3);
        minFinder0.chval(t3, (int) (short) -1);
        examples.MinFinder minFinder6 = new examples.MinFinder();
        examples.MinFinder.T t7 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t9 = minFinder6.findMin();
        minFinder6.clear();
        examples.MinFinder.T t12 = new examples.MinFinder.T((-3));
        int int13 = t12.getVal();
        int int14 = t12.getVal();
        int int15 = t12.getVal();
        int int16 = t12.getVal();
        minFinder6.chval(t12, 0);
        minFinder6.clear();
        examples.MinFinder minFinder20 = new examples.MinFinder();
        examples.MinFinder.T t21 = minFinder20.findMin();
        examples.MinFinder.T t23 = new examples.MinFinder.T(3);
        minFinder20.chval(t23, (int) (short) -1);
        examples.MinFinder minFinder26 = new examples.MinFinder();
        examples.MinFinder.T t27 = minFinder26.findMin();
        examples.MinFinder.T t29 = new examples.MinFinder.T(3);
        minFinder26.chval(t29, (int) (short) -1);
        minFinder20.add(t29);
        minFinder20.clear();
        examples.MinFinder.T t35 = new examples.MinFinder.T((int) (short) 0);
        minFinder20.chval(t35, (int) '4');
        minFinder6.add(t35);
        examples.MinFinder.T t40 = new examples.MinFinder.T((-3));
        int int41 = t40.getVal();
        int int42 = t40.getVal();
        int int43 = t40.getVal();
        int int44 = t40.getVal();
        boolean boolean45 = t35.equals((java.lang.Object) t40);
        int int46 = t35.getVal();
        boolean boolean47 = t3.equals((java.lang.Object) t35);
        int int48 = t3.getVal();
        java.lang.Class<?> wildcardClass49 = t3.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t7);
        org.junit.Assert.assertNull(t9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-3) + "'", int13 == (-3));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-3) + "'", int14 == (-3));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-3) + "'", int15 == (-3));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-3) + "'", int16 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-3) + "'", int42 == (-3));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-3) + "'", int43 == (-3));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-3) + "'", int44 == (-3));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        examples.MinFinder.T t5 = new examples.MinFinder.T((-1));
        minFinder0.chval(t5, 100);
        examples.MinFinder.T t9 = new examples.MinFinder.T((-3));
        int int10 = t9.getVal();
        int int11 = t9.getVal();
        minFinder0.add(t9);
        minFinder0.clear();
        examples.MinFinder.T t15 = new examples.MinFinder.T((-3));
        boolean boolean17 = t15.equals((java.lang.Object) (-1));
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        examples.MinFinder.T t21 = new examples.MinFinder.T((-3));
        int int22 = t21.getVal();
        int int23 = t21.getVal();
        int int24 = t21.getVal();
        int int25 = t21.getVal();
        int int26 = t21.getVal();
        examples.MinFinder.T t28 = new examples.MinFinder.T((int) 'a');
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        int int35 = t30.getVal();
        int int36 = t30.getVal();
        examples.MinFinder.T t38 = new examples.MinFinder.T((int) 'a');
        int int39 = t38.getVal();
        examples.MinFinder.T[] tArray40 = new examples.MinFinder.T[] { t19, t21, t28, t30, t38 };
        java.util.ArrayList<examples.MinFinder.T> tList41 = new java.util.ArrayList<examples.MinFinder.T>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<examples.MinFinder.T>) tList41, tArray40);
        examples.MinFinder minFinder43 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder44 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder45 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder46 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder47 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder48 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder49 = new examples.MinFinder(tList41);
        examples.MinFinder minFinder50 = new examples.MinFinder(tList41);
        boolean boolean51 = t15.equals((java.lang.Object) minFinder50);
        examples.MinFinder minFinder52 = new examples.MinFinder();
        examples.MinFinder.T t53 = minFinder52.findMin();
        examples.MinFinder.T t55 = new examples.MinFinder.T(3);
        minFinder52.chval(t55, (int) (short) -1);
        boolean boolean58 = t15.equals((java.lang.Object) minFinder52);
        minFinder0.chval(t15, 97);
        examples.MinFinder minFinder61 = new examples.MinFinder();
        examples.MinFinder.T t63 = new examples.MinFinder.T(100);
        minFinder61.add(t63);
        minFinder0.add(t63);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t69 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t71 = minFinder66.findMin();
        examples.MinFinder.T t72 = minFinder66.findMin();
        minFinder66.clear();
        examples.MinFinder.T t75 = new examples.MinFinder.T((-3));
        int int76 = t75.getVal();
        int int77 = t75.getVal();
        minFinder66.add(t75);
        minFinder0.add(t75);
        examples.MinFinder.T t80 = minFinder0.findMin();
        java.lang.Class<?> wildcardClass81 = minFinder0.getClass();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-3) + "'", int24 == (-3));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-3) + "'", int25 == (-3));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-3) + "'", int26 == (-3));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-3) + "'", int35 == (-3));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-3) + "'", int36 == (-3));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 97 + "'", int39 == 97);
        org.junit.Assert.assertNotNull(tArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(t53);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(t67);
        org.junit.Assert.assertNull(t69);
        org.junit.Assert.assertNull(t71);
        org.junit.Assert.assertNull(t72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-3) + "'", int76 == (-3));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-3) + "'", int77 == (-3));
        org.junit.Assert.assertNotNull(t80);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        examples.MinFinder.T t1 = new examples.MinFinder.T((int) (byte) 10);
        examples.MinFinder minFinder2 = new examples.MinFinder();
        examples.MinFinder.T t3 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t5 = minFinder2.findMin();
        minFinder2.clear();
        examples.MinFinder.T t8 = new examples.MinFinder.T((-3));
        int int9 = t8.getVal();
        int int10 = t8.getVal();
        int int11 = t8.getVal();
        int int12 = t8.getVal();
        minFinder2.chval(t8, 0);
        boolean boolean15 = t1.equals((java.lang.Object) minFinder2);
        examples.MinFinder.T t17 = new examples.MinFinder.T((int) (short) 0);
        int int18 = t17.getVal();
        minFinder2.chval(t17, (-5));
        int int21 = t17.getVal();
        int int22 = t17.getVal();
        int int23 = t17.getVal();
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertNull(t5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-3) + "'", int11 == (-3));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-3) + "'", int12 == (-3));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t3 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder.T t6 = new examples.MinFinder.T((-3));
        int int7 = t6.getVal();
        int int8 = t6.getVal();
        int int9 = t6.getVal();
        int int10 = t6.getVal();
        minFinder0.chval(t6, 0);
        examples.MinFinder.T t14 = new examples.MinFinder.T((-3));
        boolean boolean16 = t14.equals((java.lang.Object) (-1));
        int int17 = t14.getVal();
        minFinder0.chval(t14, 0);
        minFinder0.clear();
        examples.MinFinder.T t21 = minFinder0.findMin();
        examples.MinFinder.T t22 = minFinder0.findMin();
        minFinder0.clear();
        examples.MinFinder minFinder24 = new examples.MinFinder();
        examples.MinFinder.T t25 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t27 = minFinder24.findMin();
        minFinder24.clear();
        examples.MinFinder.T t30 = new examples.MinFinder.T((-3));
        int int31 = t30.getVal();
        int int32 = t30.getVal();
        int int33 = t30.getVal();
        int int34 = t30.getVal();
        minFinder24.chval(t30, 0);
        examples.MinFinder.T t38 = new examples.MinFinder.T((-3));
        boolean boolean40 = t38.equals((java.lang.Object) (-1));
        int int41 = t38.getVal();
        minFinder24.chval(t38, 0);
        examples.MinFinder minFinder44 = new examples.MinFinder();
        examples.MinFinder.T t45 = minFinder44.findMin();
        examples.MinFinder.T t47 = new examples.MinFinder.T(3);
        minFinder44.chval(t47, (int) (short) -1);
        examples.MinFinder minFinder50 = new examples.MinFinder();
        examples.MinFinder.T t51 = minFinder50.findMin();
        minFinder50.clear();
        minFinder50.clear();
        examples.MinFinder.T t55 = new examples.MinFinder.T((int) 'a');
        int int56 = t55.getVal();
        minFinder50.add(t55);
        minFinder44.chval(t55, 5);
        examples.MinFinder minFinder60 = new examples.MinFinder();
        examples.MinFinder.T t61 = minFinder60.findMin();
        examples.MinFinder.T t63 = new examples.MinFinder.T(3);
        minFinder60.chval(t63, (int) (short) -1);
        examples.MinFinder minFinder66 = new examples.MinFinder();
        examples.MinFinder.T t67 = minFinder66.findMin();
        examples.MinFinder.T t69 = new examples.MinFinder.T(3);
        minFinder66.chval(t69, (int) (short) -1);
        minFinder60.add(t69);
        examples.MinFinder.T t74 = new examples.MinFinder.T((-9));
        minFinder60.add(t74);
        minFinder44.chval(t74, (-10));
        minFinder24.chval(t74, (-1));
        minFinder0.add(t74);
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertNull(t3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-3) + "'", int7 == (-3));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-3) + "'", int8 == (-3));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-3) + "'", int9 == (-3));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-3) + "'", int10 == (-3));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-3) + "'", int17 == (-3));
        org.junit.Assert.assertNull(t21);
        org.junit.Assert.assertNull(t22);
        org.junit.Assert.assertNull(t25);
        org.junit.Assert.assertNull(t27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3) + "'", int31 == (-3));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3) + "'", int32 == (-3));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-3) + "'", int33 == (-3));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-3) + "'", int34 == (-3));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-3) + "'", int41 == (-3));
        org.junit.Assert.assertNull(t45);
        org.junit.Assert.assertNull(t51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 97 + "'", int56 == 97);
        org.junit.Assert.assertNull(t61);
        org.junit.Assert.assertNull(t67);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        examples.MinFinder minFinder0 = new examples.MinFinder();
        examples.MinFinder.T t1 = minFinder0.findMin();
        minFinder0.clear();
        minFinder0.clear();
        examples.MinFinder.T t5 = new examples.MinFinder.T((int) 'a');
        int int6 = t5.getVal();
        minFinder0.add(t5);
        minFinder0.clear();
        examples.MinFinder.T t10 = new examples.MinFinder.T((int) 'a');
        minFinder0.add(t10);
        minFinder0.clear();
        examples.MinFinder minFinder13 = new examples.MinFinder();
        examples.MinFinder.T t14 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t16 = minFinder13.findMin();
        minFinder13.clear();
        examples.MinFinder.T t19 = new examples.MinFinder.T((-3));
        int int20 = t19.getVal();
        int int21 = t19.getVal();
        int int22 = t19.getVal();
        int int23 = t19.getVal();
        minFinder13.chval(t19, 0);
        examples.MinFinder.T t27 = new examples.MinFinder.T((-3));
        boolean boolean29 = t27.equals((java.lang.Object) (-1));
        int int30 = t27.getVal();
        minFinder13.chval(t27, 0);
        minFinder0.chval(t27, (int) (short) -1);
        minFinder0.clear();
        org.junit.Assert.assertNull(t1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 97 + "'", int6 == 97);
        org.junit.Assert.assertNull(t14);
        org.junit.Assert.assertNull(t16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-3) + "'", int20 == (-3));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-3) + "'", int21 == (-3));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-3) + "'", int22 == (-3));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-3) + "'", int23 == (-3));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-3) + "'", int30 == (-3));
    }
}

