package DataStructures;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.String str1 = overflow0.toString();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "DataStructures.Overflow" + "'", str1, "DataStructures.Overflow");
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass2 = throwableArray1.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Class<?> wildcardClass1 = overflow0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.String str3 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "DataStructures.Overflow" + "'", str3, "DataStructures.Overflow");
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass3 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = obj3.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.String str10 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DataStructures.Overflow" + "'", str10, "DataStructures.Overflow");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass5 = throwableArray4.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = obj6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) throwableArray18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        boolean boolean25 = queueAr19.isEmpty();
        queueAr19.enqueue((java.lang.Object) (-10.5d));
        // The following exception was thrown during execution in test generation
        try {
            queueAr5.enqueue((java.lang.Object) (-10.5d));
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.String str9 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DataStructures.Overflow" + "'", str9, "DataStructures.Overflow");
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) '#');
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.String str9 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DataStructures.Overflow" + "'", str9, "DataStructures.Overflow");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.String str4 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DataStructures.Overflow" + "'", str4, "DataStructures.Overflow");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-8));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.String str2 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DataStructures.Overflow" + "'", str2, "DataStructures.Overflow");
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-3));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) 10.0f);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-10));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.String str18 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Overflow" + "'", str18, "DataStructures.Overflow");
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) '#');
        queueAr9.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) 10L);
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr14);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) (-8.7d));
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.String str17 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass15 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.String str7 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DataStructures.Overflow" + "'", str7, "DataStructures.Overflow");
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        java.lang.Class<?> wildcardClass10 = overflow4.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str31 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Class<?> wildcardClass24 = queueAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-5));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass3 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        java.lang.String str10 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DataStructures.Overflow" + "'", str10, "DataStructures.Overflow");
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) (-8L));
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.String str33 = overflow22.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DataStructures.Overflow" + "'", str33, "DataStructures.Overflow");
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        boolean boolean14 = queueAr5.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr5.enqueue((java.lang.Object) 3.1d);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.String str33 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DataStructures.Overflow" + "'", str33, "DataStructures.Overflow");
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Class<?> wildcardClass33 = overflow22.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.String str4 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DataStructures.Overflow" + "'", str4, "DataStructures.Overflow");
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow24.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.String str47 = overflow36.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DataStructures.Overflow" + "'", str47, "DataStructures.Overflow");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str19 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DataStructures.Overflow" + "'", str19, "DataStructures.Overflow");
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = obj5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Class<?> wildcardClass16 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow10.getSuppressed();
        java.lang.String str17 = overflow10.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass8 = obj7.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.String str35 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DataStructures.Overflow" + "'", str35, "DataStructures.Overflow");
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.String str14 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DataStructures.Overflow" + "'", str14, "DataStructures.Overflow");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Class<?> wildcardClass19 = overflow12.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass7 = obj6.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow20);
        queueAr1.enqueue((java.lang.Object) overflow20);
        java.lang.String str26 = overflow20.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "DataStructures.Overflow" + "'", str26, "DataStructures.Overflow");
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.String str16 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DataStructures.Overflow" + "'", str16, "DataStructures.Overflow");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        DataStructures.QueueAr queueAr25 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr25.dequeueAll();
        java.lang.Object obj27 = queueAr25.getFront();
        java.lang.Object obj28 = queueAr25.getFront();
        boolean boolean29 = queueAr25.isEmpty();
        boolean boolean30 = queueAr25.isFull();
        queueAr25.dequeueAll();
        java.lang.Object obj32 = queueAr25.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr25);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(obj32);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow6.getSuppressed();
        java.lang.Class<?> wildcardClass12 = overflow6.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.String str67 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DataStructures.Overflow" + "'", str67, "DataStructures.Overflow");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        boolean boolean24 = queueAr9.isFull();
        java.lang.Class<?> wildcardClass25 = queueAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) ' ');
        queueAr41.makeEmpty();
        queueAr41.makeEmpty();
        queueAr41.dequeueAll();
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr41);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) (-5L));
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Class<?> wildcardClass55 = overflow47.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.String str16 = overflow10.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DataStructures.Overflow" + "'", str16, "DataStructures.Overflow");
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass10 = throwableArray9.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) ' ');
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr1.isFull();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow14.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow14);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str31 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DataStructures.Overflow" + "'", str31, "DataStructures.Overflow");
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow35.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow35.addSuppressed((java.lang.Throwable) overflow55);
        overflow27.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.String str68 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Class<?> wildcardClass17 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        queueAr10.enqueue((java.lang.Object) (-3));
        boolean boolean16 = queueAr10.isEmpty();
        java.lang.Object obj17 = queueAr10.getFront();
        queueAr10.makeEmpty();
        java.lang.Class<?> wildcardClass19 = queueAr10.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-3) + "'", obj17, (-3));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-4));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.String str18 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Overflow" + "'", str18, "DataStructures.Overflow");
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.String str6 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "DataStructures.Overflow" + "'", str6, "DataStructures.Overflow");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.String str17 = overflow5.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-9));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        java.lang.String str38 = overflow8.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DataStructures.Overflow" + "'", str38, "DataStructures.Overflow");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        java.lang.Object obj12 = queueAr10.getFront();
        queueAr10.makeEmpty();
        queueAr10.enqueue((java.lang.Object) (-3));
        boolean boolean16 = queueAr10.isEmpty();
        java.lang.Object obj17 = queueAr10.getFront();
        queueAr10.makeEmpty();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray51 = overflow40.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow57);
        overflow27.addSuppressed((java.lang.Throwable) overflow57);
        queueAr10.enqueue((java.lang.Object) overflow27);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow27);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (-3) + "'", obj17, (-3));
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray45 = overflow38.getSuppressed();
        java.lang.String str46 = overflow38.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DataStructures.Overflow" + "'", str46, "DataStructures.Overflow");
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        java.lang.String str19 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DataStructures.Overflow" + "'", str19, "DataStructures.Overflow");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.String str14 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DataStructures.Overflow" + "'", str14, "DataStructures.Overflow");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        java.lang.String str70 = overflow14.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DataStructures.Overflow" + "'", str70, "DataStructures.Overflow");
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Class<?> wildcardClass45 = overflow8.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        overflow69.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        overflow43.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.String str89 = overflow85.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "DataStructures.Overflow" + "'", str89, "DataStructures.Overflow");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.String str45 = overflow38.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DataStructures.Overflow" + "'", str45, "DataStructures.Overflow");
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) '#');
        queueAr9.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj13 = queueAr1.getFront();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr(2);
        java.lang.Object obj16 = queueAr15.dequeue();
        boolean boolean17 = queueAr15.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean17);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 10L + "'", obj13, 10L);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        java.lang.Class<?> wildcardClass14 = queueAr5.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Class<?> wildcardClass34 = throwableArray33.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow14.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        queueAr37.dequeueAll();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        queueAr37.enqueue((java.lang.Object) overflow44);
        overflow27.addSuppressed((java.lang.Throwable) overflow44);
        overflow14.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.String str76 = overflow14.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DataStructures.Overflow" + "'", str76, "DataStructures.Overflow");
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass4 = throwableArray3.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray61 = overflow8.getSuppressed();
        java.lang.String str62 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow24.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.String str47 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DataStructures.Overflow" + "'", str47, "DataStructures.Overflow");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        boolean boolean14 = queueAr5.isEmpty();
        boolean boolean15 = queueAr5.isEmpty();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 100);
        boolean boolean18 = queueAr17.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr5.enqueue((java.lang.Object) boolean18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.String str67 = overflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DataStructures.Overflow" + "'", str67, "DataStructures.Overflow");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Object obj15 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-6));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray4 = overflow3.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow15);
        overflow2.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray20 = overflow9.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray32);
        java.lang.Class<?> wildcardClass34 = throwableArray32.getClass();
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str16 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DataStructures.Overflow" + "'", str16, "DataStructures.Overflow");
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray64 = overflow59.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow45.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow59.addSuppressed((java.lang.Throwable) overflow84);
        overflow32.addSuppressed((java.lang.Throwable) overflow59);
        overflow6.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.String str90 = overflow32.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "DataStructures.Overflow" + "'", str90, "DataStructures.Overflow");
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        java.lang.String str19 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DataStructures.Overflow" + "'", str19, "DataStructures.Overflow");
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow45);
        overflow23.addSuppressed((java.lang.Throwable) overflow33);
        queueAr16.enqueue((java.lang.Object) overflow23);
        overflow6.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str54 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DataStructures.Overflow" + "'", str54, "DataStructures.Overflow");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass5 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str17 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        overflow39.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray57 = overflow46.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow63.addSuppressed((java.lang.Throwable) overflow75);
        overflow32.addSuppressed((java.lang.Throwable) overflow63);
        overflow7.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray88 = overflow63.getSuppressed();
        java.lang.String str89 = overflow63.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "DataStructures.Overflow" + "'", str89, "DataStructures.Overflow");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-6.9d));
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        java.lang.Class<?> wildcardClass13 = queueAr9.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) wildcardClass13);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.String str61 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DataStructures.Overflow" + "'", str61, "DataStructures.Overflow");
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.String str34 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DataStructures.Overflow" + "'", str34, "DataStructures.Overflow");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean19 = queueAr18.isEmpty();
        java.lang.Object obj20 = queueAr18.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        java.lang.Object obj24 = queueAr22.getFront();
        queueAr22.makeEmpty();
        boolean boolean26 = queueAr22.isFull();
        queueAr18.enqueue((java.lang.Object) queueAr22);
        boolean boolean28 = queueAr22.isEmpty();
        boolean boolean29 = queueAr22.isFull();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        queueAr22.enqueue((java.lang.Object) overflow54);
        overflow4.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.String str79 = overflow54.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "DataStructures.Overflow" + "'", str79, "DataStructures.Overflow");
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        boolean boolean2 = queueAr1.isFull();
        java.lang.Object obj3 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = obj3.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.String str20 = overflow14.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.String str32 = overflow18.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Overflow" + "'", str32, "DataStructures.Overflow");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str80 = overflow5.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Class<?> wildcardClass39 = overflow5.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean12 = queueAr11.isEmpty();
        java.lang.Object obj13 = queueAr11.dequeue();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        java.lang.Object obj17 = queueAr15.getFront();
        queueAr15.makeEmpty();
        boolean boolean19 = queueAr15.isFull();
        queueAr11.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj21 = queueAr11.dequeue();
        boolean boolean22 = queueAr11.isEmpty();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow39);
        queueAr11.enqueue((java.lang.Object) overflow28);
        overflow5.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.String str43 = overflow28.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DataStructures.Overflow" + "'", str43, "DataStructures.Overflow");
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        java.lang.String str20 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) '#');
        queueAr9.enqueue((java.lang.Object) 10L);
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj13 = queueAr1.getFront();
        boolean boolean14 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-3) + "'", obj7, (-3));
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 10L + "'", obj13, 10L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray96 = overflow84.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray98 = overflow84.getSuppressed();
        java.lang.Class<?> wildcardClass99 = throwableArray98.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(throwableArray98);
        org.junit.Assert.assertNotNull(wildcardClass99);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.String str18 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Overflow" + "'", str18, "DataStructures.Overflow");
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.String str22 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DataStructures.Overflow" + "'", str22, "DataStructures.Overflow");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) 10L);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj21 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-100));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.String str18 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Overflow" + "'", str18, "DataStructures.Overflow");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.String str9 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DataStructures.Overflow" + "'", str9, "DataStructures.Overflow");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = obj4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str17 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        java.lang.String str62 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str39 = overflow20.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DataStructures.Overflow" + "'", str39, "DataStructures.Overflow");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        overflow24.addSuppressed((java.lang.Throwable) overflow54);
        overflow6.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.String str62 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        java.lang.String str17 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.String str55 = overflow47.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass12 = throwableArray11.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.String str55 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass11 = obj10.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        boolean boolean2 = queueAr1.isFull();
        boolean boolean3 = queueAr1.isFull();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr5);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        overflow39.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray57 = overflow46.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow63.addSuppressed((java.lang.Throwable) overflow75);
        overflow32.addSuppressed((java.lang.Throwable) overflow63);
        overflow7.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Class<?> wildcardClass88 = overflow7.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.String str80 = overflow23.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray34 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow23.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow36.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow23.addSuppressed((java.lang.Throwable) overflow36);
        overflow12.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.String str49 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DataStructures.Overflow" + "'", str49, "DataStructures.Overflow");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.dequeue();
        java.lang.Object obj19 = queueAr8.getFront();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) 'a');
        queueAr8.enqueue((java.lang.Object) queueAr21);
        queueAr1.enqueue((java.lang.Object) queueAr21);
        boolean boolean24 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass14 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        java.lang.Object obj28 = queueAr26.getFront();
        java.lang.Object obj29 = queueAr26.getFront();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        queueAr26.enqueue((java.lang.Object) overflow30);
        java.lang.Object obj42 = queueAr26.getFront();
        java.lang.Object obj43 = queueAr26.dequeue();
        boolean boolean44 = queueAr26.isEmpty();
        java.lang.Object obj45 = queueAr26.dequeue();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNull(obj45);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(7);
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Class<?> wildcardClass33 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNotNull(wildcardClass33);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.String str61 = overflow52.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "DataStructures.Overflow" + "'", str61, "DataStructures.Overflow");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        java.lang.Object obj16 = queueAr1.dequeue();
        boolean boolean17 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass18 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + false + "'", obj16, false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray45 = overflow8.getSuppressed();
        java.lang.String str46 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DataStructures.Overflow" + "'", str46, "DataStructures.Overflow");
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow0.getSuppressed();
        java.lang.String str20 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow12.getSuppressed();
        java.lang.Class<?> wildcardClass34 = overflow12.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj33 = queueAr24.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass34 = obj33.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj33);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow17.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        overflow31.addSuppressed((java.lang.Throwable) overflow56);
        overflow4.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray61 = overflow4.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        overflow4.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray75 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow74.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        overflow74.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray85 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow74.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow74);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.String str23 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DataStructures.Overflow" + "'", str23, "DataStructures.Overflow");
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean19 = queueAr18.isEmpty();
        java.lang.Object obj20 = queueAr18.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        java.lang.Object obj24 = queueAr22.getFront();
        queueAr22.makeEmpty();
        boolean boolean26 = queueAr22.isFull();
        queueAr18.enqueue((java.lang.Object) queueAr22);
        boolean boolean28 = queueAr22.isEmpty();
        boolean boolean29 = queueAr22.isFull();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        queueAr22.enqueue((java.lang.Object) overflow54);
        overflow4.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.String str79 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "DataStructures.Overflow" + "'", str79, "DataStructures.Overflow");
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray31 = overflow27.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow35.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow35.addSuppressed((java.lang.Throwable) overflow55);
        overflow27.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.String str68 = overflow27.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.String str18 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Overflow" + "'", str18, "DataStructures.Overflow");
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable throwable20 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow14.addSuppressed(throwable20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow26.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Class<?> wildcardClass18 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean36 = queueAr35.isEmpty();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean39 = queueAr38.isEmpty();
        java.lang.Object obj40 = queueAr38.dequeue();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        java.lang.Object obj44 = queueAr42.getFront();
        queueAr42.makeEmpty();
        boolean boolean46 = queueAr42.isFull();
        queueAr38.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj48 = queueAr38.dequeue();
        queueAr35.enqueue((java.lang.Object) queueAr38);
        java.lang.Object obj50 = queueAr38.getFront();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        queueAr38.enqueue((java.lang.Object) overflow63);
        overflow31.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        overflow31.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Class<?> wildcardClass92 = overflow85.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray23 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow0.getSuppressed();
        java.lang.String str25 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "DataStructures.Overflow" + "'", str25, "DataStructures.Overflow");
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        overflow24.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable throwable80 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow0.addSuppressed(throwable80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr10.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass20);
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass23 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        boolean boolean30 = queueAr28.isEmpty();
        queueAr28.dequeueAll();
        boolean boolean32 = queueAr28.isEmpty();
        boolean boolean33 = queueAr28.isFull();
        boolean boolean34 = queueAr28.isFull();
        queueAr28.dequeueAll();
        java.lang.Object obj36 = queueAr28.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr28);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj36);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        queueAr5.enqueue((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray20 = overflow14.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        queueAr37.dequeueAll();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        queueAr37.enqueue((java.lang.Object) overflow44);
        overflow27.addSuppressed((java.lang.Throwable) overflow44);
        overflow14.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Class<?> wildcardClass76 = overflow27.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow12.getSuppressed();
        java.lang.String str21 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DataStructures.Overflow" + "'", str21, "DataStructures.Overflow");
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.String str30 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DataStructures.Overflow" + "'", str30, "DataStructures.Overflow");
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        // The following exception was thrown during execution in test generation
        try {
            DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((-7));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        overflow24.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.String str80 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        java.lang.Object obj40 = queueAr26.dequeue();
        java.lang.Class<?> wildcardClass41 = queueAr26.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        boolean boolean23 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass24 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow12.getSuppressed();
        java.lang.String str34 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DataStructures.Overflow" + "'", str34, "DataStructures.Overflow");
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.QueueAr queueAr43 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr43.dequeueAll();
        java.lang.Object obj45 = queueAr43.getFront();
        queueAr43.makeEmpty();
        queueAr43.dequeueAll();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray76 = overflow72.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow72);
        overflow50.addSuppressed((java.lang.Throwable) overflow60);
        queueAr43.enqueue((java.lang.Object) overflow50);
        overflow33.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray81 = overflow33.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow33);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNull(obj45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str33 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DataStructures.Overflow" + "'", str33, "DataStructures.Overflow");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        java.lang.Object obj25 = queueAr9.getFront();
        DataStructures.QueueAr queueAr27 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr27.dequeueAll();
        boolean boolean29 = queueAr27.isEmpty();
        queueAr27.dequeueAll();
        queueAr27.makeEmpty();
        boolean boolean32 = queueAr27.isFull();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj35 = queueAr34.getFront();
        queueAr34.dequeueAll();
        java.lang.Object obj37 = queueAr34.dequeue();
        queueAr27.enqueue(obj37);
        queueAr27.makeEmpty();
        queueAr27.dequeueAll();
        java.lang.Object obj41 = queueAr27.dequeue();
        boolean boolean42 = queueAr27.isEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr27);
        java.lang.Class<?> wildcardClass44 = queueAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray33 = overflow20.getSuppressed();
        java.lang.String str34 = overflow20.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DataStructures.Overflow" + "'", str34, "DataStructures.Overflow");
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        java.lang.Object obj24 = queueAr17.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass25 = obj24.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow18.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow29);
        queueAr1.enqueue((java.lang.Object) overflow18);
        boolean boolean32 = queueAr1.isEmpty();
        java.lang.Object obj33 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "DataStructures.Overflow");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 10);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) '#');
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr18.dequeueAll();
        java.lang.Object obj20 = queueAr18.getFront();
        java.lang.Object obj21 = queueAr18.getFront();
        boolean boolean22 = queueAr18.isFull();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        boolean boolean26 = queueAr24.isEmpty();
        queueAr24.dequeueAll();
        boolean boolean28 = queueAr24.isEmpty();
        java.lang.Object obj29 = queueAr24.getFront();
        java.lang.Object obj30 = queueAr24.dequeue();
        queueAr24.makeEmpty();
        queueAr18.enqueue((java.lang.Object) queueAr24);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr18);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj9 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        boolean boolean14 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.String str45 = overflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DataStructures.Overflow" + "'", str45, "DataStructures.Overflow");
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow26.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow39.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow26.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Class<?> wildcardClass51 = overflow26.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) wildcardClass51);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr(7);
        queueAr9.dequeueAll();
        java.lang.Object obj11 = queueAr9.getFront();
        queueAr1.enqueue(obj11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        overflow13.addSuppressed((java.lang.Throwable) overflow16);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow13);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray31);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.dequeueAll();
        java.lang.Class<?> wildcardClass25 = queueAr9.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(wildcardClass25);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        java.lang.Throwable throwable18 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow5.addSuppressed(throwable18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow7.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray64 = overflow53.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow70);
        overflow40.addSuppressed((java.lang.Throwable) overflow70);
        overflow20.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.String str78 = overflow20.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "DataStructures.Overflow" + "'", str78, "DataStructures.Overflow");
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass4 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow2.getSuppressed();
        java.lang.Class<?> wildcardClass34 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        boolean boolean12 = queueAr5.isFull();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow55);
        overflow37.addSuppressed((java.lang.Throwable) overflow49);
        queueAr5.enqueue((java.lang.Object) overflow37);
        java.lang.Object obj61 = queueAr5.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "DataStructures.Overflow");
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass15 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow17);
        overflow4.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray22 = overflow11.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow28.addSuppressed((java.lang.Throwable) overflow40);
        overflow0.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.String str52 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DataStructures.Overflow" + "'", str52, "DataStructures.Overflow");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.String str9 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DataStructures.Overflow" + "'", str9, "DataStructures.Overflow");
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) 'a');
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.String str5 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "DataStructures.Overflow" + "'", str5, "DataStructures.Overflow");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.enqueue((java.lang.Object) 9.6d);
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        boolean boolean8 = queueAr6.isEmpty();
        queueAr6.dequeueAll();
        boolean boolean10 = queueAr6.isEmpty();
        java.lang.Object obj11 = queueAr6.getFront();
        boolean boolean12 = queueAr6.isFull();
        queueAr6.makeEmpty();
        boolean boolean14 = queueAr6.isFull();
        boolean boolean15 = queueAr6.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean15);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        queueAr46.enqueue((java.lang.Object) (-3));
        java.lang.Object obj52 = queueAr46.dequeue();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow65);
        queueAr46.enqueue((java.lang.Object) overflow65);
        overflow8.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Class<?> wildcardClass72 = overflow65.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + (-3) + "'", obj52, (-3));
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(wildcardClass72);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass10 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Class<?> wildcardClass22 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean36 = queueAr35.isEmpty();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean39 = queueAr38.isEmpty();
        java.lang.Object obj40 = queueAr38.dequeue();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        java.lang.Object obj44 = queueAr42.getFront();
        queueAr42.makeEmpty();
        boolean boolean46 = queueAr42.isFull();
        queueAr38.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj48 = queueAr38.dequeue();
        queueAr35.enqueue((java.lang.Object) queueAr38);
        java.lang.Object obj50 = queueAr38.getFront();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        queueAr38.enqueue((java.lang.Object) overflow63);
        overflow31.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow69.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow77.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow77.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow77);
        overflow63.addSuppressed((java.lang.Throwable) overflow77);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.dequeueAll();
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow32.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray50 = overflow39.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow56);
        overflow26.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray63 = overflow56.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray65 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str68 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow28);
        overflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        overflow55.addSuppressed((java.lang.Throwable) overflow58);
        overflow2.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Class<?> wildcardClass79 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(wildcardClass79);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow2.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.String str21 = overflow18.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "DataStructures.Overflow" + "'", str21, "DataStructures.Overflow");
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.String str11 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DataStructures.Overflow" + "'", str11, "DataStructures.Overflow");
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass30 = throwableArray29.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        boolean boolean10 = queueAr8.isEmpty();
        queueAr8.dequeueAll();
        queueAr8.makeEmpty();
        boolean boolean13 = queueAr8.isFull();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj16 = queueAr15.getFront();
        queueAr15.dequeueAll();
        java.lang.Object obj18 = queueAr15.dequeue();
        queueAr8.enqueue(obj18);
        queueAr8.makeEmpty();
        queueAr8.dequeueAll();
        java.lang.Object obj22 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr24 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr24.dequeueAll();
        java.lang.Object obj26 = queueAr24.getFront();
        queueAr24.makeEmpty();
        boolean boolean28 = queueAr24.isFull();
        queueAr24.makeEmpty();
        queueAr8.enqueue((java.lang.Object) queueAr24);
        java.lang.Object obj31 = queueAr24.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr24);
        queueAr1.dequeueAll();
        java.lang.Object obj34 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass35 = obj34.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj11 = queueAr10.getFront();
        queueAr10.dequeueAll();
        java.lang.Object obj13 = queueAr10.dequeue();
        java.lang.Object obj14 = queueAr10.getFront();
        queueAr10.dequeueAll();
        queueAr10.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean18 = queueAr10.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        boolean boolean12 = queueAr7.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) throwableArray24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        java.lang.Object obj28 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass29 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(wildcardClass29);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        queueAr46.enqueue((java.lang.Object) (-3));
        java.lang.Object obj52 = queueAr46.dequeue();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow65);
        queueAr46.enqueue((java.lang.Object) overflow65);
        overflow8.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray72 = overflow8.getSuppressed();
        java.lang.Class<?> wildcardClass73 = overflow8.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + (-3) + "'", obj52, (-3));
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow14.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        queueAr1.enqueue((java.lang.Object) overflow31);
        java.lang.Object obj55 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "DataStructures.Overflow");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.String str11 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DataStructures.Overflow" + "'", str11, "DataStructures.Overflow");
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow0.getSuppressed();
        java.lang.String str14 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DataStructures.Overflow" + "'", str14, "DataStructures.Overflow");
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow2.getSuppressed();
        java.lang.String str11 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DataStructures.Overflow" + "'", str11, "DataStructures.Overflow");
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(7);
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass3 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-3) + "'", obj9, (-3));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean10 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray19 = overflow4.getSuppressed();
        java.lang.String str20 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = null;
        queueAr1.enqueue(obj8);
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean5 = queueAr4.isEmpty();
        java.lang.Object obj6 = queueAr4.dequeue();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        queueAr8.makeEmpty();
        boolean boolean12 = queueAr8.isFull();
        queueAr4.enqueue((java.lang.Object) queueAr8);
        java.lang.Object obj14 = queueAr4.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (short) 0);
        java.lang.Class<?> wildcardClass18 = queueAr17.getClass();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr17);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr9.enqueue((java.lang.Object) 1L);
        java.lang.Object obj26 = queueAr9.getFront();
        DataStructures.QueueAr queueAr28 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr28.dequeueAll();
        java.lang.Object obj30 = queueAr28.getFront();
        queueAr28.makeEmpty();
        queueAr28.enqueue((java.lang.Object) (-3));
        boolean boolean34 = queueAr28.isEmpty();
        java.lang.Object obj35 = queueAr28.dequeue();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow53.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray88 = overflow86.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow86);
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        DataStructures.Overflow overflow92 = new DataStructures.Overflow();
        overflow90.addSuppressed((java.lang.Throwable) overflow92);
        overflow86.addSuppressed((java.lang.Throwable) overflow92);
        overflow67.addSuppressed((java.lang.Throwable) overflow92);
        overflow40.addSuppressed((java.lang.Throwable) overflow67);
        queueAr28.enqueue((java.lang.Object) overflow67);
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr28);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertEquals("'" + obj26 + "' != '" + 1L + "'", obj26, 1L);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + (-3) + "'", obj35, (-3));
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow18.getSuppressed();
        java.lang.Class<?> wildcardClass26 = overflow18.getClass();
        queueAr1.enqueue((java.lang.Object) overflow18);
        DataStructures.QueueAr queueAr29 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow30.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray47 = overflow42.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow62);
        overflow49.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray67 = overflow56.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray77 = overflow73.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray90 = overflow89.getSuppressed();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray93 = overflow91.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) overflow91);
        overflow73.addSuppressed((java.lang.Throwable) overflow85);
        overflow42.addSuppressed((java.lang.Throwable) overflow73);
        queueAr29.enqueue((java.lang.Object) overflow42);
        java.lang.Object obj98 = queueAr29.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj98);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(obj98);
        org.junit.Assert.assertEquals(obj98.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj98), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj98), "DataStructures.Overflow");
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.String str18 = overflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Overflow" + "'", str18, "DataStructures.Overflow");
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        java.lang.Class<?> wildcardClass23 = overflow16.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.String str34 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DataStructures.Overflow" + "'", str34, "DataStructures.Overflow");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(8);
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        boolean boolean14 = queueAr1.isEmpty();
        java.lang.Object obj15 = queueAr1.getFront();
        java.lang.Object obj16 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow14.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        queueAr1.enqueue((java.lang.Object) overflow31);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow55.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.String str63 = overflow31.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DataStructures.Overflow" + "'", str63, "DataStructures.Overflow");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = null;
        queueAr1.enqueue(obj8);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        overflow32.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        overflow32.addSuppressed((java.lang.Throwable) overflow52);
        overflow24.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Class<?> wildcardClass64 = overflow52.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(wildcardClass64);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray61 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow8.getSuppressed();
        java.lang.Class<?> wildcardClass63 = overflow8.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow23.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray50 = overflow37.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.String str52 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "DataStructures.Overflow" + "'", str52, "DataStructures.Overflow");
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.dequeueAll();
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.String str36 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.String str30 = overflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "DataStructures.Overflow" + "'", str30, "DataStructures.Overflow");
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow23.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray50 = overflow37.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Class<?> wildcardClass52 = overflow4.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow20.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        overflow39.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray57 = overflow46.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray83 = overflow81.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow63.addSuppressed((java.lang.Throwable) overflow75);
        overflow32.addSuppressed((java.lang.Throwable) overflow63);
        overflow7.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Class<?> wildcardClass88 = overflow63.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(wildcardClass88);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow20.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Class<?> wildcardClass49 = overflow20.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.String str35 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DataStructures.Overflow" + "'", str35, "DataStructures.Overflow");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        java.lang.Object obj2 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass3 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean9 = queueAr8.isEmpty();
        java.lang.Object obj10 = queueAr8.dequeue();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        java.lang.Object obj14 = queueAr12.getFront();
        queueAr12.makeEmpty();
        boolean boolean16 = queueAr12.isFull();
        queueAr8.enqueue((java.lang.Object) queueAr12);
        java.lang.Object obj18 = queueAr8.dequeue();
        java.lang.Object obj19 = queueAr8.getFront();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) 'a');
        queueAr8.enqueue((java.lang.Object) queueAr21);
        queueAr1.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj24 = queueAr21.getFront();
        java.lang.Object obj25 = queueAr21.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass26 = obj25.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.String str17 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        java.lang.Class<?> wildcardClass45 = queueAr16.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(wildcardClass45);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow55.addSuppressed((java.lang.Throwable) overflow83);
        overflow24.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray96 = overflow83.getSuppressed();
        java.lang.Class<?> wildcardClass97 = overflow83.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(wildcardClass97);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        boolean boolean15 = queueAr1.isEmpty();
        java.lang.Object obj16 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass18 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow7.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str32 = overflow20.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Overflow" + "'", str32, "DataStructures.Overflow");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        java.lang.Object obj2 = queueAr1.dequeue();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = obj4.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow46.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow46.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray69 = overflow46.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.String str71 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DataStructures.Overflow" + "'", str71, "DataStructures.Overflow");
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(8);
        java.lang.Object obj2 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable throwable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow5.addSuppressed(throwable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        java.lang.String str23 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DataStructures.Overflow" + "'", str23, "DataStructures.Overflow");
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow7.getSuppressed();
        java.lang.Class<?> wildcardClass20 = throwableArray19.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj11 = queueAr10.getFront();
        queueAr10.dequeueAll();
        java.lang.Object obj13 = queueAr10.dequeue();
        java.lang.Object obj14 = queueAr10.getFront();
        queueAr10.dequeueAll();
        queueAr10.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean18 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr6.dequeueAll();
        java.lang.Object obj8 = queueAr6.getFront();
        java.lang.Object obj9 = queueAr6.getFront();
        boolean boolean10 = queueAr6.isFull();
        queueAr6.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr6);
        boolean boolean13 = queueAr6.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.enqueue((java.lang.Object) (-2));
        boolean boolean16 = queueAr13.isFull();
        java.lang.Class<?> wildcardClass17 = queueAr13.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass17);
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) 3);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray43 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow32.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow45.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        overflow32.addSuppressed((java.lang.Throwable) overflow45);
        overflow21.addSuppressed((java.lang.Throwable) overflow45);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow45);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.String str11 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DataStructures.Overflow" + "'", str11, "DataStructures.Overflow");
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(0);
        boolean boolean2 = queueAr1.isEmpty();
        boolean boolean3 = queueAr1.isFull();
        boolean boolean4 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) 3);
        java.lang.Object obj9 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + 3 + "'", obj9, 3);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray46 = overflow35.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray56 = overflow52.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow52);
        overflow22.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray59 = overflow52.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow52);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow52.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.String str95 = overflow52.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "DataStructures.Overflow" + "'", str95, "DataStructures.Overflow");
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray80 = overflow5.getSuppressed();
        java.lang.String str81 = overflow5.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "DataStructures.Overflow" + "'", str81, "DataStructures.Overflow");
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        overflow38.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow38.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray79 = overflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow80.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray87 = overflow83.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray89 = overflow83.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow83);
        overflow12.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray92 = overflow38.getSuppressed();
        java.lang.String str93 = overflow38.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "DataStructures.Overflow" + "'", str93, "DataStructures.Overflow");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Class<?> wildcardClass28 = overflow6.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        java.lang.Object obj12 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj12);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray5 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        overflow3.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        overflow3.addSuppressed((java.lang.Throwable) overflow19);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray23 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = obj9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow6.getSuppressed();
        java.lang.Class<?> wildcardClass35 = throwableArray34.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray16 = overflow9.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray16);
        boolean boolean18 = queueAr1.isEmpty();
        boolean boolean19 = queueAr1.isFull();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) ' ');
        queueAr21.makeEmpty();
        java.lang.Object obj23 = queueAr21.getFront();
        boolean boolean24 = queueAr21.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) boolean24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow8.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        overflow20.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray38 = overflow27.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray48 = overflow44.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow44);
        overflow14.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.QueueAr queueAr52 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr52.dequeueAll();
        java.lang.Object obj54 = queueAr52.getFront();
        queueAr52.makeEmpty();
        queueAr52.enqueue((java.lang.Object) (-3));
        java.lang.Object obj58 = queueAr52.dequeue();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow71);
        queueAr52.enqueue((java.lang.Object) overflow71);
        overflow14.addSuppressed((java.lang.Throwable) overflow71);
        queueAr1.enqueue((java.lang.Object) overflow71);
        DataStructures.QueueAr queueAr80 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean81 = queueAr80.isEmpty();
        java.lang.Object obj82 = queueAr80.dequeue();
        DataStructures.QueueAr queueAr84 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr84.dequeueAll();
        java.lang.Object obj86 = queueAr84.getFront();
        queueAr84.makeEmpty();
        boolean boolean88 = queueAr84.isFull();
        queueAr80.enqueue((java.lang.Object) queueAr84);
        boolean boolean90 = queueAr84.isEmpty();
        queueAr84.enqueue((java.lang.Object) (-10.5d));
        boolean boolean93 = queueAr84.isEmpty();
        queueAr84.dequeueAll();
        java.lang.Object obj95 = queueAr84.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr84);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertEquals("'" + obj58 + "' != '" + (-3) + "'", obj58, (-3));
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNull(obj82);
        org.junit.Assert.assertNull(obj86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNull(obj95);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        boolean boolean23 = queueAr1.isFull();
        java.lang.Object obj24 = null;
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue(obj24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr21 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr21.dequeueAll();
        java.lang.Object obj23 = queueAr21.getFront();
        java.lang.Object obj24 = queueAr21.getFront();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow25.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        queueAr21.enqueue((java.lang.Object) overflow25);
        java.lang.Object obj37 = queueAr21.getFront();
        java.lang.Object obj38 = queueAr21.dequeue();
        queueAr1.enqueue((java.lang.Object) queueAr21);
        java.lang.Object obj40 = queueAr1.getFront();
        java.lang.Object obj41 = queueAr1.getFront();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow59.addSuppressed((java.lang.Throwable) overflow66);
        overflow44.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray78 = overflow66.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) overflow66);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj9 = queueAr1.getFront();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.dequeueAll();
        boolean boolean13 = queueAr11.isEmpty();
        queueAr11.dequeueAll();
        queueAr11.enqueue((java.lang.Object) (-4L));
        queueAr11.dequeueAll();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-4L) + "'", obj9, (-4L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.getFront();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow48);
        overflow18.addSuppressed((java.lang.Throwable) overflow48);
        queueAr1.enqueue((java.lang.Object) overflow18);
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass58 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.String str44 = overflow37.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "DataStructures.Overflow" + "'", str44, "DataStructures.Overflow");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 10);
        queueAr1.makeEmpty();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow31.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.String str45 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DataStructures.Overflow" + "'", str45, "DataStructures.Overflow");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray64 = overflow59.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow45.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow59.addSuppressed((java.lang.Throwable) overflow84);
        overflow32.addSuppressed((java.lang.Throwable) overflow59);
        overflow6.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.String str90 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "DataStructures.Overflow" + "'", str90, "DataStructures.Overflow");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (short) 100);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean7 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 100);
        queueAr1.makeEmpty();
        boolean boolean3 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        queueAr1.makeEmpty();
        java.lang.Object obj25 = queueAr1.getFront();
        boolean boolean26 = queueAr1.isFull();
        boolean boolean27 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-8.7d));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.String str32 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Overflow" + "'", str32, "DataStructures.Overflow");
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow6.getSuppressed();
        java.lang.String str29 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DataStructures.Overflow" + "'", str29, "DataStructures.Overflow");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        queueAr46.enqueue((java.lang.Object) (-3));
        java.lang.Object obj52 = queueAr46.dequeue();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow65);
        queueAr46.enqueue((java.lang.Object) overflow65);
        overflow8.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.String str72 = overflow65.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + (-3) + "'", obj52, (-3));
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DataStructures.Overflow" + "'", str72, "DataStructures.Overflow");
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        boolean boolean11 = queueAr5.isEmpty();
        queueAr5.enqueue((java.lang.Object) (-10.5d));
        boolean boolean14 = queueAr5.isEmpty();
        boolean boolean15 = queueAr5.isEmpty();
        java.lang.Object obj16 = queueAr5.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + obj16 + "' != '" + (-10.5d) + "'", obj16, (-10.5d));
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow14.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        queueAr1.enqueue((java.lang.Object) overflow31);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow55.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow63.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow63);
        overflow31.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.String str73 = overflow31.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "DataStructures.Overflow" + "'", str73, "DataStructures.Overflow");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) 8);
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 8 + "'", obj8, 8);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str33 = overflow20.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DataStructures.Overflow" + "'", str33, "DataStructures.Overflow");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        java.lang.Object obj27 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass28 = obj27.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 6L + "'", obj27, 6L);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray31 = overflow12.getSuppressed();
        java.lang.Class<?> wildcardClass32 = throwableArray31.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.String str33 = overflow31.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DataStructures.Overflow" + "'", str33, "DataStructures.Overflow");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow30);
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.String str36 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        boolean boolean13 = queueAr1.isFull();
        java.lang.Object obj14 = queueAr1.getFront();
        java.lang.Object obj15 = queueAr1.dequeue();
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray3 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow2.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow28.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow63);
        overflow45.addSuppressed((java.lang.Throwable) overflow57);
        overflow14.addSuppressed((java.lang.Throwable) overflow45);
        queueAr1.enqueue((java.lang.Object) overflow14);
        java.lang.Object obj70 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        java.lang.Object obj12 = queueAr1.getFront();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) 'a');
        queueAr1.enqueue((java.lang.Object) queueAr14);
        java.lang.Class<?> wildcardClass16 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj15 = queueAr1.getFront();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        boolean boolean19 = queueAr17.isEmpty();
        queueAr17.dequeueAll();
        boolean boolean21 = queueAr17.isEmpty();
        java.lang.Object obj22 = queueAr17.getFront();
        java.lang.Object obj23 = queueAr17.dequeue();
        java.lang.Object obj24 = queueAr17.dequeue();
        java.lang.Object obj25 = queueAr17.dequeue();
        queueAr1.enqueue(obj25);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) (-9));
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow12.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray29 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow63.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow73);
        overflow55.addSuppressed((java.lang.Throwable) overflow67);
        overflow24.addSuppressed((java.lang.Throwable) overflow55);
        overflow0.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray80 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        queueAr8.makeEmpty();
        java.lang.Object obj13 = queueAr8.dequeue();
        boolean boolean14 = queueAr8.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr(7);
        queueAr16.dequeueAll();
        java.lang.Object obj18 = queueAr16.getFront();
        queueAr8.enqueue(obj18);
        queueAr1.enqueue(obj18);
        queueAr1.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow6.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow45);
        overflow20.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray9 = overflow4.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray16 = overflow4.getSuppressed();
        DataStructures.QueueAr queueAr18 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean19 = queueAr18.isEmpty();
        java.lang.Object obj20 = queueAr18.dequeue();
        DataStructures.QueueAr queueAr22 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr22.dequeueAll();
        java.lang.Object obj24 = queueAr22.getFront();
        queueAr22.makeEmpty();
        boolean boolean26 = queueAr22.isFull();
        queueAr18.enqueue((java.lang.Object) queueAr22);
        boolean boolean28 = queueAr22.isEmpty();
        boolean boolean29 = queueAr22.isFull();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow66.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow72.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) overflow72);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        queueAr22.enqueue((java.lang.Object) overflow54);
        overflow4.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray79 = overflow4.getSuppressed();
        java.lang.String str80 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.enqueue((java.lang.Object) 9.6d);
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        java.lang.Object obj9 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + false + "'", obj9, false);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj12 = queueAr1.getFront();
        java.lang.Object obj13 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow28);
        overflow6.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.String str36 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "DataStructures.Overflow" + "'", str36, "DataStructures.Overflow");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.dequeue();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) false);
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + false + "'", obj10, false);
        org.junit.Assert.assertEquals("'" + obj11 + "' != '" + false + "'", obj11, false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow46.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow46.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray69 = overflow46.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray75 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        overflow73.addSuppressed((java.lang.Throwable) overflow79);
        overflow6.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.String str88 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DataStructures.Overflow" + "'", str88, "DataStructures.Overflow");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow10.getSuppressed();
        queueAr1.enqueue((java.lang.Object) throwableArray21);
        java.lang.Class<?> wildcardClass23 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 10);
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass3 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        java.lang.Class<?> wildcardClass23 = throwableArray22.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.String str20 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isEmpty();
        java.lang.Object obj20 = queueAr1.dequeue();
        boolean boolean21 = queueAr1.isEmpty();
        boolean boolean22 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 0);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass4 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass9 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        boolean boolean8 = queueAr1.isFull();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        boolean boolean14 = queueAr10.isEmpty();
        java.lang.Object obj15 = queueAr10.getFront();
        java.lang.Object obj16 = queueAr10.dequeue();
        boolean boolean17 = queueAr10.isFull();
        java.lang.Object obj18 = queueAr10.getFront();
        boolean boolean19 = queueAr10.isFull();
        java.lang.Class<?> wildcardClass20 = queueAr10.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass20);
        queueAr1.dequeueAll();
        java.lang.Object obj23 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Object obj14 = queueAr1.dequeue();
        java.lang.Object obj15 = queueAr1.dequeue();
        java.lang.Object obj16 = queueAr1.getFront();
        java.lang.Object obj17 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj14 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable throwable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow20.addSuppressed(throwable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow6.getSuppressed();
        java.lang.String str16 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DataStructures.Overflow" + "'", str16, "DataStructures.Overflow");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray40 = overflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray64 = overflow59.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray69 = overflow65.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow45.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow78.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray83 = overflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        overflow78.addSuppressed((java.lang.Throwable) overflow84);
        overflow59.addSuppressed((java.lang.Throwable) overflow84);
        overflow32.addSuppressed((java.lang.Throwable) overflow59);
        overflow6.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.String str92 = overflow90.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "DataStructures.Overflow" + "'", str92, "DataStructures.Overflow");
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(6);
        queueAr1.makeEmpty();
        boolean boolean3 = queueAr1.isEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow2.getSuppressed();
        java.lang.String str20 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DataStructures.Overflow" + "'", str20, "DataStructures.Overflow");
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow7.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray30 = overflow24.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow38.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        overflow63.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray85 = overflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow83);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        java.lang.Throwable[] throwableArray91 = overflow89.getSuppressed();
        overflow83.addSuppressed((java.lang.Throwable) overflow89);
        overflow63.addSuppressed((java.lang.Throwable) overflow83);
        overflow55.addSuppressed((java.lang.Throwable) overflow83);
        overflow24.addSuppressed((java.lang.Throwable) overflow83);
        java.lang.Throwable[] throwableArray96 = overflow24.getSuppressed();
        java.lang.String str97 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DataStructures.Overflow" + "'", str97, "DataStructures.Overflow");
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow7.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray44 = overflow33.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow68);
        overflow50.addSuppressed((java.lang.Throwable) overflow62);
        overflow19.addSuppressed((java.lang.Throwable) overflow50);
        queueAr6.enqueue((java.lang.Object) overflow19);
        queueAr1.enqueue((java.lang.Object) overflow19);
        java.lang.Class<?> wildcardClass76 = overflow19.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray41 = overflow37.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow37.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray44 = overflow37.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        DataStructures.QueueAr queueAr4 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr4.dequeueAll();
        boolean boolean6 = queueAr4.isEmpty();
        queueAr4.dequeueAll();
        queueAr4.enqueue((java.lang.Object) (-4L));
        boolean boolean10 = queueAr4.isFull();
        queueAr4.dequeueAll();
        boolean boolean12 = queueAr4.isEmpty();
        DataStructures.QueueAr queueAr14 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr14.enqueue((java.lang.Object) (-2));
        boolean boolean17 = queueAr14.isFull();
        java.lang.Class<?> wildcardClass18 = queueAr14.getClass();
        queueAr4.enqueue((java.lang.Object) wildcardClass18);
        queueAr4.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr4);
        java.lang.Object obj22 = queueAr4.dequeue();
        java.lang.Class<?> wildcardClass23 = queueAr4.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        java.lang.String str8 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "DataStructures.Overflow" + "'", str8, "DataStructures.Overflow");
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) '#');
        queueAr1.enqueue((java.lang.Object) 10L);
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 10L + "'", obj4, 10L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        boolean boolean38 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray11 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass13 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Class<?> wildcardClass48 = overflow2.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj13 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass14 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(8);
        boolean boolean2 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow2.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow2.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow20.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray32 = overflow20.getSuppressed();
        DataStructures.QueueAr queueAr34 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean35 = queueAr34.isEmpty();
        java.lang.Object obj36 = queueAr34.dequeue();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr38.dequeueAll();
        java.lang.Object obj40 = queueAr38.getFront();
        queueAr38.makeEmpty();
        boolean boolean42 = queueAr38.isFull();
        queueAr34.enqueue((java.lang.Object) queueAr38);
        boolean boolean44 = queueAr38.isEmpty();
        boolean boolean45 = queueAr38.isFull();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow59);
        overflow46.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray64 = overflow53.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray71 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow70.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray77 = overflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow78);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray84 = overflow82.getSuppressed();
        overflow78.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray87 = overflow86.getSuppressed();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow88);
        java.lang.Throwable[] throwableArray90 = overflow88.getSuppressed();
        overflow82.addSuppressed((java.lang.Throwable) overflow88);
        overflow70.addSuppressed((java.lang.Throwable) overflow82);
        queueAr38.enqueue((java.lang.Object) overflow70);
        overflow20.addSuppressed((java.lang.Throwable) overflow70);
        overflow2.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.String str96 = overflow70.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DataStructures.Overflow" + "'", str96, "DataStructures.Overflow");
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass6 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Object obj17 = queueAr1.getFront();
        java.lang.Object obj18 = queueAr1.dequeue();
        boolean boolean19 = queueAr1.isFull();
        boolean boolean20 = queueAr1.isFull();
        boolean boolean21 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj10 = queueAr1.getFront();
        java.lang.Object obj11 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        java.lang.Class<?> wildcardClass27 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isFull();
        DataStructures.QueueAr queueAr7 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr7.dequeueAll();
        boolean boolean9 = queueAr7.isEmpty();
        queueAr7.dequeueAll();
        queueAr7.makeEmpty();
        java.lang.Object obj12 = queueAr7.dequeue();
        queueAr7.enqueue((java.lang.Object) (-5));
        boolean boolean15 = queueAr7.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr7);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray39 = overflow33.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            queueAr7.enqueue((java.lang.Object) throwableArray39);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow27);
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray32 = overflow21.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow38);
        overflow8.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.QueueAr queueAr46 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr46.dequeueAll();
        java.lang.Object obj48 = queueAr46.getFront();
        queueAr46.makeEmpty();
        queueAr46.enqueue((java.lang.Object) (-3));
        java.lang.Object obj52 = queueAr46.dequeue();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow65);
        queueAr46.enqueue((java.lang.Object) overflow65);
        overflow8.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable throwable72 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow65.addSuppressed(throwable72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNull(obj48);
        org.junit.Assert.assertEquals("'" + obj52 + "' != '" + (-3) + "'", obj52, (-3));
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr8.dequeueAll();
        java.lang.Object obj10 = queueAr8.getFront();
        java.lang.Object obj11 = queueAr8.getFront();
        boolean boolean12 = queueAr8.isEmpty();
        boolean boolean13 = queueAr8.isFull();
        queueAr1.enqueue((java.lang.Object) boolean13);
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        overflow69.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        overflow43.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        java.lang.String str90 = overflow85.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "DataStructures.Overflow" + "'", str90, "DataStructures.Overflow");
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean11 = queueAr1.isEmpty();
        queueAr1.enqueue((java.lang.Object) (-5));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        queueAr17.makeEmpty();
        java.lang.Object obj25 = queueAr17.getFront();
        java.lang.Object obj26 = queueAr17.getFront();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow2.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow38);
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray43 = overflow32.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray45 = overflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow56.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray63 = overflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray69 = overflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray73 = overflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow74);
        overflow70.addSuppressed((java.lang.Throwable) overflow72);
        overflow64.addSuppressed((java.lang.Throwable) overflow70);
        overflow56.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow81.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow85);
        overflow32.addSuppressed((java.lang.Throwable) overflow56);
        overflow2.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray93 = overflow32.getSuppressed();
        java.lang.String str94 = overflow32.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "DataStructures.Overflow" + "'", str94, "DataStructures.Overflow");
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.String str39 = overflow5.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DataStructures.Overflow" + "'", str39, "DataStructures.Overflow");
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        overflow20.addSuppressed((java.lang.Throwable) overflow26);
        overflow12.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow12.getSuppressed();
        java.lang.String str37 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DataStructures.Overflow" + "'", str37, "DataStructures.Overflow");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow2.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Class<?> wildcardClass14 = overflow8.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        overflow24.addSuppressed((java.lang.Throwable) overflow54);
        overflow6.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray62 = overflow24.getSuppressed();
        java.lang.String str63 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DataStructures.Overflow" + "'", str63, "DataStructures.Overflow");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray36 = overflow25.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow42);
        overflow12.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray49 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable throwable51 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow12.addSuppressed(throwable51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow0.getSuppressed();
        java.lang.String str23 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "DataStructures.Overflow" + "'", str23, "DataStructures.Overflow");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean16 = queueAr15.isEmpty();
        java.lang.Object obj17 = queueAr15.dequeue();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        java.lang.Object obj21 = queueAr19.getFront();
        queueAr19.makeEmpty();
        boolean boolean23 = queueAr19.isFull();
        queueAr15.enqueue((java.lang.Object) queueAr19);
        boolean boolean25 = queueAr19.isEmpty();
        queueAr19.enqueue((java.lang.Object) (-10.5d));
        queueAr11.enqueue((java.lang.Object) queueAr19);
        queueAr11.makeEmpty();
        DataStructures.QueueAr queueAr31 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr31.dequeueAll();
        java.lang.Object obj33 = queueAr31.getFront();
        java.lang.Object obj34 = queueAr31.getFront();
        boolean boolean35 = queueAr31.isEmpty();
        boolean boolean36 = queueAr31.isFull();
        queueAr31.dequeueAll();
        java.lang.Object obj38 = queueAr31.dequeue();
        queueAr31.dequeueAll();
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean42 = queueAr41.isEmpty();
        java.lang.Object obj43 = queueAr41.dequeue();
        DataStructures.QueueAr queueAr45 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr45.dequeueAll();
        java.lang.Object obj47 = queueAr45.getFront();
        queueAr45.makeEmpty();
        boolean boolean49 = queueAr45.isFull();
        queueAr41.enqueue((java.lang.Object) queueAr45);
        java.lang.Object obj51 = queueAr41.dequeue();
        queueAr31.enqueue((java.lang.Object) queueAr41);
        queueAr11.enqueue((java.lang.Object) queueAr31);
        boolean boolean54 = queueAr31.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-4L) + "'", obj8, (-4L));
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr10.dequeueAll();
        boolean boolean12 = queueAr10.isEmpty();
        queueAr10.dequeueAll();
        java.lang.Object obj14 = queueAr10.dequeue();
        java.lang.Object obj15 = queueAr10.dequeue();
        queueAr10.enqueue((java.lang.Object) false);
        boolean boolean18 = queueAr10.isFull();
        java.lang.Object obj19 = queueAr10.getFront();
        boolean boolean20 = queueAr10.isEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr10);
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + false + "'", obj19, false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        overflow24.addSuppressed((java.lang.Throwable) overflow54);
        overflow6.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.String str62 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow15);
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow4.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray19 = overflow4.getSuppressed();
        java.lang.Class<?> wildcardClass20 = throwableArray19.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.enqueue((java.lang.Object) (-3));
        boolean boolean7 = queueAr1.isEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray14 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow13);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray37 = overflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray45 = overflow40.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray47 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow46.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow46);
        overflow26.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray58 = overflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        overflow59.addSuppressed((java.lang.Throwable) overflow65);
        overflow40.addSuppressed((java.lang.Throwable) overflow65);
        overflow13.addSuppressed((java.lang.Throwable) overflow40);
        queueAr1.enqueue((java.lang.Object) overflow40);
        DataStructures.QueueAr queueAr72 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean73 = queueAr72.isEmpty();
        java.lang.Object obj74 = queueAr72.dequeue();
        DataStructures.QueueAr queueAr76 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr76.dequeueAll();
        java.lang.Object obj78 = queueAr76.getFront();
        queueAr76.makeEmpty();
        boolean boolean80 = queueAr76.isFull();
        queueAr72.enqueue((java.lang.Object) queueAr76);
        java.lang.Object obj82 = queueAr72.dequeue();
        boolean boolean83 = queueAr72.isFull();
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) queueAr72);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + (-3) + "'", obj8, (-3));
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertNull(obj78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(obj82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray28 = overflow6.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray36 = overflow29.getSuppressed();
        java.lang.Class<?> wildcardClass37 = overflow29.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray36 = overflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow43);
        overflow30.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray48 = overflow37.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow54);
        overflow24.addSuppressed((java.lang.Throwable) overflow54);
        overflow6.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray62 = overflow24.getSuppressed();
        java.lang.Class<?> wildcardClass63 = overflow24.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow40.getSuppressed();
        queueAr17.enqueue((java.lang.Object) throwableArray46);
        queueAr17.dequeueAll();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass7 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean4 = queueAr1.isEmpty();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.String str4 = overflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DataStructures.Overflow" + "'", str4, "DataStructures.Overflow");
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) 8.4d);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.getFront();
        DataStructures.QueueAr queueAr26 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr26.dequeueAll();
        boolean boolean28 = queueAr26.isEmpty();
        queueAr26.dequeueAll();
        queueAr26.makeEmpty();
        boolean boolean31 = queueAr26.isFull();
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj34 = queueAr33.getFront();
        queueAr33.dequeueAll();
        java.lang.Object obj36 = queueAr33.dequeue();
        queueAr26.enqueue(obj36);
        queueAr26.makeEmpty();
        queueAr9.enqueue((java.lang.Object) queueAr26);
        DataStructures.QueueAr queueAr41 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr41.dequeueAll();
        java.lang.Object obj43 = queueAr41.getFront();
        queueAr41.makeEmpty();
        boolean boolean45 = queueAr41.isFull();
        boolean boolean46 = queueAr41.isEmpty();
        queueAr41.makeEmpty();
        queueAr41.dequeueAll();
        queueAr41.makeEmpty();
        java.lang.Object obj50 = queueAr41.getFront();
        java.lang.Object obj51 = queueAr41.getFront();
        // The following exception was thrown during execution in test generation
        try {
            queueAr9.enqueue((java.lang.Object) queueAr41);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNull(obj51);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        overflow39.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray53 = overflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow60);
        overflow47.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow71);
        overflow41.addSuppressed((java.lang.Throwable) overflow71);
        overflow23.addSuppressed((java.lang.Throwable) overflow41);
        overflow5.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray81 = overflow80.getSuppressed();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray85 = overflow84.getSuppressed();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow86);
        overflow82.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray89 = overflow84.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray91 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray93 = overflow90.getSuppressed();
        java.lang.Throwable[] throwableArray94 = overflow90.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray96 = overflow84.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Class<?> wildcardClass98 = overflow84.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertNotNull(wildcardClass98);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        boolean boolean11 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr13 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr13.dequeueAll();
        java.lang.Object obj15 = queueAr13.getFront();
        queueAr13.makeEmpty();
        queueAr13.enqueue((java.lang.Object) (-3));
        java.lang.Object obj19 = queueAr13.dequeue();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow32);
        queueAr13.enqueue((java.lang.Object) overflow32);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray43 = overflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray55 = overflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow56);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray59 = overflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow60);
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray65 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow64);
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray72 = overflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray76 = overflow75.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray79 = overflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray82 = overflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow77.addSuppressed((java.lang.Throwable) overflow83);
        overflow58.addSuppressed((java.lang.Throwable) overflow83);
        overflow32.addSuppressed((java.lang.Throwable) overflow83);
        queueAr1.enqueue((java.lang.Object) overflow32);
        java.lang.Class<?> wildcardClass89 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertEquals("'" + obj19 + "' != '" + (-3) + "'", obj19, (-3));
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj4 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow2.getSuppressed();
        DataStructures.QueueAr queueAr19 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr19.dequeueAll();
        boolean boolean21 = queueAr19.isEmpty();
        queueAr19.dequeueAll();
        queueAr19.makeEmpty();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        queueAr19.enqueue((java.lang.Object) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = overflow40.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray46 = overflow24.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow47.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow47);
        overflow2.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray66 = overflow65.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow67.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow67.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray80 = overflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow81.addSuppressed((java.lang.Throwable) overflow83);
        overflow75.addSuppressed((java.lang.Throwable) overflow81);
        overflow67.addSuppressed((java.lang.Throwable) overflow81);
        overflow2.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.String str91 = overflow81.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "DataStructures.Overflow" + "'", str91, "DataStructures.Overflow");
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass8 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        boolean boolean15 = queueAr1.isFull();
        boolean boolean16 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        overflow2.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        overflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow2.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray44 = overflow2.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray44);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray10 = overflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow11);
        java.lang.String str17 = overflow11.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "DataStructures.Overflow" + "'", str17, "DataStructures.Overflow");
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        DataStructures.QueueAr queueAr10 = new DataStructures.QueueAr((int) ' ');
        queueAr1.enqueue((java.lang.Object) queueAr10);
        // The following exception was thrown during execution in test generation
        try {
            queueAr1.enqueue((java.lang.Object) (byte) 10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        java.lang.Class<?> wildcardClass2 = queueAr1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        overflow0.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray18 = overflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray22 = overflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow13.addSuppressed((java.lang.Throwable) overflow19);
        overflow6.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.String str28 = overflow6.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DataStructures.Overflow" + "'", str28, "DataStructures.Overflow");
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        boolean boolean14 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr16.dequeueAll();
        boolean boolean18 = queueAr16.isEmpty();
        queueAr16.dequeueAll();
        queueAr16.makeEmpty();
        boolean boolean21 = queueAr16.isFull();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj24 = queueAr23.getFront();
        queueAr23.dequeueAll();
        java.lang.Object obj26 = queueAr23.dequeue();
        queueAr16.enqueue(obj26);
        queueAr16.makeEmpty();
        queueAr16.dequeueAll();
        java.lang.Object obj30 = queueAr16.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr16);
        DataStructures.QueueAr queueAr33 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean34 = queueAr33.isEmpty();
        java.lang.Object obj35 = queueAr33.dequeue();
        DataStructures.QueueAr queueAr37 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr37.dequeueAll();
        java.lang.Object obj39 = queueAr37.getFront();
        queueAr37.makeEmpty();
        boolean boolean41 = queueAr37.isFull();
        queueAr33.enqueue((java.lang.Object) queueAr37);
        java.lang.Object obj43 = queueAr33.dequeue();
        queueAr16.enqueue((java.lang.Object) queueAr33);
        java.lang.Object obj45 = queueAr16.getFront();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        java.lang.String str10 = overflow6.toString();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DataStructures.Overflow" + "'", str10, "DataStructures.Overflow");
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        boolean boolean2 = queueAr1.isFull();
        java.lang.Object obj3 = queueAr1.getFront();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean9 = queueAr1.isFull();
        queueAr1.makeEmpty();
        java.lang.Object obj11 = queueAr1.getFront();
        boolean boolean12 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.enqueue((java.lang.Object) (-4L));
        boolean boolean7 = queueAr1.isFull();
        queueAr1.dequeueAll();
        boolean boolean9 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr11.enqueue((java.lang.Object) (-2));
        boolean boolean14 = queueAr11.isFull();
        java.lang.Class<?> wildcardClass15 = queueAr11.getClass();
        queueAr1.enqueue((java.lang.Object) wildcardClass15);
        boolean boolean17 = queueAr1.isEmpty();
        boolean boolean18 = queueAr1.isEmpty();
        java.lang.Object obj19 = queueAr1.getFront();
        java.lang.Object obj20 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "class DataStructures.QueueAr");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "class DataStructures.QueueAr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "class DataStructures.QueueAr");
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray17 = overflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray26 = overflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray34 = overflow30.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow30);
        overflow8.addSuppressed((java.lang.Throwable) overflow18);
        queueAr1.enqueue((java.lang.Object) overflow8);
        java.lang.Class<?> wildcardClass38 = overflow8.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(wildcardClass38);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.dequeue();
        java.lang.Object obj5 = queueAr1.getFront();
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.getFront();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Object obj11 = queueAr1.dequeue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        boolean boolean7 = queueAr1.isFull();
        java.lang.Object obj8 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isEmpty();
        boolean boolean6 = queueAr1.isFull();
        queueAr1.dequeueAll();
        java.lang.Object obj8 = queueAr1.dequeue();
        boolean boolean9 = queueAr1.isFull();
        boolean boolean10 = queueAr1.isEmpty();
        java.lang.Class<?> wildcardClass11 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Class<?> wildcardClass5 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr11 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj12 = queueAr11.getFront();
        queueAr1.enqueue((java.lang.Object) queueAr11);
        java.lang.Object obj14 = queueAr11.getFront();
        queueAr11.dequeueAll();
        java.lang.Object obj16 = queueAr11.dequeue();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(8);
        queueAr1.enqueue((java.lang.Object) (-4.6d));
        queueAr1.dequeueAll();
        java.lang.Object obj5 = queueAr1.getFront();
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isFull();
        java.lang.Object obj7 = queueAr1.dequeue();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = null;
        queueAr1.enqueue(obj6);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-5));
        boolean boolean9 = queueAr1.isFull();
        java.lang.Object obj10 = queueAr1.dequeue();
        java.lang.Class<?> wildcardClass11 = obj10.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-5) + "'", obj10, (-5));
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow14.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        queueAr1.enqueue((java.lang.Object) overflow31);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray56 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow55.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray63 = overflow55.getSuppressed();
        java.lang.String str64 = overflow55.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "DataStructures.Overflow" + "'", str64, "DataStructures.Overflow");
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) ' ');
        queueAr1.makeEmpty();
        java.lang.Object obj3 = queueAr1.getFront();
        boolean boolean4 = queueAr1.isEmpty();
        DataStructures.QueueAr queueAr6 = new DataStructures.QueueAr(2);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray8 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow7.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray16 = overflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        overflow17.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow39.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray44 = overflow33.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray46 = overflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray51 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray54 = overflow50.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray61 = overflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray67 = overflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow68);
        overflow50.addSuppressed((java.lang.Throwable) overflow62);
        overflow19.addSuppressed((java.lang.Throwable) overflow50);
        queueAr6.enqueue((java.lang.Object) overflow19);
        queueAr1.enqueue((java.lang.Object) overflow19);
        java.lang.String str76 = overflow19.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "DataStructures.Overflow" + "'", str76, "DataStructures.Overflow");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr(1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isFull();
        java.lang.Object obj4 = null;
        queueAr1.enqueue(obj4);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr9.dequeue();
        java.lang.Object obj25 = queueAr9.getFront();
        queueAr9.dequeueAll();
        java.lang.Object obj27 = queueAr9.getFront();
        java.lang.Object obj28 = queueAr9.getFront();
        java.lang.Object obj29 = queueAr9.getFront();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        boolean boolean7 = queueAr1.isEmpty();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray7 = overflow6.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        queueAr1.enqueue((java.lang.Object) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray29 = overflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        overflow6.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Class<?> wildcardClass34 = overflow30.getClass();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(wildcardClass34);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        java.lang.Throwable[] throwableArray4 = overflow2.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.String str16 = overflow12.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DataStructures.Overflow" + "'", str16, "DataStructures.Overflow");
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow20);
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray25 = overflow14.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray27 = overflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray38 = overflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray42 = overflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray48 = overflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow49.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        queueAr1.enqueue((java.lang.Object) overflow31);
        java.lang.Throwable[] throwableArray55 = overflow31.getSuppressed();
        java.lang.String str56 = overflow31.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "DataStructures.Overflow" + "'", str56, "DataStructures.Overflow");
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.dequeueAll();
        queueAr1.dequeueAll();
        java.lang.Object obj11 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray2 = overflow1.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow1.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray9 = overflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow13.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow13);
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray24 = overflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow25);
        overflow21.addSuppressed((java.lang.Throwable) overflow23);
        overflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow0.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray32 = overflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.String str37 = overflow33.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "DataStructures.Overflow" + "'", str37, "DataStructures.Overflow");
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow0.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray9 = overflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray13 = overflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow12.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray21 = overflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray37 = overflow26.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray39 = overflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray44 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray50 = overflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow51);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow61.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow43.addSuppressed((java.lang.Throwable) overflow55);
        overflow12.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray68 = overflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        overflow75.addSuppressed((java.lang.Throwable) overflow77);
        overflow69.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        overflow43.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable throwable89 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow85.addSuppressed(throwable89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean2 = queueAr1.isEmpty();
        java.lang.Object obj3 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr5 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr5.dequeueAll();
        java.lang.Object obj7 = queueAr5.getFront();
        queueAr5.makeEmpty();
        boolean boolean9 = queueAr5.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr5);
        java.lang.Object obj11 = queueAr1.dequeue();
        boolean boolean12 = queueAr1.isEmpty();
        java.lang.Object obj13 = queueAr1.dequeue();
        boolean boolean14 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = null;
        queueAr1.enqueue(obj7);
        queueAr1.makeEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isFull();
        DataStructures.QueueAr queueAr8 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj9 = queueAr8.getFront();
        queueAr8.dequeueAll();
        java.lang.Object obj11 = queueAr8.dequeue();
        queueAr1.enqueue(obj11);
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        java.lang.Object obj15 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr17 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr17.dequeueAll();
        java.lang.Object obj19 = queueAr17.getFront();
        queueAr17.makeEmpty();
        boolean boolean21 = queueAr17.isFull();
        queueAr17.makeEmpty();
        queueAr1.enqueue((java.lang.Object) queueAr17);
        boolean boolean24 = queueAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray1 = overflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow2);
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray5 = overflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        overflow2.addSuppressed((java.lang.Throwable) overflow6);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray15 = overflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow16);
        overflow12.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray20 = overflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray25 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow24.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow24);
        overflow2.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        DataStructures.QueueAr queueAr35 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean36 = queueAr35.isEmpty();
        DataStructures.QueueAr queueAr38 = new DataStructures.QueueAr((int) (byte) 1);
        boolean boolean39 = queueAr38.isEmpty();
        java.lang.Object obj40 = queueAr38.dequeue();
        DataStructures.QueueAr queueAr42 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr42.dequeueAll();
        java.lang.Object obj44 = queueAr42.getFront();
        queueAr42.makeEmpty();
        boolean boolean46 = queueAr42.isFull();
        queueAr38.enqueue((java.lang.Object) queueAr42);
        java.lang.Object obj48 = queueAr38.dequeue();
        queueAr35.enqueue((java.lang.Object) queueAr38);
        java.lang.Object obj50 = queueAr38.getFront();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray52 = overflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray57 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow56.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray62 = overflow61.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) overflow63);
        queueAr38.enqueue((java.lang.Object) overflow63);
        overflow31.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray74 = overflow73.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow79);
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow85.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray89 = overflow85.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) overflow85);
        overflow31.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray92 = overflow31.getSuppressed();
        java.lang.Class<?> wildcardClass93 = overflow31.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertNull(obj44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj2 = queueAr1.getFront();
        queueAr1.dequeueAll();
        java.lang.Object obj4 = queueAr1.dequeue();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.dequeueAll();
        boolean boolean8 = queueAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray11 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow10.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray27 = overflow22.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray31 = overflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray35 = overflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray41 = overflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray47 = overflow36.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray49 = overflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray54 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow53.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray60 = overflow59.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray64 = overflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray70 = overflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow71);
        overflow53.addSuppressed((java.lang.Throwable) overflow65);
        overflow22.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray78 = overflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray84 = overflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray88 = overflow87.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow89);
        overflow85.addSuppressed((java.lang.Throwable) overflow87);
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        DataStructures.Overflow overflow93 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray94 = overflow93.getSuppressed();
        DataStructures.Overflow overflow95 = new DataStructures.Overflow();
        overflow93.addSuppressed((java.lang.Throwable) overflow95);
        overflow79.addSuppressed((java.lang.Throwable) overflow95);
        overflow53.addSuppressed((java.lang.Throwable) overflow95);
        queueAr1.enqueue((java.lang.Object) overflow95);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        boolean boolean6 = queueAr1.isEmpty();
        queueAr1.makeEmpty();
        java.lang.Object obj8 = queueAr1.dequeue();
        java.lang.Object obj9 = queueAr1.dequeue();
        boolean boolean10 = queueAr1.isEmpty();
        boolean boolean11 = queueAr1.isFull();
        java.lang.Class<?> wildcardClass12 = queueAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        queueAr1.makeEmpty();
        boolean boolean5 = queueAr1.isFull();
        java.lang.Object obj6 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) (-1L));
        queueAr1.makeEmpty();
        boolean boolean10 = queueAr1.isFull();
        DataStructures.QueueAr queueAr12 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr12.dequeueAll();
        boolean boolean14 = queueAr12.isEmpty();
        queueAr12.dequeueAll();
        boolean boolean16 = queueAr12.isEmpty();
        boolean boolean17 = queueAr12.isFull();
        queueAr12.enqueue((java.lang.Object) (-4L));
        boolean boolean20 = queueAr12.isFull();
        queueAr12.makeEmpty();
        DataStructures.QueueAr queueAr23 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr23.dequeueAll();
        java.lang.Object obj25 = queueAr23.getFront();
        queueAr23.makeEmpty();
        boolean boolean27 = queueAr23.isFull();
        queueAr23.dequeueAll();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray30 = overflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray34 = overflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow35);
        overflow31.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray38 = overflow31.getSuppressed();
        queueAr23.enqueue((java.lang.Object) throwableArray38);
        queueAr12.enqueue((java.lang.Object) throwableArray38);
        queueAr1.enqueue((java.lang.Object) throwableArray38);
        java.lang.Object obj42 = queueAr1.dequeue();
        java.lang.Object obj43 = queueAr1.getFront();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass44 = obj43.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertNull(obj43);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        java.lang.Object obj3 = queueAr1.getFront();
        java.lang.Object obj4 = queueAr1.getFront();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray6 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray12 = overflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow13);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        queueAr1.enqueue((java.lang.Object) overflow5);
        java.lang.Throwable[] throwableArray17 = overflow5.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray19 = overflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray23 = overflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow24);
        overflow20.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray28 = overflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        java.lang.Throwable[] throwableArray33 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray34 = overflow32.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        overflow5.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray39 = overflow5.getSuppressed();
        java.lang.String str40 = overflow5.toString();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "DataStructures.Overflow" + "'", str40, "DataStructures.Overflow");
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.enqueue((java.lang.Object) (-2));
        boolean boolean4 = queueAr1.isFull();
        queueAr1.makeEmpty();
        boolean boolean6 = queueAr1.isEmpty();
        java.lang.Object obj7 = queueAr1.dequeue();
        DataStructures.QueueAr queueAr9 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr9.dequeueAll();
        boolean boolean11 = queueAr9.isEmpty();
        queueAr9.dequeueAll();
        queueAr9.makeEmpty();
        boolean boolean14 = queueAr9.isFull();
        DataStructures.QueueAr queueAr16 = new DataStructures.QueueAr((int) (byte) 1);
        java.lang.Object obj17 = queueAr16.getFront();
        queueAr16.dequeueAll();
        java.lang.Object obj19 = queueAr16.dequeue();
        queueAr9.enqueue(obj19);
        queueAr9.makeEmpty();
        queueAr9.dequeueAll();
        queueAr1.enqueue((java.lang.Object) queueAr9);
        java.lang.Object obj24 = queueAr1.dequeue();
        queueAr1.enqueue((java.lang.Object) 6L);
        java.lang.Object obj27 = queueAr1.dequeue();
        boolean boolean28 = queueAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals("'" + obj27 + "' != '" + 6L + "'", obj27, 6L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        DataStructures.QueueAr queueAr1 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr1.dequeueAll();
        boolean boolean3 = queueAr1.isEmpty();
        queueAr1.dequeueAll();
        boolean boolean5 = queueAr1.isEmpty();
        java.lang.Object obj6 = queueAr1.getFront();
        java.lang.Object obj7 = queueAr1.dequeue();
        boolean boolean8 = queueAr1.isFull();
        java.lang.Object obj9 = queueAr1.getFront();
        boolean boolean10 = queueAr1.isFull();
        boolean boolean11 = queueAr1.isFull();
        queueAr1.makeEmpty();
        queueAr1.dequeueAll();
        DataStructures.QueueAr queueAr15 = new DataStructures.QueueAr((int) (byte) 1);
        queueAr15.dequeueAll();
        boolean boolean17 = queueAr15.isEmpty();
        queueAr15.dequeueAll();
        boolean boolean19 = queueAr15.isEmpty();
        boolean boolean20 = queueAr15.isFull();
        queueAr15.enqueue((java.lang.Object) (-4L));
        java.lang.Object obj23 = queueAr15.dequeue();
        boolean boolean24 = queueAr15.isEmpty();
        boolean boolean25 = queueAr15.isFull();
        queueAr1.enqueue((java.lang.Object) queueAr15);
        java.lang.Object obj27 = queueAr1.dequeue();
        boolean boolean28 = queueAr1.isFull();
        queueAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + (-4L) + "'", obj23, (-4L));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }
}

