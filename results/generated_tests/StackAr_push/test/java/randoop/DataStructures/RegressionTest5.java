package DataStructures;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.topAndPop();
        boolean boolean13 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr15 = new DataStructures.StackAr(0);
        java.lang.Object obj16 = stackAr15.topAndPop();
        boolean boolean17 = stackAr15.isEmpty();
        java.lang.Object obj18 = stackAr15.topAndPop();
        boolean boolean19 = stackAr15.isEmpty();
        boolean boolean20 = stackAr15.isFull();
        boolean boolean21 = stackAr15.isFull();
        java.lang.Object obj22 = stackAr15.topAndPop();
        boolean boolean23 = stackAr15.isFull();
        java.lang.Object obj24 = stackAr15.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) underflow56);
        underflow47.addSuppressed((java.lang.Throwable) overflow52);
        overflow39.addSuppressed((java.lang.Throwable) underflow47);
        underflow21.addSuppressed((java.lang.Throwable) underflow47);
        java.lang.Throwable[] throwableArray62 = underflow21.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) underflow21);
        java.lang.Throwable[] throwableArray64 = overflow0.getSuppressed();
        java.lang.String str65 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "DataStructures.Overflow" + "'", str65, "DataStructures.Overflow");
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        java.lang.Object obj2 = stackAr1.top();
        java.lang.Class<?> wildcardClass3 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray21 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray9 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass11 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isEmpty();
        stackAr1.push((java.lang.Object) stackAr8);
        java.lang.Object obj15 = stackAr1.topAndPop();
        java.lang.Object obj16 = stackAr1.top();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow17.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow33.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray44 = overflow17.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        overflow57.addSuppressed((java.lang.Throwable) overflow62);
        overflow45.addSuppressed((java.lang.Throwable) overflow62);
        DataStructures.Underflow underflow67 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray68 = underflow67.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        underflow67.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Throwable[] throwableArray77 = underflow74.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        underflow74.addSuppressed((java.lang.Throwable) overflow78);
        overflow62.addSuppressed((java.lang.Throwable) overflow78);
        overflow17.addSuppressed((java.lang.Throwable) overflow62);
        stackAr1.push((java.lang.Object) overflow17);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        overflow9.addSuppressed((java.lang.Throwable) underflow21);
        java.lang.Throwable[] throwableArray23 = underflow21.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        underflow21.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray41 = underflow21.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow21);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Object obj14 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (-2));
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-2) + "'", obj9, (-2));
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + (-2) + "'", obj10, (-2));
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        java.lang.Object obj13 = stackAr7.top();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr(0);
        java.lang.Object obj18 = stackAr17.topAndPop();
        boolean boolean19 = stackAr17.isEmpty();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isEmpty();
        java.lang.Object obj23 = stackAr17.topAndPop();
        java.lang.Object obj24 = stackAr17.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr7.push(obj24);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        stackAr1.pop();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        overflow10.addSuppressed((java.lang.Throwable) underflow22);
        overflow3.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) underflow34);
        underflow25.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray38 = underflow25.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow40.getSuppressed();
        underflow25.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray44 = underflow25.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        underflow25.addSuppressed((java.lang.Throwable) overflow48);
        underflow22.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray55 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray56 = overflow48.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        overflow42.addSuppressed((java.lang.Throwable) overflow47);
        overflow38.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow38.addSuppressed((java.lang.Throwable) overflow53);
        overflow28.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray57 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow38.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray60 = overflow38.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(1);
        java.lang.Object obj12 = stackAr11.top();
        boolean boolean13 = stackAr11.isFull();
        stackAr11.makeEmpty();
        java.lang.Object obj15 = stackAr11.top();
        java.lang.Object obj16 = stackAr11.topAndPop();
        boolean boolean17 = stackAr11.isEmpty();
        DataStructures.StackAr stackAr19 = new DataStructures.StackAr(100);
        stackAr19.push((java.lang.Object) 8L);
        stackAr11.push((java.lang.Object) stackAr19);
        boolean boolean23 = stackAr11.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow2.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) underflow40);
        java.lang.Throwable[] throwableArray44 = underflow40.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow40);
        underflow2.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray61 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow47.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        underflow72.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        overflow68.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        overflow75.addSuppressed((java.lang.Throwable) overflow80);
        overflow64.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray85 = overflow80.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray87 = overflow80.getSuppressed();
        java.lang.String str88 = overflow80.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DataStructures.Overflow" + "'", str88, "DataStructures.Overflow");
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray28 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow7.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray29);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        java.lang.Object obj6 = stackAr5.topAndPop();
        java.lang.Object obj7 = stackAr5.top();
        stackAr5.makeEmpty();
        java.lang.Object obj9 = stackAr5.top();
        stackAr1.push((java.lang.Object) stackAr5);
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass13 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray19 = underflow6.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        underflow6.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray25 = underflow6.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        underflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) underflow41);
        underflow32.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray45 = underflow32.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow47.getSuppressed();
        underflow32.addSuppressed((java.lang.Throwable) overflow47);
        underflow26.addSuppressed((java.lang.Throwable) overflow47);
        underflow6.addSuppressed((java.lang.Throwable) overflow47);
        stackAr1.push((java.lang.Object) underflow6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.topAndPop();
        java.lang.Object obj14 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.pop();
        stackAr1.makeEmpty();
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        overflow10.addSuppressed((java.lang.Throwable) underflow22);
        overflow3.addSuppressed((java.lang.Throwable) underflow22);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        overflow33.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray54 = overflow49.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray56 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow49.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow49.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray60 = overflow49.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        DataStructures.Underflow underflow3 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray4 = underflow3.getSuppressed();
        DataStructures.Underflow underflow5 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray6 = underflow5.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        underflow5.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) underflow12);
        underflow3.addSuppressed((java.lang.Throwable) overflow8);
        underflow1.addSuppressed((java.lang.Throwable) underflow3);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow17.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        underflow3.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray27 = underflow3.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) underflow3);
        java.lang.String str29 = underflow3.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DataStructures.Underflow" + "'", str29, "DataStructures.Underflow");
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        java.lang.Throwable[] throwableArray12 = underflow9.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray12);
        java.lang.Object obj14 = stackAr1.top();
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isEmpty();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        boolean boolean11 = stackAr10.isFull();
        stackAr10.makeEmpty();
        java.lang.Object obj13 = stackAr10.topAndPop();
        stackAr10.makeEmpty();
        boolean boolean15 = stackAr10.isFull();
        java.lang.Object obj16 = stackAr10.top();
        java.lang.Object obj17 = stackAr10.topAndPop();
        java.lang.Object obj18 = stackAr10.topAndPop();
        stackAr1.push((java.lang.Object) stackAr10);
        java.lang.Object obj20 = stackAr10.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow14.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) underflow37);
        underflow28.addSuppressed((java.lang.Throwable) underflow37);
        java.lang.Throwable[] throwableArray41 = underflow37.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow37);
        overflow0.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray44 = overflow0.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) underflow54);
        overflow0.addSuppressed((java.lang.Throwable) underflow45);
        java.lang.Throwable[] throwableArray59 = overflow0.getSuppressed();
        java.lang.Class<?> wildcardClass60 = overflow0.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        stackAr5.makeEmpty();
        java.lang.Object obj8 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        stackAr5.makeEmpty();
        boolean boolean11 = stackAr5.isFull();
        stackAr5.makeEmpty();
        boolean boolean13 = stackAr5.isEmpty();
        stackAr1.push((java.lang.Object) stackAr5);
        stackAr5.makeEmpty();
        java.lang.Object obj16 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        boolean boolean18 = stackAr5.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) underflow9);
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        underflow19.addSuppressed((java.lang.Throwable) underflow21);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow40);
        underflow21.addSuppressed((java.lang.Throwable) overflow35);
        underflow13.addSuppressed((java.lang.Throwable) underflow21);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) overflow53);
        underflow21.addSuppressed((java.lang.Throwable) overflow46);
        underflow0.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray67 = overflow64.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow64.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        overflow64.addSuppressed((java.lang.Throwable) overflow69);
        overflow60.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray74 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow69.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray77 = underflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray14 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow9.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        overflow9.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow33.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow54.addSuppressed((java.lang.Throwable) overflow63);
        overflow49.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray69 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow63.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow63);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj14 = stackAr1.topAndPop();
        boolean boolean15 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.pop();
        boolean boolean5 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray25 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray27 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        java.lang.String str29 = overflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "DataStructures.Overflow" + "'", str29, "DataStructures.Overflow");
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow20.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow41);
        underflow22.addSuppressed((java.lang.Throwable) overflow36);
        overflow17.addSuppressed((java.lang.Throwable) overflow36);
        overflow12.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray48 = overflow36.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        underflow53.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        overflow56.addSuppressed((java.lang.Throwable) underflow60);
        underflow51.addSuppressed((java.lang.Throwable) overflow56);
        underflow49.addSuppressed((java.lang.Throwable) underflow51);
        java.lang.Throwable[] throwableArray65 = underflow51.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        java.lang.Throwable[] throwableArray74 = overflow70.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        overflow70.addSuppressed((java.lang.Throwable) overflow75);
        overflow66.addSuppressed((java.lang.Throwable) overflow75);
        DataStructures.Underflow underflow80 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray81 = underflow80.getSuppressed();
        DataStructures.Underflow underflow82 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray83 = underflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        underflow82.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray88 = overflow85.getSuppressed();
        DataStructures.Underflow underflow89 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray90 = underflow89.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) underflow89);
        underflow80.addSuppressed((java.lang.Throwable) underflow89);
        java.lang.Throwable[] throwableArray93 = underflow89.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) underflow89);
        underflow51.addSuppressed((java.lang.Throwable) overflow75);
        overflow36.addSuppressed((java.lang.Throwable) underflow51);
        java.lang.Throwable[] throwableArray97 = underflow51.getSuppressed();
        java.lang.String str98 = underflow51.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "DataStructures.Underflow" + "'", str98, "DataStructures.Underflow");
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isEmpty();
        boolean boolean14 = stackAr1.isFull();
        boolean boolean15 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        underflow21.addSuppressed((java.lang.Throwable) underflow22);
        java.lang.Throwable[] throwableArray25 = underflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow26.getSuppressed();
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow14.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray35 = overflow14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray35 = overflow27.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow27);
        overflow8.addSuppressed((java.lang.Throwable) overflow27);
        stackAr1.push((java.lang.Object) overflow8);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray52 = overflow44.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        underflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) underflow64);
        underflow55.addSuppressed((java.lang.Throwable) overflow60);
        underflow53.addSuppressed((java.lang.Throwable) underflow55);
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        overflow69.addSuppressed((java.lang.Throwable) overflow74);
        underflow55.addSuppressed((java.lang.Throwable) overflow69);
        overflow44.addSuppressed((java.lang.Throwable) overflow69);
        overflow8.addSuppressed((java.lang.Throwable) overflow69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) underflow47);
        underflow38.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray51 = overflow43.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray53 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray54 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow43.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray57 = overflow43.getSuppressed();
        java.lang.String str58 = overflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DataStructures.Overflow" + "'", str58, "DataStructures.Overflow");
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        boolean boolean11 = stackAr10.isFull();
        stackAr10.makeEmpty();
        java.lang.Object obj13 = stackAr10.topAndPop();
        stackAr10.makeEmpty();
        boolean boolean15 = stackAr10.isFull();
        java.lang.Object obj16 = stackAr10.top();
        java.lang.Object obj17 = stackAr10.topAndPop();
        java.lang.Object obj18 = stackAr10.topAndPop();
        stackAr1.push((java.lang.Object) stackAr10);
        DataStructures.StackAr stackAr21 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean22 = stackAr21.isFull();
        boolean boolean23 = stackAr21.isEmpty();
        DataStructures.StackAr stackAr25 = new DataStructures.StackAr(0);
        boolean boolean26 = stackAr25.isFull();
        stackAr25.makeEmpty();
        java.lang.Object obj28 = stackAr25.topAndPop();
        stackAr25.makeEmpty();
        stackAr25.makeEmpty();
        boolean boolean31 = stackAr25.isFull();
        stackAr25.makeEmpty();
        boolean boolean33 = stackAr25.isEmpty();
        stackAr21.push((java.lang.Object) stackAr25);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr21);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.top();
        boolean boolean13 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        java.lang.Throwable[] throwableArray33 = underflow8.getSuppressed();
        java.lang.Throwable[] throwableArray34 = underflow8.getSuppressed();
        java.lang.Throwable[] throwableArray35 = underflow8.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (-2));
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        overflow9.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray30 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow9.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        underflow32.addSuppressed((java.lang.Throwable) underflow34);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow53);
        underflow34.addSuppressed((java.lang.Throwable) overflow48);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        underflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Underflow underflow72 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray73 = underflow72.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        underflow72.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Underflow underflow79 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray80 = underflow79.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) underflow79);
        underflow70.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray83 = overflow75.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray85 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray87 = overflow75.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray89 = overflow75.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow75);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow9);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.top();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(0);
        boolean boolean13 = stackAr12.isFull();
        stackAr12.makeEmpty();
        boolean boolean15 = stackAr12.isEmpty();
        stackAr12.makeEmpty();
        java.lang.Object obj17 = stackAr12.top();
        boolean boolean18 = stackAr12.isEmpty();
        boolean boolean19 = stackAr12.isEmpty();
        java.lang.Object obj20 = stackAr12.topAndPop();
        stackAr1.push((java.lang.Object) stackAr12);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.pop();
        java.lang.Object obj17 = stackAr1.top();
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.Object obj20 = stackAr1.topAndPop();
        java.lang.Object obj21 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.Throwable[] throwableArray27 = underflow23.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.Throwable[] throwableArray29 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow9.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        overflow50.addSuppressed((java.lang.Throwable) overflow55);
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow50.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        overflow75.addSuppressed((java.lang.Throwable) overflow80);
        overflow71.addSuppressed((java.lang.Throwable) overflow80);
        overflow66.addSuppressed((java.lang.Throwable) overflow80);
        DataStructures.Underflow underflow86 = new DataStructures.Underflow();
        DataStructures.Underflow underflow87 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray88 = underflow87.getSuppressed();
        underflow86.addSuppressed((java.lang.Throwable) underflow87);
        java.lang.Throwable[] throwableArray90 = underflow86.getSuppressed();
        java.lang.Throwable[] throwableArray91 = underflow86.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow86);
        java.lang.Throwable[] throwableArray93 = underflow86.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow86);
        java.lang.Throwable[] throwableArray95 = overflow38.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray97 = overflow9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray93);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray97);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass11 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        stackAr5.makeEmpty();
        boolean boolean8 = stackAr5.isFull();
        java.lang.Object obj9 = stackAr5.top();
        boolean boolean10 = stackAr5.isFull();
        java.lang.Object obj11 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        boolean boolean13 = stackAr5.isFull();
        java.lang.Object obj14 = stackAr5.top();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj16 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        java.lang.Object obj12 = stackAr1.top();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(10);
        boolean boolean11 = stackAr10.isEmpty();
        java.lang.Object obj12 = stackAr10.top();
        java.lang.Object obj13 = stackAr10.top();
        boolean boolean14 = stackAr10.isEmpty();
        stackAr10.makeEmpty();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray29 = underflow16.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray33 = overflow31.getSuppressed();
        underflow16.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        overflow42.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        underflow55.addSuppressed((java.lang.Throwable) overflow58);
        overflow52.addSuppressed((java.lang.Throwable) overflow58);
        overflow42.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow67.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        overflow67.addSuppressed((java.lang.Throwable) overflow72);
        overflow63.addSuppressed((java.lang.Throwable) overflow72);
        overflow58.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray78 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow72.getSuppressed();
        java.lang.Throwable[] throwableArray80 = overflow72.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray82 = overflow72.getSuppressed();
        stackAr10.push((java.lang.Object) overflow72);
        java.lang.Class<?> wildcardClass84 = overflow72.getClass();
        stackAr1.push((java.lang.Object) overflow72);
        DataStructures.StackAr stackAr87 = new DataStructures.StackAr(0);
        java.lang.Object obj88 = stackAr87.topAndPop();
        boolean boolean89 = stackAr87.isEmpty();
        boolean boolean90 = stackAr87.isEmpty();
        boolean boolean91 = stackAr87.isFull();
        stackAr87.makeEmpty();
        java.lang.Object obj93 = stackAr87.top();
        java.lang.Object obj94 = stackAr87.top();
        java.lang.Class<?> wildcardClass95 = stackAr87.getClass();
        stackAr1.push((java.lang.Object) wildcardClass95);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNull(obj88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNull(obj93);
        org.junit.Assert.assertNull(obj94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.topAndPop();
        java.lang.Object obj8 = stackAr6.top();
        java.lang.Object obj9 = stackAr6.top();
        boolean boolean10 = stackAr6.isFull();
        java.lang.Object obj11 = stackAr6.top();
        java.lang.Object obj12 = stackAr6.top();
        boolean boolean13 = stackAr6.isEmpty();
        boolean boolean14 = stackAr6.isFull();
        java.lang.Object obj15 = stackAr6.top();
        java.lang.Object obj16 = stackAr6.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean13 = stackAr12.isFull();
        boolean boolean14 = stackAr12.isEmpty();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow16.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray61 = underflow48.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow63.getSuppressed();
        underflow48.addSuppressed((java.lang.Throwable) overflow63);
        overflow26.addSuppressed((java.lang.Throwable) underflow48);
        java.lang.Throwable[] throwableArray68 = overflow26.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow26);
        stackAr12.push((java.lang.Object) overflow26);
        java.lang.Throwable[] throwableArray71 = overflow26.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow26);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(3);
        java.lang.Object obj7 = stackAr6.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        boolean boolean11 = stackAr9.isFull();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr6.topAndPop();
        boolean boolean14 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) (short) -1);
        java.lang.Object obj17 = stackAr6.top();
        stackAr1.push(obj17);
        boolean boolean19 = stackAr1.isFull();
        java.lang.Object obj20 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (short) -1 + "'", obj17, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (short) -1 + "'", obj20, (short) -1);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        underflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        underflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow1.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.String str70 = overflow63.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "DataStructures.Overflow" + "'", str70, "DataStructures.Overflow");
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        java.lang.Object obj30 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean32 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj34 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.push((java.lang.Object) (-5.4d));
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray12 = overflow8.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow8.getSuppressed();
        stackAr1.push((java.lang.Object) overflow8);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) underflow26);
        underflow17.addSuppressed((java.lang.Throwable) overflow22);
        underflow15.addSuppressed((java.lang.Throwable) underflow17);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        underflow17.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray41 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow31.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow53);
        overflow44.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow58.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        overflow69.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow69.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        overflow69.addSuppressed((java.lang.Throwable) overflow74);
        overflow65.addSuppressed((java.lang.Throwable) overflow74);
        overflow58.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray80 = overflow58.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow58);
        overflow8.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Class<?> wildcardClass83 = overflow58.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + (-5.4d) + "'", obj7, (-5.4d));
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(wildcardClass83);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(1);
        java.lang.Object obj15 = stackAr14.top();
        boolean boolean16 = stackAr14.isFull();
        java.lang.Object obj17 = stackAr14.top();
        java.lang.Object obj18 = stackAr14.top();
        DataStructures.StackAr stackAr20 = new DataStructures.StackAr(0);
        java.lang.Object obj21 = stackAr20.topAndPop();
        boolean boolean22 = stackAr20.isEmpty();
        boolean boolean23 = stackAr20.isEmpty();
        boolean boolean24 = stackAr20.isFull();
        boolean boolean25 = stackAr20.isEmpty();
        boolean boolean26 = stackAr20.isFull();
        boolean boolean27 = stackAr20.isFull();
        stackAr14.push((java.lang.Object) stackAr20);
        stackAr14.makeEmpty();
        stackAr14.push((java.lang.Object) true);
        stackAr14.pop();
        DataStructures.StackAr stackAr34 = new DataStructures.StackAr(0);
        java.lang.Object obj35 = stackAr34.topAndPop();
        java.lang.Object obj36 = stackAr34.top();
        stackAr34.makeEmpty();
        boolean boolean38 = stackAr34.isEmpty();
        boolean boolean39 = stackAr34.isEmpty();
        stackAr34.makeEmpty();
        stackAr34.makeEmpty();
        stackAr34.makeEmpty();
        stackAr14.push((java.lang.Object) stackAr34);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr14);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        boolean boolean12 = stackAr7.isFull();
        java.lang.Object obj13 = stackAr7.top();
        java.lang.Object obj14 = stackAr7.top();
        stackAr1.push(obj14);
        stackAr1.makeEmpty();
        java.lang.Object obj17 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj17);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        boolean boolean11 = stackAr10.isFull();
        stackAr10.makeEmpty();
        java.lang.Object obj13 = stackAr10.topAndPop();
        stackAr10.makeEmpty();
        boolean boolean15 = stackAr10.isFull();
        java.lang.Object obj16 = stackAr10.top();
        java.lang.Object obj17 = stackAr10.topAndPop();
        java.lang.Object obj18 = stackAr10.topAndPop();
        stackAr1.push((java.lang.Object) stackAr10);
        java.lang.Object obj20 = stackAr10.top();
        boolean boolean21 = stackAr10.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (-2));
        stackAr1.pop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.top();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(1);
        java.lang.Object obj15 = stackAr14.top();
        boolean boolean16 = stackAr14.isFull();
        stackAr1.push((java.lang.Object) stackAr14);
        DataStructures.StackAr stackAr19 = new DataStructures.StackAr(0);
        stackAr19.makeEmpty();
        java.lang.Object obj21 = stackAr19.topAndPop();
        java.lang.Object obj22 = stackAr19.topAndPop();
        boolean boolean23 = stackAr19.isFull();
        java.lang.Object obj24 = stackAr19.top();
        java.lang.Object obj25 = stackAr19.topAndPop();
        stackAr14.push(obj25);
        java.lang.Class<?> wildcardClass27 = stackAr14.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) 100.0d);
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) underflow16);
        underflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow29);
        underflow20.addSuppressed((java.lang.Throwable) overflow25);
        overflow12.addSuppressed((java.lang.Throwable) underflow20);
        java.lang.Throwable[] throwableArray34 = underflow20.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray34);
        java.lang.Object obj36 = stackAr1.topAndPop();
        boolean boolean37 = stackAr1.isFull();
        java.lang.Object obj38 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + 100.0d + "'", obj6, 100.0d);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(obj38);
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) underflow32);
        underflow23.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray36 = overflow28.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow28);
        overflow9.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray39 = overflow9.getSuppressed();
        stackAr1.push((java.lang.Object) overflow9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        overflow4.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow28.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        overflow53.addSuppressed((java.lang.Throwable) overflow58);
        overflow49.addSuppressed((java.lang.Throwable) overflow58);
        overflow44.addSuppressed((java.lang.Throwable) overflow58);
        overflow16.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray65 = overflow44.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray44 = underflow31.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = underflow31.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow56.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        overflow56.addSuppressed((java.lang.Throwable) overflow61);
        overflow52.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        overflow52.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        overflow76.addSuppressed((java.lang.Throwable) overflow77);
        underflow74.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        overflow70.addSuppressed((java.lang.Throwable) overflow77);
        DataStructures.Underflow underflow82 = new DataStructures.Underflow();
        overflow70.addSuppressed((java.lang.Throwable) underflow82);
        overflow67.addSuppressed((java.lang.Throwable) overflow70);
        underflow31.addSuppressed((java.lang.Throwable) overflow70);
        java.lang.Throwable[] throwableArray86 = overflow70.getSuppressed();
        java.lang.String str87 = overflow70.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "DataStructures.Overflow" + "'", str87, "DataStructures.Overflow");
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.String str60 = overflow15.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DataStructures.Overflow" + "'", str60, "DataStructures.Overflow");
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj7 = stackAr6.top();
        stackAr6.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean10 = stackAr6.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        boolean boolean5 = stackAr4.isFull();
        stackAr4.makeEmpty();
        java.lang.Object obj7 = stackAr4.topAndPop();
        stackAr4.makeEmpty();
        stackAr4.makeEmpty();
        boolean boolean10 = stackAr4.isEmpty();
        boolean boolean11 = stackAr4.isEmpty();
        boolean boolean12 = stackAr4.isEmpty();
        stackAr1.push((java.lang.Object) stackAr4);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(0);
        boolean boolean12 = stackAr11.isFull();
        stackAr11.makeEmpty();
        java.lang.Object obj14 = stackAr11.topAndPop();
        stackAr11.makeEmpty();
        boolean boolean16 = stackAr11.isFull();
        java.lang.Object obj17 = stackAr11.top();
        java.lang.Object obj18 = stackAr11.topAndPop();
        boolean boolean19 = stackAr11.isEmpty();
        java.lang.Object obj20 = stackAr11.topAndPop();
        boolean boolean21 = stackAr11.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        java.lang.Throwable[] throwableArray10 = underflow7.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        overflow26.addSuppressed((java.lang.Throwable) underflow33);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        underflow33.addSuppressed((java.lang.Throwable) underflow48);
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        underflow48.addSuppressed((java.lang.Throwable) underflow50);
        overflow11.addSuppressed((java.lang.Throwable) underflow48);
        java.lang.Class<?> wildcardClass53 = underflow48.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(wildcardClass53);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow18.addSuppressed((java.lang.Throwable) underflow26);
        underflow0.addSuppressed((java.lang.Throwable) underflow26);
        java.lang.Throwable[] throwableArray41 = underflow0.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) underflow51);
        underflow42.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray55 = underflow42.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        underflow42.addSuppressed((java.lang.Throwable) overflow57);
        underflow0.addSuppressed((java.lang.Throwable) underflow42);
        java.lang.Throwable[] throwableArray62 = underflow42.getSuppressed();
        java.lang.String str63 = underflow42.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "DataStructures.Underflow" + "'", str63, "DataStructures.Underflow");
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray26 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        overflow29.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray48 = overflow43.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow59);
        overflow50.addSuppressed((java.lang.Throwable) overflow59);
        overflow43.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray65 = overflow43.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray67 = overflow43.getSuppressed();
        java.lang.String str68 = overflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(100);
        stackAr9.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        java.lang.Object obj15 = stackAr9.topAndPop();
        boolean boolean16 = stackAr9.isEmpty();
        boolean boolean17 = stackAr9.isEmpty();
        boolean boolean18 = stackAr9.isFull();
        java.lang.Object obj19 = stackAr9.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj13 + "' != '" + 8L + "'", obj13, 8L);
        org.junit.Assert.assertEquals("'" + obj14 + "' != '" + 8L + "'", obj14, 8L);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        boolean boolean10 = stackAr9.isFull();
        stackAr9.makeEmpty();
        java.lang.Object obj12 = stackAr9.topAndPop();
        stackAr9.makeEmpty();
        boolean boolean14 = stackAr9.isFull();
        boolean boolean15 = stackAr9.isEmpty();
        boolean boolean16 = stackAr9.isFull();
        stackAr9.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr4.push((java.lang.Object) stackAr9);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr1.isEmpty();
        java.lang.Object obj17 = stackAr1.top();
        java.lang.Object obj18 = stackAr1.top();
        stackAr1.pop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) '4');
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertEquals("'" + obj6 + "' != '" + '4' + "'", obj6, '4');
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        overflow14.addSuppressed((java.lang.Throwable) overflow19);
        overflow10.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray24 = overflow19.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow19.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow19.addSuppressed((java.lang.Throwable) overflow31);
        overflow0.addSuppressed((java.lang.Throwable) overflow19);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow14.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow21.addSuppressed((java.lang.Throwable) overflow30);
        overflow14.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray36 = overflow14.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray62 = overflow54.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray64 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow54.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow68);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.Throwable[] throwableArray27 = underflow23.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow23);
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) overflow36);
        underflow29.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow31.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        underflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) overflow67);
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        overflow67.addSuppressed((java.lang.Throwable) overflow72);
        overflow55.addSuppressed((java.lang.Throwable) overflow72);
        underflow31.addSuppressed((java.lang.Throwable) overflow72);
        underflow23.addSuppressed((java.lang.Throwable) underflow31);
        java.lang.Throwable[] throwableArray79 = underflow23.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr6.isEmpty();
        stackAr6.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        underflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow14);
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) underflow28);
        underflow19.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray32 = overflow24.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow24);
        overflow5.addSuppressed((java.lang.Throwable) overflow24);
        stackAr1.push((java.lang.Object) overflow24);
        stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass14 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean14 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow13);
        underflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray17 = overflow9.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        stackAr1.push((java.lang.Object) throwableArray17);
        java.lang.Object obj20 = stackAr1.top();
        DataStructures.StackAr stackAr22 = new DataStructures.StackAr(0);
        java.lang.Object obj23 = stackAr22.topAndPop();
        java.lang.Object obj24 = stackAr22.top();
        java.lang.Object obj25 = stackAr22.top();
        java.lang.Object obj26 = stackAr22.top();
        boolean boolean27 = stackAr22.isEmpty();
        boolean boolean28 = stackAr22.isEmpty();
        java.lang.Object obj29 = stackAr22.topAndPop();
        stackAr1.push(obj29);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNull(obj29);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        underflow11.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) underflow18);
        underflow9.addSuppressed((java.lang.Throwable) overflow14);
        underflow7.addSuppressed((java.lang.Throwable) underflow9);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        overflow23.addSuppressed((java.lang.Throwable) overflow28);
        underflow9.addSuppressed((java.lang.Throwable) overflow23);
        stackAr1.push((java.lang.Object) overflow23);
        java.lang.Object obj34 = stackAr1.top();
        boolean boolean35 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "DataStructures.Overflow");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(0);
        boolean boolean13 = stackAr12.isFull();
        stackAr12.makeEmpty();
        java.lang.Object obj15 = stackAr12.topAndPop();
        stackAr12.makeEmpty();
        stackAr12.makeEmpty();
        boolean boolean18 = stackAr12.isEmpty();
        boolean boolean19 = stackAr12.isFull();
        java.lang.Object obj20 = stackAr12.top();
        java.lang.Object obj21 = stackAr12.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj21);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Class<?> wildcardClass20 = overflow15.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        stackAr4.makeEmpty();
        boolean boolean6 = stackAr4.isFull();
        java.lang.Object obj7 = stackAr4.top();
        boolean boolean8 = stackAr4.isEmpty();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj10 = stackAr4.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        underflow7.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) underflow24);
        underflow15.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray28 = overflow20.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray31 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow20.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(3);
        java.lang.Object obj7 = stackAr6.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        boolean boolean11 = stackAr9.isFull();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr6.topAndPop();
        boolean boolean14 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) (short) -1);
        java.lang.Object obj17 = stackAr6.top();
        stackAr1.push(obj17);
        boolean boolean19 = stackAr1.isFull();
        stackAr1.pop();
        boolean boolean21 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (short) -1 + "'", obj17, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        stackAr1.pop();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray23 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow18.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) underflow36);
        underflow27.addSuppressed((java.lang.Throwable) overflow32);
        underflow25.addSuppressed((java.lang.Throwable) underflow27);
        java.lang.Throwable[] throwableArray41 = underflow25.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        overflow42.addSuppressed((java.lang.Throwable) underflow54);
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) underflow65);
        underflow56.addSuppressed((java.lang.Throwable) overflow61);
        underflow54.addSuppressed((java.lang.Throwable) overflow61);
        underflow25.addSuppressed((java.lang.Throwable) underflow54);
        overflow18.addSuppressed((java.lang.Throwable) underflow25);
        stackAr1.push((java.lang.Object) overflow18);
        boolean boolean73 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = underflow0.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) underflow14);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        underflow14.addSuppressed((java.lang.Throwable) overflow28);
        underflow6.addSuppressed((java.lang.Throwable) underflow14);
        java.lang.Throwable[] throwableArray39 = underflow14.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow14);
        java.lang.Throwable[] throwableArray41 = underflow14.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.top();
        java.lang.Object obj9 = stackAr4.topAndPop();
        java.lang.Object obj10 = stackAr4.top();
        stackAr4.makeEmpty();
        boolean boolean12 = stackAr4.isEmpty();
        boolean boolean13 = stackAr4.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray26 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow16.getSuppressed();
        java.lang.Class<?> wildcardClass30 = overflow16.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray23 = underflow10.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray31 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow25.getSuppressed();
        java.lang.String str33 = overflow25.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "DataStructures.Overflow" + "'", str33, "DataStructures.Overflow");
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray19 = underflow6.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow21.getSuppressed();
        underflow6.addSuppressed((java.lang.Throwable) overflow21);
        underflow0.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray26 = overflow21.getSuppressed();
        java.lang.String str27 = overflow21.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DataStructures.Overflow" + "'", str27, "DataStructures.Overflow");
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow30.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        overflow30.addSuppressed((java.lang.Throwable) overflow36);
        overflow20.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow50);
        overflow41.addSuppressed((java.lang.Throwable) overflow50);
        overflow36.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray56 = overflow50.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow50.getSuppressed();
        java.lang.Class<?> wildcardClass58 = throwableArray57.getClass();
        stackAr1.push((java.lang.Object) wildcardClass58);
        boolean boolean60 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        boolean boolean7 = stackAr6.isFull();
        stackAr6.makeEmpty();
        java.lang.Object obj9 = stackAr6.topAndPop();
        stackAr6.makeEmpty();
        stackAr6.makeEmpty();
        boolean boolean12 = stackAr6.isFull();
        stackAr6.makeEmpty();
        boolean boolean14 = stackAr6.isFull();
        boolean boolean15 = stackAr6.isFull();
        boolean boolean16 = stackAr6.isEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        stackAr1.pop();
        java.lang.Object obj19 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(0);
        java.lang.Object obj15 = stackAr14.topAndPop();
        java.lang.Object obj16 = stackAr14.top();
        java.lang.Object obj17 = stackAr14.top();
        boolean boolean18 = stackAr14.isFull();
        stackAr14.makeEmpty();
        java.lang.Object obj20 = stackAr14.topAndPop();
        java.lang.Object obj21 = stackAr14.top();
        java.lang.Object obj22 = stackAr14.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj22);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        java.lang.Throwable[] throwableArray10 = underflow7.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray17 = underflow7.getSuppressed();
        java.lang.String str18 = underflow7.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "DataStructures.Underflow" + "'", str18, "DataStructures.Underflow");
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        stackAr1.pop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        java.lang.Object obj9 = stackAr8.topAndPop();
        java.lang.Object obj10 = stackAr8.top();
        stackAr8.makeEmpty();
        boolean boolean12 = stackAr8.isEmpty();
        stackAr8.makeEmpty();
        java.lang.Object obj14 = stackAr8.topAndPop();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr8.isEmpty();
        java.lang.Class<?> wildcardClass17 = stackAr8.getClass();
        stackAr1.push((java.lang.Object) wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        stackAr13.makeEmpty();
        stackAr13.makeEmpty();
        boolean boolean16 = stackAr13.isEmpty();
        stackAr1.push((java.lang.Object) stackAr13);
        stackAr13.makeEmpty();
        stackAr13.makeEmpty();
        stackAr13.makeEmpty();
        java.lang.Class<?> wildcardClass21 = stackAr13.getClass();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        underflow17.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        overflow29.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray51 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow29.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow29);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow29);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow37);
        overflow28.addSuppressed((java.lang.Throwable) overflow37);
        overflow23.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        underflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) underflow50);
        overflow37.addSuppressed((java.lang.Throwable) underflow50);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray66 = overflow54.getSuppressed();
        underflow50.addSuppressed((java.lang.Throwable) overflow54);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow29);
        stackAr1.push((java.lang.Object) overflow29);
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr39 = new DataStructures.StackAr(0);
        java.lang.Object obj40 = stackAr39.topAndPop();
        boolean boolean41 = stackAr39.isEmpty();
        boolean boolean42 = stackAr39.isEmpty();
        boolean boolean43 = stackAr39.isFull();
        boolean boolean44 = stackAr39.isEmpty();
        boolean boolean45 = stackAr39.isEmpty();
        boolean boolean46 = stackAr39.isEmpty();
        stackAr1.push((java.lang.Object) stackAr39);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNull(obj40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        java.lang.Object obj9 = stackAr8.topAndPop();
        java.lang.Object obj10 = stackAr8.top();
        java.lang.Object obj11 = stackAr8.top();
        boolean boolean12 = stackAr8.isFull();
        java.lang.Object obj13 = stackAr8.top();
        java.lang.Object obj14 = stackAr8.top();
        boolean boolean15 = stackAr8.isEmpty();
        boolean boolean16 = stackAr8.isFull();
        java.lang.Object obj17 = stackAr8.top();
        java.lang.Object obj18 = stackAr8.top();
        boolean boolean19 = stackAr8.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        stackAr10.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        overflow10.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow37);
        overflow20.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) underflow51);
        underflow42.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray55 = underflow42.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray59 = overflow57.getSuppressed();
        underflow42.addSuppressed((java.lang.Throwable) overflow57);
        overflow20.addSuppressed((java.lang.Throwable) underflow42);
        java.lang.Throwable[] throwableArray62 = overflow20.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        underflow64.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Underflow underflow79 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray80 = underflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow82);
        underflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray85 = overflow82.getSuppressed();
        overflow75.addSuppressed((java.lang.Throwable) overflow82);
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        DataStructures.Overflow overflow88 = new DataStructures.Overflow();
        overflow87.addSuppressed((java.lang.Throwable) overflow88);
        overflow82.addSuppressed((java.lang.Throwable) overflow87);
        overflow71.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray92 = overflow87.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow87);
        java.lang.Throwable[] throwableArray94 = overflow67.getSuppressed();
        java.lang.Throwable[] throwableArray95 = overflow67.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow67);
        overflow0.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray98 = overflow67.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray95);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.top();
        boolean boolean14 = stackAr1.isFull();
        java.lang.Object obj15 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray37 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray38 = overflow33.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow33.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) underflow49);
        underflow40.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray53 = underflow40.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        underflow40.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray59 = overflow55.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow55.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow55);
        underflow0.addSuppressed((java.lang.Throwable) overflow33);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass7 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(2);
        boolean boolean6 = stackAr5.isFull();
        java.lang.Object obj7 = null;
        stackAr5.push(obj7);
        boolean boolean9 = stackAr5.isFull();
        boolean boolean10 = stackAr5.isEmpty();
        boolean boolean11 = stackAr5.isFull();
        boolean boolean12 = stackAr5.isEmpty();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        overflow30.addSuppressed((java.lang.Throwable) overflow35);
        overflow18.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow61);
        underflow52.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray65 = overflow57.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow57);
        overflow35.addSuppressed((java.lang.Throwable) overflow47);
        overflow14.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray69 = overflow47.getSuppressed();
        stackAr5.push((java.lang.Object) throwableArray69);
        stackAr1.push((java.lang.Object) throwableArray69);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) '4');
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(1);
        stackAr7.makeEmpty();
        boolean boolean9 = stackAr7.isEmpty();
        java.lang.Object obj10 = stackAr7.top();
        boolean boolean11 = stackAr7.isEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        java.lang.Object obj15 = stackAr13.top();
        stackAr13.makeEmpty();
        boolean boolean17 = stackAr13.isEmpty();
        boolean boolean18 = stackAr13.isEmpty();
        stackAr13.makeEmpty();
        stackAr7.push((java.lang.Object) stackAr13);
        java.lang.Object obj21 = stackAr7.top();
        stackAr1.push(obj21);
        java.lang.Object obj23 = null;
        stackAr1.push(obj23);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = obj9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(3);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        stackAr7.push((java.lang.Object) 100.0d);
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean13 = stackAr7.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(4);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj11);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr4.top();
        java.lang.Object obj9 = stackAr4.topAndPop();
        java.lang.Object obj10 = stackAr4.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        boolean boolean8 = stackAr7.isFull();
        stackAr7.makeEmpty();
        java.lang.Object obj10 = stackAr7.topAndPop();
        stackAr7.makeEmpty();
        boolean boolean12 = stackAr7.isFull();
        java.lang.Object obj13 = stackAr7.top();
        java.lang.Object obj14 = stackAr7.topAndPop();
        boolean boolean15 = stackAr7.isEmpty();
        java.lang.Class<?> wildcardClass16 = stackAr7.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass16);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.pop();
        java.lang.Object obj17 = stackAr1.topAndPop();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        overflow32.addSuppressed((java.lang.Throwable) overflow37);
        overflow28.addSuppressed((java.lang.Throwable) overflow37);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        overflow28.addSuppressed((java.lang.Throwable) overflow43);
        overflow18.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray47 = overflow28.getSuppressed();
        stackAr1.push((java.lang.Object) overflow28);
        java.lang.Throwable[] throwableArray49 = overflow28.getSuppressed();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        java.lang.Object obj11 = stackAr10.top();
        boolean boolean12 = stackAr10.isFull();
        java.lang.Object obj13 = stackAr10.top();
        java.lang.Object obj14 = stackAr10.topAndPop();
        boolean boolean15 = stackAr10.isFull();
        java.lang.Object obj16 = stackAr10.topAndPop();
        boolean boolean17 = stackAr10.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean17);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        java.lang.Class<?> wildcardClass4 = overflow1.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        java.lang.Throwable[] throwableArray10 = underflow7.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        underflow31.addSuppressed((java.lang.Throwable) underflow33);
        overflow26.addSuppressed((java.lang.Throwable) underflow33);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        underflow33.addSuppressed((java.lang.Throwable) underflow48);
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        underflow48.addSuppressed((java.lang.Throwable) underflow50);
        overflow11.addSuppressed((java.lang.Throwable) underflow48);
        java.lang.Throwable[] throwableArray53 = underflow48.getSuppressed();
        java.lang.Throwable[] throwableArray54 = underflow48.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        underflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) underflow62);
        underflow48.addSuppressed((java.lang.Throwable) overflow58);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) (short) 0);
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        overflow19.addSuppressed((java.lang.Throwable) overflow24);
        overflow7.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        underflow43.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray49 = overflow46.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        overflow46.addSuppressed((java.lang.Throwable) underflow50);
        underflow41.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray54 = overflow46.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow46);
        overflow24.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray61 = overflow57.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow57.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow57);
        stackAr1.push((java.lang.Object) overflow24);
        java.lang.Throwable[] throwableArray65 = overflow24.getSuppressed();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.push((java.lang.Object) (short) -1);
        boolean boolean12 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(10);
        boolean boolean9 = stackAr8.isEmpty();
        java.lang.Object obj10 = stackAr8.top();
        java.lang.Object obj11 = stackAr8.top();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        boolean boolean14 = stackAr13.isFull();
        stackAr13.makeEmpty();
        java.lang.Object obj16 = stackAr13.topAndPop();
        stackAr13.makeEmpty();
        boolean boolean18 = stackAr13.isFull();
        boolean boolean19 = stackAr13.isEmpty();
        java.lang.Object obj20 = stackAr13.topAndPop();
        java.lang.Object obj21 = stackAr13.top();
        stackAr8.push((java.lang.Object) stackAr13);
        boolean boolean23 = stackAr8.isFull();
        stackAr1.push((java.lang.Object) stackAr8);
        DataStructures.StackAr stackAr26 = new DataStructures.StackAr(1);
        java.lang.Object obj27 = stackAr26.top();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        overflow40.addSuppressed((java.lang.Throwable) overflow45);
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray50 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow28.getSuppressed();
        stackAr26.push((java.lang.Object) throwableArray51);
        stackAr26.makeEmpty();
        java.lang.Object obj54 = stackAr26.topAndPop();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        underflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) underflow64);
        underflow55.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray68 = underflow55.getSuppressed();
        stackAr26.push((java.lang.Object) throwableArray68);
        stackAr8.push((java.lang.Object) throwableArray68);
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNull(obj54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        overflow1.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        overflow23.addSuppressed((java.lang.Throwable) overflow28);
        overflow11.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) underflow42);
        underflow33.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray46 = underflow33.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow48.getSuppressed();
        underflow33.addSuppressed((java.lang.Throwable) overflow48);
        overflow11.addSuppressed((java.lang.Throwable) underflow33);
        java.lang.Throwable[] throwableArray53 = overflow11.getSuppressed();
        overflow1.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.String str55 = overflow1.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "DataStructures.Overflow" + "'", str55, "DataStructures.Overflow");
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.isEmpty();
        java.lang.Object obj14 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow9.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) underflow52);
        underflow43.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray56 = overflow48.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow48);
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray59 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow38.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        overflow62.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Throwable[] throwableArray76 = underflow74.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        underflow81.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray87 = overflow84.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow90);
        overflow84.addSuppressed((java.lang.Throwable) overflow89);
        underflow74.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray94 = underflow74.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Throwable[] throwableArray96 = overflow5.getSuppressed();
        java.lang.String str97 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(throwableArray96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "DataStructures.Overflow" + "'", str97, "DataStructures.Overflow");
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        stackAr4.makeEmpty();
        boolean boolean6 = stackAr4.isFull();
        java.lang.Object obj7 = stackAr4.top();
        boolean boolean8 = stackAr4.isEmpty();
        stackAr1.push((java.lang.Object) stackAr4);
        stackAr1.pop();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.topAndPop();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(10);
        boolean boolean12 = stackAr11.isEmpty();
        java.lang.Object obj13 = stackAr11.top();
        java.lang.Object obj14 = stackAr11.top();
        DataStructures.StackAr stackAr16 = new DataStructures.StackAr(0);
        boolean boolean17 = stackAr16.isFull();
        stackAr16.makeEmpty();
        java.lang.Object obj19 = stackAr16.topAndPop();
        stackAr16.makeEmpty();
        boolean boolean21 = stackAr16.isFull();
        boolean boolean22 = stackAr16.isEmpty();
        java.lang.Object obj23 = stackAr16.topAndPop();
        java.lang.Object obj24 = stackAr16.top();
        stackAr11.push((java.lang.Object) stackAr16);
        boolean boolean26 = stackAr11.isFull();
        boolean boolean27 = stackAr11.isEmpty();
        boolean boolean28 = stackAr11.isEmpty();
        java.lang.Object obj29 = stackAr11.top();
        stackAr11.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(obj29);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow26.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow32);
        overflow16.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        overflow37.addSuppressed((java.lang.Throwable) overflow46);
        overflow32.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        underflow52.addSuppressed((java.lang.Throwable) underflow53);
        java.lang.Throwable[] throwableArray56 = underflow52.getSuppressed();
        java.lang.Throwable[] throwableArray57 = underflow52.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) underflow52);
        java.lang.Throwable[] throwableArray59 = underflow52.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow52);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray39 = underflow26.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        underflow26.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) overflow54);
        underflow47.addSuppressed((java.lang.Throwable) underflow49);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        overflow63.addSuppressed((java.lang.Throwable) overflow68);
        underflow49.addSuppressed((java.lang.Throwable) overflow63);
        overflow21.addSuppressed((java.lang.Throwable) underflow49);
        underflow2.addSuppressed((java.lang.Throwable) underflow49);
        java.lang.Throwable[] throwableArray75 = underflow2.getSuppressed();
        java.lang.Throwable[] throwableArray76 = underflow2.getSuppressed();
        java.lang.String str77 = underflow2.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "DataStructures.Underflow" + "'", str77, "DataStructures.Underflow");
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        boolean boolean14 = stackAr13.isFull();
        java.lang.Object obj15 = stackAr13.top();
        boolean boolean16 = stackAr13.isFull();
        stackAr13.makeEmpty();
        boolean boolean18 = stackAr13.isEmpty();
        boolean boolean19 = stackAr13.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr13);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.StackAr stackAr32 = new DataStructures.StackAr(1);
        java.lang.Object obj33 = stackAr32.top();
        boolean boolean34 = stackAr32.isFull();
        java.lang.Object obj35 = stackAr32.top();
        java.lang.Object obj36 = stackAr32.top();
        DataStructures.StackAr stackAr38 = new DataStructures.StackAr(0);
        java.lang.Object obj39 = stackAr38.topAndPop();
        boolean boolean40 = stackAr38.isEmpty();
        boolean boolean41 = stackAr38.isEmpty();
        boolean boolean42 = stackAr38.isFull();
        boolean boolean43 = stackAr38.isEmpty();
        boolean boolean44 = stackAr38.isFull();
        boolean boolean45 = stackAr38.isFull();
        stackAr32.push((java.lang.Object) stackAr38);
        stackAr32.makeEmpty();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray61 = overflow53.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) underflow73);
        underflow64.addSuppressed((java.lang.Throwable) overflow69);
        underflow62.addSuppressed((java.lang.Throwable) underflow64);
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow78.getSuppressed();
        java.lang.Throwable[] throwableArray82 = overflow78.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        overflow78.addSuppressed((java.lang.Throwable) overflow83);
        underflow64.addSuppressed((java.lang.Throwable) overflow78);
        overflow53.addSuppressed((java.lang.Throwable) overflow78);
        stackAr32.push((java.lang.Object) overflow53);
        overflow1.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray91 = overflow1.getSuppressed();
        java.lang.Class<?> wildcardClass92 = overflow1.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(wildcardClass92);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray12 = overflow7.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) underflow32);
        underflow23.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray36 = underflow23.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        underflow23.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        underflow48.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) underflow55);
        underflow46.addSuppressed((java.lang.Throwable) overflow51);
        underflow44.addSuppressed((java.lang.Throwable) underflow46);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow65);
        underflow46.addSuppressed((java.lang.Throwable) overflow60);
        overflow18.addSuppressed((java.lang.Throwable) underflow46);
        overflow7.addSuppressed((java.lang.Throwable) underflow46);
        java.lang.String str72 = underflow46.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "DataStructures.Underflow" + "'", str72, "DataStructures.Underflow");
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow20.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow41);
        underflow22.addSuppressed((java.lang.Throwable) overflow36);
        overflow17.addSuppressed((java.lang.Throwable) overflow36);
        overflow12.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray48 = overflow36.getSuppressed();
        java.lang.String str49 = overflow36.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DataStructures.Overflow" + "'", str49, "DataStructures.Overflow");
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr((int) (byte) 100);
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj8 = stackAr6.top();
        java.lang.Object obj9 = stackAr6.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        overflow7.addSuppressed((java.lang.Throwable) underflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        java.lang.Throwable[] throwableArray36 = overflow32.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        overflow32.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        underflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        DataStructures.Underflow underflow75 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray76 = underflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) underflow75);
        underflow66.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray79 = overflow71.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) overflow71);
        overflow49.addSuppressed((java.lang.Throwable) overflow61);
        overflow28.addSuppressed((java.lang.Throwable) overflow61);
        underflow23.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.String str84 = underflow23.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "DataStructures.Underflow" + "'", str84, "DataStructures.Underflow");
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(3);
        java.lang.Object obj7 = stackAr6.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        boolean boolean11 = stackAr9.isFull();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr6.topAndPop();
        boolean boolean14 = stackAr6.isFull();
        stackAr6.push((java.lang.Object) (short) -1);
        java.lang.Object obj17 = stackAr6.top();
        stackAr1.push(obj17);
        boolean boolean19 = stackAr1.isFull();
        java.lang.Object obj20 = stackAr1.topAndPop();
        java.lang.Object obj21 = stackAr1.top();
        boolean boolean22 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + obj17 + "' != '" + (short) -1 + "'", obj17, (short) -1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + obj20 + "' != '" + (short) -1 + "'", obj20, (short) -1);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow13.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray34 = overflow29.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow29);
        stackAr1.push((java.lang.Object) overflow29);
        boolean boolean37 = stackAr1.isEmpty();
        java.lang.Object obj38 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "DataStructures.Overflow");
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj13 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (-2));
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + obj9 + "' != '" + (-2) + "'", obj9, (-2));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) '4');
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(1);
        stackAr7.makeEmpty();
        boolean boolean9 = stackAr7.isEmpty();
        java.lang.Object obj10 = stackAr7.top();
        boolean boolean11 = stackAr7.isEmpty();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        java.lang.Object obj14 = stackAr13.topAndPop();
        java.lang.Object obj15 = stackAr13.top();
        stackAr13.makeEmpty();
        boolean boolean17 = stackAr13.isEmpty();
        boolean boolean18 = stackAr13.isEmpty();
        stackAr13.makeEmpty();
        stackAr7.push((java.lang.Object) stackAr13);
        java.lang.Object obj21 = stackAr7.top();
        stackAr1.push(obj21);
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow13);
        underflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray17 = overflow9.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        stackAr1.push((java.lang.Object) throwableArray17);
        boolean boolean20 = stackAr1.isFull();
        java.lang.Object obj21 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(obj21);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(10);
        boolean boolean7 = stackAr6.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        stackAr6.push((java.lang.Object) stackAr9);
        java.lang.Object obj13 = stackAr9.top();
        java.lang.Object obj14 = stackAr9.topAndPop();
        stackAr1.push((java.lang.Object) stackAr9);
        boolean boolean16 = stackAr1.isFull();
        java.lang.Object obj17 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj17);
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        underflow10.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        overflow13.addSuppressed((java.lang.Throwable) underflow17);
        underflow8.addSuppressed((java.lang.Throwable) overflow13);
        underflow6.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow8.addSuppressed((java.lang.Throwable) overflow22);
        underflow0.addSuppressed((java.lang.Throwable) underflow8);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        underflow8.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.String str46 = underflow8.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "DataStructures.Underflow" + "'", str46, "DataStructures.Underflow");
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        java.lang.Throwable[] throwableArray31 = underflow16.getSuppressed();
        java.lang.String str32 = underflow16.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "DataStructures.Underflow" + "'", str32, "DataStructures.Underflow");
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(1);
        java.lang.Object obj6 = stackAr5.top();
        boolean boolean7 = stackAr5.isFull();
        stackAr5.makeEmpty();
        java.lang.Object obj9 = stackAr5.top();
        java.lang.Object obj10 = stackAr5.topAndPop();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(0);
        boolean boolean13 = stackAr12.isFull();
        stackAr12.makeEmpty();
        boolean boolean15 = stackAr12.isFull();
        java.lang.Object obj16 = stackAr12.top();
        boolean boolean17 = stackAr12.isEmpty();
        stackAr5.push((java.lang.Object) stackAr12);
        java.lang.Object obj19 = stackAr5.topAndPop();
        java.lang.Object obj20 = stackAr5.top();
        java.lang.Object obj21 = stackAr5.top();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj23 = stackAr1.top();
        boolean boolean24 = stackAr1.isFull();
        java.lang.Object obj25 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj25);
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        stackAr1.push((java.lang.Object) 8L);
        boolean boolean4 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        overflow19.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Class<?> wildcardClass39 = overflow19.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        java.lang.Object obj12 = stackAr1.topAndPop();
        boolean boolean13 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass14 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray35 = underflow22.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow37.getSuppressed();
        underflow22.addSuppressed((java.lang.Throwable) overflow37);
        overflow0.addSuppressed((java.lang.Throwable) underflow22);
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        underflow42.addSuppressed((java.lang.Throwable) overflow47);
        overflow0.addSuppressed((java.lang.Throwable) underflow42);
        java.lang.String str54 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "DataStructures.Overflow" + "'", str54, "DataStructures.Overflow");
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        boolean boolean10 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow16.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow40);
        overflow23.addSuppressed((java.lang.Throwable) overflow40);
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass10 = obj9.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isEmpty();
        boolean boolean14 = stackAr1.isFull();
        java.lang.Object obj15 = stackAr1.top();
        boolean boolean16 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray14 = overflow10.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        overflow10.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        java.lang.Throwable[] throwableArray42 = underflow39.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        java.lang.Throwable[] throwableArray47 = overflow43.getSuppressed();
        underflow39.addSuppressed((java.lang.Throwable) overflow43);
        overflow27.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow59);
        overflow50.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        underflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        DataStructures.Underflow underflow75 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray76 = underflow75.getSuppressed();
        overflow71.addSuppressed((java.lang.Throwable) underflow75);
        underflow66.addSuppressed((java.lang.Throwable) overflow71);
        underflow64.addSuppressed((java.lang.Throwable) underflow66);
        overflow59.addSuppressed((java.lang.Throwable) underflow66);
        java.lang.Throwable[] throwableArray81 = underflow66.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow66);
        java.lang.Throwable[] throwableArray83 = overflow27.getSuppressed();
        java.lang.Throwable[] throwableArray84 = overflow27.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray84);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray84);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.makeEmpty();
        stackAr1.push((java.lang.Object) true);
        stackAr1.pop();
        DataStructures.StackAr stackAr21 = new DataStructures.StackAr(0);
        java.lang.Object obj22 = stackAr21.topAndPop();
        java.lang.Object obj23 = stackAr21.top();
        stackAr21.makeEmpty();
        boolean boolean25 = stackAr21.isEmpty();
        boolean boolean26 = stackAr21.isEmpty();
        stackAr21.makeEmpty();
        stackAr21.makeEmpty();
        stackAr21.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr21);
        java.lang.Object obj31 = stackAr21.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj22);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(obj31);
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow54);
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        underflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray66 = underflow60.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow60);
        java.lang.String str68 = underflow60.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Underflow" + "'", str68, "DataStructures.Underflow");
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(100);
        stackAr9.push((java.lang.Object) 8L);
        stackAr1.push((java.lang.Object) stackAr9);
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(2);
        boolean boolean15 = stackAr14.isFull();
        java.lang.Object obj16 = null;
        stackAr14.push(obj16);
        boolean boolean18 = stackAr14.isFull();
        stackAr9.push((java.lang.Object) boolean18);
        boolean boolean20 = stackAr9.isFull();
        boolean boolean21 = stackAr9.isFull();
        boolean boolean22 = stackAr9.isFull();
        java.lang.Object obj23 = stackAr9.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + obj23 + "' != '" + false + "'", obj23, false);
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(0);
        java.lang.Object obj15 = stackAr14.topAndPop();
        java.lang.Object obj16 = stackAr14.top();
        stackAr14.makeEmpty();
        boolean boolean18 = stackAr14.isEmpty();
        boolean boolean19 = stackAr14.isEmpty();
        java.lang.Object obj20 = stackAr14.top();
        java.lang.Object obj21 = stackAr14.topAndPop();
        boolean boolean22 = stackAr14.isEmpty();
        boolean boolean23 = stackAr14.isFull();
        java.lang.Object obj24 = stackAr14.topAndPop();
        stackAr14.makeEmpty();
        boolean boolean26 = stackAr14.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean26);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Class<?> wildcardClass8 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean15 = stackAr1.isEmpty();
        boolean boolean16 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass17 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        boolean boolean6 = stackAr4.isFull();
        stackAr1.push((java.lang.Object) stackAr4);
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow8.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        underflow22.addSuppressed((java.lang.Throwable) underflow24);
        overflow17.addSuppressed((java.lang.Throwable) underflow24);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        underflow24.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow42.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray55 = overflow52.getSuppressed();
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        overflow52.addSuppressed((java.lang.Throwable) underflow56);
        underflow47.addSuppressed((java.lang.Throwable) overflow52);
        underflow45.addSuppressed((java.lang.Throwable) underflow47);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        overflow61.addSuppressed((java.lang.Throwable) overflow66);
        underflow47.addSuppressed((java.lang.Throwable) overflow61);
        overflow42.addSuppressed((java.lang.Throwable) overflow61);
        underflow24.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray73 = underflow24.getSuppressed();
        stackAr1.push((java.lang.Object) underflow24);
        stackAr1.makeEmpty();
        java.lang.Object obj76 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNull(obj76);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Overflow overflow2 = new DataStructures.Overflow();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        overflow2.addSuppressed((java.lang.Throwable) overflow3);
        underflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) underflow7);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        overflow10.addSuppressed((java.lang.Throwable) underflow22);
        overflow3.addSuppressed((java.lang.Throwable) underflow22);
        java.lang.Throwable[] throwableArray25 = underflow22.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        stackAr13.makeEmpty();
        stackAr13.makeEmpty();
        boolean boolean16 = stackAr13.isEmpty();
        stackAr1.push((java.lang.Object) stackAr13);
        stackAr13.makeEmpty();
        java.lang.Object obj19 = stackAr13.topAndPop();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        boolean boolean7 = stackAr6.isFull();
        stackAr6.makeEmpty();
        java.lang.Object obj9 = stackAr6.topAndPop();
        stackAr6.makeEmpty();
        stackAr6.makeEmpty();
        boolean boolean12 = stackAr6.isFull();
        stackAr6.makeEmpty();
        boolean boolean14 = stackAr6.isFull();
        boolean boolean15 = stackAr6.isFull();
        boolean boolean16 = stackAr6.isEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj18 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(obj18);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        boolean boolean13 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.topAndPop();
        boolean boolean11 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow2.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        java.lang.Throwable[] throwableArray25 = overflow21.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow17.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) underflow40);
        java.lang.Throwable[] throwableArray44 = underflow40.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow40);
        underflow2.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray61 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow47.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        underflow64.addSuppressed((java.lang.Throwable) underflow65);
        overflow26.addSuppressed((java.lang.Throwable) underflow64);
        java.lang.Throwable[] throwableArray69 = overflow26.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow70.getSuppressed();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        java.lang.Throwable[] throwableArray78 = overflow74.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        overflow74.addSuppressed((java.lang.Throwable) overflow79);
        overflow70.addSuppressed((java.lang.Throwable) overflow79);
        overflow26.addSuppressed((java.lang.Throwable) overflow79);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        underflow30.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray43 = underflow30.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray43);
        boolean boolean45 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        java.lang.Object obj2 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr6.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr6.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow17.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        overflow27.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow41.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow70);
        underflow61.addSuppressed((java.lang.Throwable) overflow66);
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray75 = underflow74.getSuppressed();
        DataStructures.Underflow underflow76 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray77 = underflow76.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow79);
        underflow76.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        DataStructures.Underflow underflow83 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray84 = underflow83.getSuppressed();
        overflow79.addSuppressed((java.lang.Throwable) underflow83);
        underflow74.addSuppressed((java.lang.Throwable) overflow79);
        overflow66.addSuppressed((java.lang.Throwable) underflow74);
        underflow48.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Throwable[] throwableArray89 = underflow48.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow48);
        overflow17.addSuppressed((java.lang.Throwable) underflow48);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow17);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(5);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        java.lang.Throwable[] throwableArray12 = underflow9.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray12);
        boolean boolean14 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr(0);
        java.lang.Object obj18 = stackAr17.topAndPop();
        boolean boolean19 = stackAr17.isEmpty();
        java.lang.Object obj20 = stackAr17.topAndPop();
        boolean boolean21 = stackAr17.isEmpty();
        boolean boolean22 = stackAr17.isFull();
        boolean boolean23 = stackAr17.isFull();
        java.lang.Object obj24 = stackAr17.topAndPop();
        boolean boolean25 = stackAr17.isFull();
        java.lang.Object obj26 = stackAr17.topAndPop();
        stackAr1.push((java.lang.Object) stackAr17);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(obj26);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isFull();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.topAndPop();
        java.lang.Object obj11 = stackAr9.top();
        boolean boolean12 = stackAr9.isEmpty();
        stackAr9.makeEmpty();
        stackAr9.makeEmpty();
        stackAr9.makeEmpty();
        java.lang.Object obj16 = stackAr9.topAndPop();
        stackAr9.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr9);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.pop();
        java.lang.Object obj17 = stackAr1.top();
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isFull();
        java.lang.Object obj20 = stackAr1.topAndPop();
        boolean boolean21 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow7.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        overflow3.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray21 = overflow17.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow17.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow3);
        java.lang.Throwable[] throwableArray25 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj16 = stackAr1.top();
        stackAr1.makeEmpty();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray31 = underflow18.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        underflow18.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) overflow44);
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        overflow44.addSuppressed((java.lang.Throwable) overflow49);
        underflow18.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray54 = overflow44.getSuppressed();
        stackAr1.push((java.lang.Object) overflow44);
        java.lang.Class<?> wildcardClass56 = overflow44.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(wildcardClass56);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray22 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow5.getSuppressed();
        java.lang.String str24 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DataStructures.Overflow" + "'", str24, "DataStructures.Overflow");
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        java.lang.Object obj2 = stackAr1.topAndPop();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow8);
        java.lang.Throwable[] throwableArray13 = overflow3.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        java.lang.Throwable[] throwableArray22 = overflow18.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        overflow14.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow28.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) underflow44);
        underflow35.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        overflow66.addSuppressed((java.lang.Throwable) underflow70);
        underflow61.addSuppressed((java.lang.Throwable) overflow66);
        overflow53.addSuppressed((java.lang.Throwable) underflow61);
        underflow35.addSuppressed((java.lang.Throwable) underflow61);
        java.lang.Throwable[] throwableArray76 = underflow35.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) underflow35);
        java.lang.Throwable[] throwableArray78 = overflow14.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray80 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray81 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) overflow3);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray81);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass9 = obj8.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow10.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        underflow48.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray61 = overflow53.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow53);
        overflow31.addSuppressed((java.lang.Throwable) overflow43);
        overflow10.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray65 = overflow43.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray65);
        DataStructures.StackAr stackAr68 = new DataStructures.StackAr(1);
        stackAr68.makeEmpty();
        boolean boolean70 = stackAr68.isEmpty();
        java.lang.Object obj71 = stackAr68.top();
        java.lang.Object obj72 = stackAr68.top();
        java.lang.Object obj73 = stackAr68.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj73);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNull(obj71);
        org.junit.Assert.assertNull(obj72);
        org.junit.Assert.assertNull(obj73);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        overflow18.addSuppressed((java.lang.Throwable) overflow27);
        overflow0.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray33 = overflow18.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        underflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        DataStructures.Underflow underflow59 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray60 = underflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) underflow59);
        underflow50.addSuppressed((java.lang.Throwable) overflow55);
        underflow48.addSuppressed((java.lang.Throwable) underflow50);
        overflow43.addSuppressed((java.lang.Throwable) underflow50);
        overflow18.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray66 = overflow18.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray66);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray21 = overflow16.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray21);
        java.lang.Object obj23 = stackAr1.top();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(obj23);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        stackAr3.makeEmpty();
        boolean boolean7 = stackAr3.isEmpty();
        boolean boolean8 = stackAr3.isEmpty();
        stackAr3.makeEmpty();
        stackAr3.makeEmpty();
        java.lang.Object obj11 = stackAr3.topAndPop();
        boolean boolean12 = stackAr3.isFull();
        java.lang.Object obj13 = stackAr3.top();
        stackAr1.push(obj13);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray40 = overflow31.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Class<?> wildcardClass42 = overflow31.getClass();
        stackAr1.push((java.lang.Object) wildcardClass42);
        java.lang.Object obj44 = stackAr1.top();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "class DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "class DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "class DataStructures.Overflow");
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        java.lang.Class<?> wildcardClass20 = throwableArray19.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray39 = underflow26.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow41.getSuppressed();
        underflow26.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray45 = overflow41.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) overflow54);
        underflow47.addSuppressed((java.lang.Throwable) underflow49);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        overflow63.addSuppressed((java.lang.Throwable) overflow68);
        underflow49.addSuppressed((java.lang.Throwable) overflow63);
        overflow21.addSuppressed((java.lang.Throwable) underflow49);
        underflow2.addSuppressed((java.lang.Throwable) underflow49);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        java.lang.Throwable[] throwableArray79 = overflow75.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        overflow75.addSuppressed((java.lang.Throwable) overflow80);
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray87 = overflow84.getSuppressed();
        DataStructures.Underflow underflow88 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray89 = underflow88.getSuppressed();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        DataStructures.Overflow overflow91 = new DataStructures.Overflow();
        overflow90.addSuppressed((java.lang.Throwable) overflow91);
        underflow88.addSuppressed((java.lang.Throwable) overflow91);
        java.lang.Throwable[] throwableArray94 = overflow91.getSuppressed();
        overflow84.addSuppressed((java.lang.Throwable) overflow91);
        overflow80.addSuppressed((java.lang.Throwable) overflow91);
        underflow2.addSuppressed((java.lang.Throwable) overflow80);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj4);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray22 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray23 = overflow0.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        overflow24.addSuppressed((java.lang.Throwable) underflow36);
        java.lang.Throwable[] throwableArray38 = overflow24.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        overflow57.addSuppressed((java.lang.Throwable) overflow58);
        underflow55.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        overflow51.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow47.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray68 = overflow63.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray70 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow63.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.String str74 = overflow24.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "DataStructures.Overflow" + "'", str74, "DataStructures.Overflow");
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        stackAr1.pop();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj13 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Underflow underflow60 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray61 = underflow60.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        underflow60.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray66 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow63.getSuppressed();
        underflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow1.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Class<?> wildcardClass70 = overflow1.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(1);
        java.lang.Object obj12 = stackAr11.top();
        boolean boolean13 = stackAr11.isFull();
        java.lang.Object obj14 = stackAr11.top();
        java.lang.Object obj15 = stackAr11.top();
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr(0);
        java.lang.Object obj18 = stackAr17.topAndPop();
        boolean boolean19 = stackAr17.isEmpty();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isEmpty();
        boolean boolean23 = stackAr17.isFull();
        boolean boolean24 = stackAr17.isFull();
        stackAr11.push((java.lang.Object) stackAr17);
        stackAr11.pop();
        java.lang.Object obj27 = stackAr11.top();
        boolean boolean28 = stackAr11.isEmpty();
        boolean boolean29 = stackAr11.isFull();
        java.lang.Object obj30 = stackAr11.topAndPop();
        java.lang.Object obj31 = stackAr11.top();
        boolean boolean32 = stackAr11.isFull();
        stackAr1.push((java.lang.Object) stackAr11);
        java.lang.Object obj34 = stackAr11.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(obj34);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow1.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow22);
        overflow5.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray52 = overflow44.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow44);
        overflow22.addSuppressed((java.lang.Throwable) overflow34);
        overflow1.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray56 = overflow1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(4);
        boolean boolean11 = stackAr10.isEmpty();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow21);
        underflow12.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray25 = underflow12.getSuppressed();
        stackAr10.push((java.lang.Object) underflow12);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow12);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray25);
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        boolean boolean7 = stackAr6.isFull();
        stackAr6.makeEmpty();
        java.lang.Object obj9 = stackAr6.topAndPop();
        stackAr6.makeEmpty();
        stackAr6.makeEmpty();
        boolean boolean12 = stackAr6.isFull();
        stackAr6.makeEmpty();
        boolean boolean14 = stackAr6.isFull();
        boolean boolean15 = stackAr6.isFull();
        boolean boolean16 = stackAr6.isEmpty();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Class<?> wildcardClass18 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass6 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = underflow0.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray29 = underflow0.getSuppressed();
        java.lang.Class<?> wildcardClass30 = throwableArray29.getClass();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.topAndPop();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray14 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow9.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        overflow16.addSuppressed((java.lang.Throwable) underflow28);
        java.lang.Throwable[] throwableArray30 = underflow28.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        underflow28.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray48 = underflow28.getSuppressed();
        java.lang.Throwable[] throwableArray49 = underflow28.getSuppressed();
        java.lang.Throwable[] throwableArray50 = underflow28.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow28.addSuppressed((java.lang.Throwable) overflow51);
        overflow9.addSuppressed((java.lang.Throwable) underflow28);
        java.lang.Throwable[] throwableArray56 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow9.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(10);
        boolean boolean15 = stackAr14.isEmpty();
        stackAr14.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr14);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray14 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow0.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        underflow25.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        overflow21.addSuppressed((java.lang.Throwable) underflow33);
        java.lang.Throwable[] throwableArray35 = underflow33.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        underflow40.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray46 = overflow43.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow43.addSuppressed((java.lang.Throwable) overflow48);
        underflow33.addSuppressed((java.lang.Throwable) overflow43);
        underflow19.addSuppressed((java.lang.Throwable) underflow33);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow54.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray71 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray72 = overflow68.getSuppressed();
        java.lang.Throwable[] throwableArray73 = overflow68.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow68);
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        DataStructures.Overflow overflow76 = new DataStructures.Overflow();
        overflow75.addSuppressed((java.lang.Throwable) overflow76);
        java.lang.Throwable[] throwableArray78 = overflow75.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray82 = overflow79.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        overflow79.addSuppressed((java.lang.Throwable) overflow84);
        overflow75.addSuppressed((java.lang.Throwable) overflow84);
        overflow68.addSuppressed((java.lang.Throwable) overflow84);
        underflow33.addSuppressed((java.lang.Throwable) overflow84);
        overflow0.addSuppressed((java.lang.Throwable) underflow33);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        underflow16.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow34.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        underflow37.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        overflow53.addSuppressed((java.lang.Throwable) overflow58);
        underflow39.addSuppressed((java.lang.Throwable) overflow53);
        overflow34.addSuppressed((java.lang.Throwable) overflow53);
        underflow16.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray65 = underflow16.getSuppressed();
        java.lang.Throwable[] throwableArray66 = underflow16.getSuppressed();
        java.lang.Throwable[] throwableArray67 = underflow16.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        overflow5.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow51.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow57);
        overflow41.addSuppressed((java.lang.Throwable) overflow57);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        overflow66.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray69 = overflow66.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow66.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        overflow66.addSuppressed((java.lang.Throwable) overflow71);
        overflow62.addSuppressed((java.lang.Throwable) overflow71);
        overflow57.addSuppressed((java.lang.Throwable) overflow71);
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        underflow77.addSuppressed((java.lang.Throwable) underflow78);
        java.lang.Throwable[] throwableArray81 = underflow77.getSuppressed();
        java.lang.Throwable[] throwableArray82 = underflow77.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow77);
        java.lang.Throwable[] throwableArray84 = underflow77.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow77);
        java.lang.Throwable[] throwableArray86 = overflow29.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray88 = overflow29.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray88);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        java.lang.Object obj13 = stackAr7.top();
        java.lang.Object obj14 = stackAr7.topAndPop();
        stackAr1.push((java.lang.Object) stackAr7);
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj18 = stackAr17.topAndPop();
        stackAr17.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr17);
        boolean boolean21 = stackAr17.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        java.lang.Throwable[] throwableArray16 = underflow2.getSuppressed();
        DataStructures.Underflow underflow17 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray18 = underflow17.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) underflow26);
        underflow17.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        underflow30.addSuppressed((java.lang.Throwable) overflow35);
        overflow22.addSuppressed((java.lang.Throwable) underflow30);
        underflow2.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        underflow49.addSuppressed((java.lang.Throwable) overflow52);
        overflow46.addSuppressed((java.lang.Throwable) overflow52);
        underflow2.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.String str57 = overflow46.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DataStructures.Overflow" + "'", str57, "DataStructures.Overflow");
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        boolean boolean10 = stackAr9.isFull();
        stackAr9.makeEmpty();
        java.lang.Object obj12 = stackAr9.topAndPop();
        boolean boolean13 = stackAr9.isFull();
        java.lang.Object obj14 = stackAr9.top();
        java.lang.Class<?> wildcardClass15 = stackAr9.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass15);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray35 = overflow27.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow27);
        overflow8.addSuppressed((java.lang.Throwable) overflow27);
        stackAr1.push((java.lang.Object) overflow8);
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray10 = overflow0.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        overflow18.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow28.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow34);
        overflow18.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray39 = overflow18.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.String str41 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DataStructures.Overflow" + "'", str41, "DataStructures.Overflow");
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray11 = underflow0.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) overflow19);
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        overflow19.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow29.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        overflow29.addSuppressed((java.lang.Throwable) overflow35);
        overflow19.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray40 = overflow35.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        DataStructures.Underflow underflow53 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray54 = underflow53.getSuppressed();
        overflow49.addSuppressed((java.lang.Throwable) underflow53);
        underflow44.addSuppressed((java.lang.Throwable) overflow49);
        underflow42.addSuppressed((java.lang.Throwable) underflow44);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        underflow44.addSuppressed((java.lang.Throwable) overflow58);
        java.lang.Throwable[] throwableArray68 = underflow44.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) underflow44);
        overflow35.addSuppressed((java.lang.Throwable) underflow44);
        underflow0.addSuppressed((java.lang.Throwable) underflow44);
        java.lang.Throwable[] throwableArray72 = underflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        java.lang.Object obj9 = stackAr7.top();
        stackAr7.makeEmpty();
        boolean boolean11 = stackAr7.isEmpty();
        boolean boolean12 = stackAr7.isEmpty();
        stackAr7.makeEmpty();
        stackAr1.push((java.lang.Object) stackAr7);
        java.lang.Object obj15 = stackAr1.top();
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj19 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(obj19);
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.Throwable[] throwableArray27 = underflow23.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow23);
        java.lang.Throwable[] throwableArray29 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow9.getSuppressed();
        java.lang.Class<?> wildcardClass31 = overflow9.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass10 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        java.lang.Throwable[] throwableArray14 = underflow11.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        underflow11.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow21.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        underflow35.addSuppressed((java.lang.Throwable) underflow37);
        overflow30.addSuppressed((java.lang.Throwable) underflow37);
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        underflow37.addSuppressed((java.lang.Throwable) underflow52);
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        underflow52.addSuppressed((java.lang.Throwable) underflow54);
        overflow15.addSuppressed((java.lang.Throwable) underflow52);
        java.lang.Throwable[] throwableArray57 = underflow52.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow52);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        java.lang.Throwable[] throwableArray16 = overflow12.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow8.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow22.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow22.addSuppressed((java.lang.Throwable) overflow37);
        overflow8.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray41 = overflow8.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray57 = overflow53.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        underflow62.addSuppressed((java.lang.Throwable) overflow65);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        overflow58.addSuppressed((java.lang.Throwable) overflow65);
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        overflow65.addSuppressed((java.lang.Throwable) overflow70);
        overflow53.addSuppressed((java.lang.Throwable) overflow70);
        DataStructures.Underflow underflow75 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray76 = underflow75.getSuppressed();
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        overflow79.addSuppressed((java.lang.Throwable) overflow80);
        underflow77.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray83 = overflow80.getSuppressed();
        DataStructures.Underflow underflow84 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray85 = underflow84.getSuppressed();
        overflow80.addSuppressed((java.lang.Throwable) underflow84);
        underflow75.addSuppressed((java.lang.Throwable) overflow80);
        java.lang.Throwable[] throwableArray88 = underflow75.getSuppressed();
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow90);
        java.lang.Throwable[] throwableArray92 = overflow90.getSuppressed();
        underflow75.addSuppressed((java.lang.Throwable) overflow90);
        overflow53.addSuppressed((java.lang.Throwable) underflow75);
        java.lang.Throwable[] throwableArray95 = overflow53.getSuppressed();
        overflow43.addSuppressed((java.lang.Throwable) overflow53);
        overflow8.addSuppressed((java.lang.Throwable) overflow53);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray95);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray47 = overflow39.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow39);
        overflow17.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray50 = overflow17.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray23 = underflow10.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        overflow31.addSuppressed((java.lang.Throwable) underflow43);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow43.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray59 = underflow43.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow43);
        java.lang.Throwable[] throwableArray61 = underflow43.getSuppressed();
        DataStructures.Underflow underflow62 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray63 = underflow62.getSuppressed();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        overflow64.addSuppressed((java.lang.Throwable) overflow65);
        underflow62.addSuppressed((java.lang.Throwable) overflow65);
        underflow43.addSuppressed((java.lang.Throwable) underflow62);
        java.lang.String str69 = underflow62.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DataStructures.Underflow" + "'", str69, "DataStructures.Underflow");
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.top();
        java.lang.Object obj11 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) underflow16);
        underflow7.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray20 = underflow7.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray26 = overflow22.getSuppressed();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        overflow27.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        java.lang.Throwable[] throwableArray49 = overflow45.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow50);
        overflow41.addSuppressed((java.lang.Throwable) overflow50);
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        overflow55.addSuppressed((java.lang.Throwable) overflow56);
        overflow41.addSuppressed((java.lang.Throwable) overflow56);
        overflow27.addSuppressed((java.lang.Throwable) overflow41);
        overflow22.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow61);
        overflow0.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.String str68 = overflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(0);
        java.lang.Object obj11 = stackAr10.topAndPop();
        java.lang.Object obj12 = stackAr10.top();
        java.lang.Object obj13 = stackAr10.top();
        java.lang.Object obj14 = stackAr10.top();
        java.lang.Object obj15 = stackAr10.top();
        java.lang.Object obj16 = stackAr10.topAndPop();
        boolean boolean17 = stackAr10.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean17);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(3);
        java.lang.Object obj6 = stackAr5.topAndPop();
        boolean boolean7 = stackAr5.isEmpty();
        stackAr5.push((java.lang.Object) 100.0d);
        java.lang.Object obj10 = stackAr5.topAndPop();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow16.addSuppressed((java.lang.Throwable) underflow24);
        java.lang.Throwable[] throwableArray38 = underflow24.getSuppressed();
        stackAr5.push((java.lang.Object) throwableArray38);
        stackAr1.push((java.lang.Object) stackAr5);
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertEquals("'" + obj10 + "' != '" + 100.0d + "'", obj10, 100.0d);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        java.lang.Throwable[] throwableArray15 = overflow11.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray34 = underflow21.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        underflow21.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray40 = overflow36.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        overflow42.addSuppressed((java.lang.Throwable) underflow54);
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) underflow65);
        underflow56.addSuppressed((java.lang.Throwable) overflow61);
        underflow54.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray70 = underflow54.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow54);
        java.lang.Throwable[] throwableArray72 = overflow36.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        java.lang.Throwable[] throwableArray77 = overflow73.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        DataStructures.Underflow underflow82 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray83 = underflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        underflow82.addSuppressed((java.lang.Throwable) overflow85);
        overflow79.addSuppressed((java.lang.Throwable) overflow85);
        overflow73.addSuppressed((java.lang.Throwable) overflow85);
        overflow36.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray91 = overflow36.getSuppressed();
        java.lang.Throwable[] throwableArray92 = overflow36.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray94 = overflow9.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray94);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray92);
        org.junit.Assert.assertNotNull(throwableArray94);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray25 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray26 = overflow3.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray26);
        stackAr1.makeEmpty();
        java.lang.Object obj29 = stackAr1.topAndPop();
        java.lang.Object obj30 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean32 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr34 = new DataStructures.StackAr(0);
        java.lang.Object obj35 = stackAr34.topAndPop();
        java.lang.Object obj36 = stackAr34.top();
        java.lang.Object obj37 = stackAr34.top();
        java.lang.Object obj38 = stackAr34.top();
        boolean boolean39 = stackAr34.isEmpty();
        boolean boolean40 = stackAr34.isEmpty();
        stackAr1.push((java.lang.Object) boolean40);
        boolean boolean42 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow9.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) underflow14);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        underflow14.addSuppressed((java.lang.Throwable) overflow28);
        overflow9.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray58 = underflow45.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        underflow45.addSuppressed((java.lang.Throwable) overflow60);
        underflow39.addSuppressed((java.lang.Throwable) overflow60);
        overflow9.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        underflow68.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray74 = overflow71.getSuppressed();
        java.lang.Throwable[] throwableArray75 = overflow71.getSuppressed();
        underflow66.addSuppressed((java.lang.Throwable) overflow71);
        overflow9.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray78 = overflow9.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray78);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(100);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        java.lang.Object obj7 = stackAr5.top();
        java.lang.Object obj8 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        java.lang.Object obj10 = stackAr5.top();
        java.lang.Object obj11 = stackAr5.topAndPop();
        java.lang.Class<?> wildcardClass12 = stackAr5.getClass();
        stackAr1.push((java.lang.Object) wildcardClass12);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        underflow14.addSuppressed((java.lang.Throwable) underflow15);
        stackAr1.push((java.lang.Object) underflow14);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow20.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        overflow30.addSuppressed((java.lang.Throwable) underflow34);
        underflow25.addSuppressed((java.lang.Throwable) overflow30);
        underflow23.addSuppressed((java.lang.Throwable) underflow25);
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        java.lang.Throwable[] throwableArray43 = overflow39.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        overflow39.addSuppressed((java.lang.Throwable) overflow44);
        underflow25.addSuppressed((java.lang.Throwable) overflow39);
        overflow20.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        DataStructures.Underflow underflow56 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray57 = underflow56.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        DataStructures.Underflow underflow65 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray66 = underflow65.getSuppressed();
        overflow61.addSuppressed((java.lang.Throwable) underflow65);
        underflow56.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray69 = underflow56.getSuppressed();
        DataStructures.Overflow overflow70 = new DataStructures.Overflow();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        overflow70.addSuppressed((java.lang.Throwable) overflow71);
        java.lang.Throwable[] throwableArray73 = overflow71.getSuppressed();
        underflow56.addSuppressed((java.lang.Throwable) overflow71);
        underflow50.addSuppressed((java.lang.Throwable) overflow71);
        overflow20.addSuppressed((java.lang.Throwable) underflow50);
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        DataStructures.Underflow underflow79 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray80 = underflow79.getSuppressed();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        DataStructures.Overflow overflow82 = new DataStructures.Overflow();
        overflow81.addSuppressed((java.lang.Throwable) overflow82);
        underflow79.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray85 = overflow82.getSuppressed();
        java.lang.Throwable[] throwableArray86 = overflow82.getSuppressed();
        underflow77.addSuppressed((java.lang.Throwable) overflow82);
        overflow20.addSuppressed((java.lang.Throwable) overflow82);
        underflow14.addSuppressed((java.lang.Throwable) overflow82);
        java.lang.Throwable[] throwableArray90 = underflow14.getSuppressed();
        java.lang.Throwable[] throwableArray91 = underflow14.getSuppressed();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray73);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray86);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray25 = overflow16.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray27 = overflow0.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        overflow33.addSuppressed((java.lang.Throwable) overflow40);
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        overflow40.addSuppressed((java.lang.Throwable) overflow45);
        overflow28.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        underflow50.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray56 = overflow53.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        overflow53.addSuppressed((java.lang.Throwable) underflow57);
        java.lang.Throwable[] throwableArray60 = underflow57.getSuppressed();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        overflow61.addSuppressed((java.lang.Throwable) overflow62);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        java.lang.Throwable[] throwableArray65 = overflow61.getSuppressed();
        underflow57.addSuppressed((java.lang.Throwable) overflow61);
        overflow45.addSuppressed((java.lang.Throwable) overflow61);
        overflow0.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray69 = overflow45.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        boolean boolean2 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.pop();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        java.lang.Object obj7 = stackAr4.top();
        boolean boolean8 = stackAr4.isFull();
        java.lang.Object obj9 = stackAr4.top();
        java.lang.Object obj10 = stackAr4.top();
        boolean boolean11 = stackAr4.isEmpty();
        boolean boolean12 = stackAr4.isFull();
        java.lang.Object obj13 = stackAr4.top();
        stackAr1.push(obj13);
        java.lang.Object obj15 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj15);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        overflow12.addSuppressed((java.lang.Throwable) overflow17);
        overflow0.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        underflow34.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray47 = overflow39.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow39);
        overflow17.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow59);
        overflow50.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) underflow73);
        underflow64.addSuppressed((java.lang.Throwable) underflow73);
        java.lang.Throwable[] throwableArray77 = underflow73.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) underflow73);
        java.lang.Throwable[] throwableArray79 = underflow73.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) underflow73);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) overflow23);
        underflow16.addSuppressed((java.lang.Throwable) underflow18);
        java.lang.Throwable[] throwableArray32 = underflow16.getSuppressed();
        underflow2.addSuppressed((java.lang.Throwable) underflow16);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow13);
        underflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray17 = overflow9.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        stackAr1.push((java.lang.Object) throwableArray17);
        java.lang.Object obj20 = stackAr1.topAndPop();
        boolean boolean21 = stackAr1.isEmpty();
        boolean boolean22 = stackAr1.isEmpty();
        java.lang.Object obj23 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(obj23);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        overflow0.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable[] throwableArray14 = underflow12.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        underflow19.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray25 = overflow22.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        overflow27.addSuppressed((java.lang.Throwable) overflow28);
        overflow22.addSuppressed((java.lang.Throwable) overflow27);
        underflow12.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray32 = overflow22.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray32);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        stackAr1.pop();
        java.lang.Object obj9 = stackAr1.topAndPop();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        overflow36.addSuppressed((java.lang.Throwable) underflow40);
        underflow31.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray44 = underflow31.getSuppressed();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        overflow45.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray48 = overflow46.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray50 = underflow31.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) underflow31);
        java.lang.Class<?> wildcardClass52 = underflow31.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) ' ');
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Object obj9 = stackAr1.top();
        java.lang.Object obj10 = stackAr1.top();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isFull();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(1);
        java.lang.Object obj12 = stackAr11.top();
        boolean boolean13 = stackAr11.isFull();
        java.lang.Object obj14 = stackAr11.top();
        java.lang.Object obj15 = stackAr11.top();
        DataStructures.StackAr stackAr17 = new DataStructures.StackAr(0);
        java.lang.Object obj18 = stackAr17.topAndPop();
        boolean boolean19 = stackAr17.isEmpty();
        boolean boolean20 = stackAr17.isEmpty();
        boolean boolean21 = stackAr17.isFull();
        boolean boolean22 = stackAr17.isEmpty();
        boolean boolean23 = stackAr17.isFull();
        boolean boolean24 = stackAr17.isFull();
        stackAr11.push((java.lang.Object) stackAr17);
        stackAr11.pop();
        java.lang.Object obj27 = stackAr11.top();
        boolean boolean28 = stackAr11.isEmpty();
        boolean boolean29 = stackAr11.isFull();
        java.lang.Object obj30 = stackAr11.topAndPop();
        java.lang.Object obj31 = stackAr11.top();
        boolean boolean32 = stackAr11.isFull();
        stackAr1.push((java.lang.Object) stackAr11);
        java.lang.Object obj34 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj30);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj34);
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        java.lang.Throwable[] throwableArray7 = overflow3.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        overflow15.addSuppressed((java.lang.Throwable) overflow20);
        overflow3.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        DataStructures.Underflow underflow29 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray30 = underflow29.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        underflow29.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray35 = overflow32.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = overflow42.getSuppressed();
        overflow32.addSuppressed((java.lang.Throwable) overflow42);
        overflow20.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray53 = overflow32.getSuppressed();
        stackAr1.push((java.lang.Object) throwableArray53);
        stackAr1.pop();
        boolean boolean56 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj58 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNull(obj58);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        boolean boolean10 = stackAr9.isFull();
        java.lang.Object obj11 = stackAr9.top();
        java.lang.Object obj12 = stackAr9.topAndPop();
        boolean boolean13 = stackAr9.isEmpty();
        stackAr9.makeEmpty();
        java.lang.Object obj15 = stackAr9.topAndPop();
        java.lang.Object obj16 = stackAr9.topAndPop();
        boolean boolean17 = stackAr9.isFull();
        stackAr1.push((java.lang.Object) boolean17);
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Class<?> wildcardClass12 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj14 = stackAr1.top();
        boolean boolean15 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj13 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        boolean boolean9 = stackAr8.isFull();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.topAndPop();
        stackAr1.push(obj12);
        java.lang.Object obj14 = stackAr1.top();
        boolean boolean15 = stackAr1.isFull();
        java.lang.Object obj16 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(obj16);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        java.lang.Object obj12 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj12);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj8);
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr1.isEmpty();
        java.lang.Object obj12 = stackAr1.top();
        java.lang.Object obj13 = stackAr1.top();
        java.lang.Object obj14 = stackAr1.top();
        stackAr1.pop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(obj14);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow36.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        overflow36.addSuppressed((java.lang.Throwable) overflow42);
        overflow26.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow51.getSuppressed();
        java.lang.Throwable[] throwableArray55 = overflow51.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        overflow51.addSuppressed((java.lang.Throwable) overflow56);
        overflow47.addSuppressed((java.lang.Throwable) overflow56);
        overflow42.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray62 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray63 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow56.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow56);
        java.lang.Throwable[] throwableArray66 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray67 = overflow56.getSuppressed();
        java.lang.Throwable[] throwableArray68 = overflow56.getSuppressed();
        java.lang.String str69 = overflow56.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "DataStructures.Overflow" + "'", str69, "DataStructures.Overflow");
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isFull();
        boolean boolean13 = stackAr1.isEmpty();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        java.lang.Throwable[] throwableArray18 = overflow14.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        overflow26.addSuppressed((java.lang.Throwable) overflow31);
        overflow14.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray42 = overflow39.getSuppressed();
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        overflow39.addSuppressed((java.lang.Throwable) underflow43);
        java.lang.Throwable[] throwableArray46 = underflow43.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        java.lang.Throwable[] throwableArray51 = overflow47.getSuppressed();
        underflow43.addSuppressed((java.lang.Throwable) overflow47);
        overflow31.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow55.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        overflow55.addSuppressed((java.lang.Throwable) overflow61);
        overflow31.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Class<?> wildcardClass66 = overflow61.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) wildcardClass66);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(wildcardClass66);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Object obj14 = stackAr1.topAndPop();
        boolean boolean15 = stackAr1.isFull();
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Underflow underflow10 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray11 = underflow10.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) underflow19);
        underflow10.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray23 = underflow10.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow25.getSuppressed();
        underflow10.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray29 = overflow25.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        overflow31.addSuppressed((java.lang.Throwable) underflow43);
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Underflow underflow47 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray48 = underflow47.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        underflow47.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        overflow50.addSuppressed((java.lang.Throwable) underflow54);
        underflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow43.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray59 = underflow43.getSuppressed();
        overflow25.addSuppressed((java.lang.Throwable) underflow43);
        java.lang.Throwable[] throwableArray61 = underflow43.getSuppressed();
        java.lang.String str62 = underflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Underflow" + "'", str62, "DataStructures.Underflow");
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.push((java.lang.Object) (-5.4d));
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        java.lang.Object obj11 = stackAr1.top();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow5.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) underflow14);
        java.lang.Throwable[] throwableArray28 = underflow12.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        underflow33.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray39 = overflow36.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        overflow29.addSuppressed((java.lang.Throwable) underflow41);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) underflow52);
        underflow43.addSuppressed((java.lang.Throwable) overflow48);
        underflow41.addSuppressed((java.lang.Throwable) overflow48);
        underflow12.addSuppressed((java.lang.Throwable) underflow41);
        overflow5.addSuppressed((java.lang.Throwable) underflow12);
        java.lang.Throwable[] throwableArray59 = underflow12.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray59);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        DataStructures.Underflow underflow25 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray26 = underflow25.getSuppressed();
        overflow21.addSuppressed((java.lang.Throwable) underflow25);
        underflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow14.addSuppressed((java.lang.Throwable) underflow16);
        overflow9.addSuppressed((java.lang.Throwable) underflow16);
        java.lang.Throwable[] throwableArray31 = underflow16.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) underflow39);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray52 = overflow49.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        overflow42.addSuppressed((java.lang.Throwable) underflow54);
        overflow35.addSuppressed((java.lang.Throwable) underflow54);
        java.lang.Throwable[] throwableArray57 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow35.getSuppressed();
        underflow16.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.String str60 = overflow35.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "DataStructures.Overflow" + "'", str60, "DataStructures.Overflow");
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isFull();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        overflow17.addSuppressed((java.lang.Throwable) overflow18);
        underflow15.addSuppressed((java.lang.Throwable) overflow18);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) underflow22);
        underflow13.addSuppressed((java.lang.Throwable) overflow18);
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        underflow28.addSuppressed((java.lang.Throwable) overflow31);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) underflow35);
        underflow26.addSuppressed((java.lang.Throwable) overflow31);
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Underflow underflow48 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray49 = underflow48.getSuppressed();
        overflow44.addSuppressed((java.lang.Throwable) underflow48);
        underflow39.addSuppressed((java.lang.Throwable) overflow44);
        overflow31.addSuppressed((java.lang.Throwable) underflow39);
        underflow13.addSuppressed((java.lang.Throwable) underflow39);
        java.lang.Throwable[] throwableArray54 = underflow39.getSuppressed();
        DataStructures.Underflow underflow55 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray56 = underflow55.getSuppressed();
        DataStructures.Underflow underflow57 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray58 = underflow57.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        underflow57.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        overflow60.addSuppressed((java.lang.Throwable) underflow64);
        underflow55.addSuppressed((java.lang.Throwable) overflow60);
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        underflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) underflow77);
        underflow68.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        DataStructures.Underflow underflow83 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray84 = underflow83.getSuppressed();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        overflow85.addSuppressed((java.lang.Throwable) overflow86);
        underflow83.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray89 = overflow86.getSuppressed();
        DataStructures.Underflow underflow90 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray91 = underflow90.getSuppressed();
        overflow86.addSuppressed((java.lang.Throwable) underflow90);
        underflow81.addSuppressed((java.lang.Throwable) overflow86);
        overflow73.addSuppressed((java.lang.Throwable) underflow81);
        underflow55.addSuppressed((java.lang.Throwable) underflow81);
        underflow39.addSuppressed((java.lang.Throwable) underflow55);
        java.lang.Throwable[] throwableArray97 = underflow55.getSuppressed();
        java.lang.Throwable[] throwableArray98 = underflow55.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow55);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertNotNull(throwableArray91);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertNotNull(throwableArray98);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray6 = overflow0.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) underflow8);
        java.lang.Throwable[] throwableArray11 = underflow7.getSuppressed();
        java.lang.Throwable[] throwableArray12 = underflow7.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        underflow23.addSuppressed((java.lang.Throwable) overflow26);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) underflow30);
        underflow21.addSuppressed((java.lang.Throwable) overflow26);
        underflow19.addSuppressed((java.lang.Throwable) underflow21);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        java.lang.Throwable[] throwableArray39 = overflow35.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        overflow35.addSuppressed((java.lang.Throwable) overflow40);
        underflow21.addSuppressed((java.lang.Throwable) overflow35);
        underflow13.addSuppressed((java.lang.Throwable) underflow21);
        java.lang.Throwable[] throwableArray46 = underflow21.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) underflow21);
        overflow0.addSuppressed((java.lang.Throwable) underflow7);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray46);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) underflow49);
        underflow40.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray53 = overflow45.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray55 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray57 = overflow35.getSuppressed();
        java.lang.String str58 = overflow35.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "DataStructures.Overflow" + "'", str58, "DataStructures.Overflow");
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(0);
        java.lang.Object obj5 = stackAr4.topAndPop();
        java.lang.Object obj6 = stackAr4.top();
        stackAr1.push((java.lang.Object) stackAr4);
        stackAr4.makeEmpty();
        boolean boolean9 = stackAr4.isFull();
        stackAr4.makeEmpty();
        java.lang.Object obj11 = stackAr4.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow6.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        overflow6.addSuppressed((java.lang.Throwable) overflow12);
        overflow0.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray17 = overflow0.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) underflow27);
        underflow18.addSuppressed((java.lang.Throwable) underflow27);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        java.lang.Throwable[] throwableArray35 = overflow31.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        overflow31.addSuppressed((java.lang.Throwable) overflow36);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        overflow36.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray53 = overflow47.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow59.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) underflow73);
        underflow64.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray77 = underflow64.getSuppressed();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        DataStructures.Overflow overflow79 = new DataStructures.Overflow();
        overflow78.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray81 = overflow79.getSuppressed();
        underflow64.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray83 = overflow79.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) overflow79);
        java.lang.Throwable[] throwableArray85 = overflow59.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) overflow59);
        underflow27.addSuppressed((java.lang.Throwable) overflow59);
        overflow0.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray89 = overflow59.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray81);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray85);
        org.junit.Assert.assertNotNull(throwableArray89);
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        java.lang.Object obj7 = stackAr6.top();
        boolean boolean8 = stackAr6.isFull();
        boolean boolean9 = stackAr6.isFull();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean11 = stackAr6.isEmpty();
        boolean boolean12 = stackAr6.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray11 = overflow8.getSuppressed();
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        underflow12.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        overflow8.addSuppressed((java.lang.Throwable) overflow15);
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        overflow8.addSuppressed((java.lang.Throwable) underflow20);
        java.lang.Throwable[] throwableArray22 = underflow20.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        overflow35.addSuppressed((java.lang.Throwable) overflow36);
        overflow30.addSuppressed((java.lang.Throwable) overflow35);
        underflow20.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray40 = underflow20.getSuppressed();
        java.lang.Throwable[] throwableArray41 = underflow20.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        overflow47.addSuppressed((java.lang.Throwable) underflow51);
        underflow42.addSuppressed((java.lang.Throwable) underflow51);
        underflow20.addSuppressed((java.lang.Throwable) underflow51);
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) underflow51);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        underflow9.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray15 = overflow12.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        overflow12.addSuppressed((java.lang.Throwable) underflow16);
        underflow7.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray20 = underflow7.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        java.lang.Throwable[] throwableArray24 = overflow22.getSuppressed();
        underflow7.addSuppressed((java.lang.Throwable) overflow22);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow26.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow43.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        underflow46.addSuppressed((java.lang.Throwable) overflow49);
        overflow43.addSuppressed((java.lang.Throwable) overflow49);
        overflow33.addSuppressed((java.lang.Throwable) overflow49);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        overflow54.addSuppressed((java.lang.Throwable) overflow63);
        overflow49.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray69 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray70 = overflow63.getSuppressed();
        java.lang.Throwable[] throwableArray71 = overflow63.getSuppressed();
        overflow22.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray73 = overflow63.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray73);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray73);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        stackAr8.makeEmpty();
        stackAr8.makeEmpty();
        boolean boolean11 = stackAr8.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) boolean11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        stackAr1.pop();
        java.lang.Object obj17 = stackAr1.topAndPop();
        boolean boolean18 = stackAr1.isEmpty();
        boolean boolean19 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (-2));
        stackAr1.pop();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = null;
        stackAr1.push(obj6);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        DataStructures.StackAr stackAr7 = new DataStructures.StackAr(0);
        java.lang.Object obj8 = stackAr7.topAndPop();
        boolean boolean9 = stackAr7.isEmpty();
        boolean boolean10 = stackAr7.isEmpty();
        boolean boolean11 = stackAr7.isFull();
        boolean boolean12 = stackAr7.isEmpty();
        boolean boolean13 = stackAr7.isFull();
        boolean boolean14 = stackAr7.isFull();
        stackAr1.push((java.lang.Object) stackAr7);
        boolean boolean16 = stackAr1.isEmpty();
        boolean boolean17 = stackAr1.isEmpty();
        java.lang.Object obj18 = stackAr1.top();
        java.lang.Object obj19 = stackAr1.top();
        boolean boolean20 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) underflow20);
        underflow11.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Underflow underflow26 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray27 = underflow26.getSuppressed();
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        underflow26.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        DataStructures.Underflow underflow33 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray34 = underflow33.getSuppressed();
        overflow29.addSuppressed((java.lang.Throwable) underflow33);
        underflow24.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        DataStructures.Underflow underflow50 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray51 = underflow50.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        underflow52.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray58 = overflow55.getSuppressed();
        DataStructures.Underflow underflow59 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray60 = underflow59.getSuppressed();
        overflow55.addSuppressed((java.lang.Throwable) underflow59);
        underflow50.addSuppressed((java.lang.Throwable) overflow55);
        overflow42.addSuppressed((java.lang.Throwable) underflow50);
        underflow24.addSuppressed((java.lang.Throwable) underflow50);
        java.lang.Throwable[] throwableArray65 = underflow24.getSuppressed();
        underflow11.addSuppressed((java.lang.Throwable) underflow24);
        java.lang.Throwable[] throwableArray67 = underflow24.getSuppressed();
        java.lang.Throwable[] throwableArray68 = underflow24.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) throwableArray68);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray68);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertEquals("'" + obj4 + "' != '" + 1.0f + "'", obj4, 1.0f);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.top();
        boolean boolean3 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean8 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.push((java.lang.Object) (-2));
        stackAr1.pop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        boolean boolean6 = stackAr5.isFull();
        stackAr5.makeEmpty();
        java.lang.Object obj8 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        stackAr5.makeEmpty();
        boolean boolean11 = stackAr5.isFull();
        stackAr5.makeEmpty();
        boolean boolean13 = stackAr5.isEmpty();
        stackAr1.push((java.lang.Object) stackAr5);
        stackAr5.makeEmpty();
        java.lang.Object obj16 = stackAr5.topAndPop();
        stackAr5.makeEmpty();
        java.lang.Class<?> wildcardClass18 = stackAr5.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.top();
        boolean boolean12 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj14 = stackAr1.top();
        boolean boolean15 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        overflow7.addSuppressed((java.lang.Throwable) overflow8);
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        underflow14.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray20 = overflow17.getSuppressed();
        overflow10.addSuppressed((java.lang.Throwable) overflow17);
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        overflow27.addSuppressed((java.lang.Throwable) underflow31);
        underflow22.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray35 = overflow27.getSuppressed();
        overflow17.addSuppressed((java.lang.Throwable) overflow27);
        overflow8.addSuppressed((java.lang.Throwable) overflow27);
        stackAr1.push((java.lang.Object) overflow8);
        java.lang.Object obj39 = stackAr1.top();
        java.lang.Object obj40 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "DataStructures.Overflow");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "DataStructures.Overflow");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "DataStructures.Overflow");
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) '4');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        java.lang.Object obj8 = stackAr1.topAndPop();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 100);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(1);
        stackAr9.push((java.lang.Object) 1.0f);
        boolean boolean12 = stackAr9.isEmpty();
        boolean boolean13 = stackAr9.isFull();
        boolean boolean14 = stackAr9.isFull();
        stackAr1.push((java.lang.Object) stackAr9);
        java.lang.Object obj16 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        overflow16.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        overflow23.addSuppressed((java.lang.Throwable) overflow28);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        java.lang.Throwable[] throwableArray35 = overflow33.getSuppressed();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow36.addSuppressed((java.lang.Throwable) overflow39);
        overflow33.addSuppressed((java.lang.Throwable) overflow39);
        overflow23.addSuppressed((java.lang.Throwable) overflow39);
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray47 = overflow44.getSuppressed();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        java.lang.Throwable[] throwableArray52 = overflow48.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        overflow48.addSuppressed((java.lang.Throwable) overflow53);
        overflow44.addSuppressed((java.lang.Throwable) overflow53);
        overflow39.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.Throwable[] throwableArray59 = overflow53.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow53.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow53);
        java.lang.String str62 = overflow53.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "DataStructures.Overflow" + "'", str62, "DataStructures.Overflow");
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow1.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        underflow4.addSuppressed((java.lang.Throwable) underflow6);
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        java.lang.Throwable[] throwableArray24 = overflow20.getSuppressed();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        overflow25.addSuppressed((java.lang.Throwable) overflow26);
        overflow20.addSuppressed((java.lang.Throwable) overflow25);
        underflow6.addSuppressed((java.lang.Throwable) overflow20);
        overflow1.addSuppressed((java.lang.Throwable) overflow20);
        DataStructures.Underflow underflow31 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray32 = underflow31.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        underflow31.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        underflow31.addSuppressed((java.lang.Throwable) overflow52);
        overflow1.addSuppressed((java.lang.Throwable) underflow31);
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        java.lang.Throwable[] throwableArray66 = overflow62.getSuppressed();
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        overflow62.addSuppressed((java.lang.Throwable) overflow67);
        overflow58.addSuppressed((java.lang.Throwable) overflow67);
        java.lang.Throwable[] throwableArray72 = overflow58.getSuppressed();
        underflow31.addSuppressed((java.lang.Throwable) overflow58);
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        DataStructures.Overflow overflow75 = new DataStructures.Overflow();
        overflow74.addSuppressed((java.lang.Throwable) overflow75);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        DataStructures.Underflow underflow78 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray79 = underflow78.getSuppressed();
        DataStructures.Overflow overflow80 = new DataStructures.Overflow();
        DataStructures.Overflow overflow81 = new DataStructures.Overflow();
        overflow80.addSuppressed((java.lang.Throwable) overflow81);
        underflow78.addSuppressed((java.lang.Throwable) overflow81);
        java.lang.Throwable[] throwableArray84 = overflow81.getSuppressed();
        overflow74.addSuppressed((java.lang.Throwable) overflow81);
        DataStructures.Overflow overflow86 = new DataStructures.Overflow();
        DataStructures.Overflow overflow87 = new DataStructures.Overflow();
        overflow86.addSuppressed((java.lang.Throwable) overflow87);
        overflow81.addSuppressed((java.lang.Throwable) overflow86);
        overflow58.addSuppressed((java.lang.Throwable) overflow86);
        java.lang.Throwable[] throwableArray91 = overflow58.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray66);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray79);
        org.junit.Assert.assertNotNull(throwableArray84);
        org.junit.Assert.assertNotNull(throwableArray91);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray5 = underflow0.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Underflow underflow12 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray13 = underflow12.getSuppressed();
        DataStructures.Underflow underflow14 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray15 = underflow14.getSuppressed();
        DataStructures.Underflow underflow16 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray17 = underflow16.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        underflow16.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Underflow underflow23 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray24 = underflow23.getSuppressed();
        overflow19.addSuppressed((java.lang.Throwable) underflow23);
        underflow14.addSuppressed((java.lang.Throwable) overflow19);
        underflow12.addSuppressed((java.lang.Throwable) underflow14);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        underflow14.addSuppressed((java.lang.Throwable) overflow28);
        underflow6.addSuppressed((java.lang.Throwable) underflow14);
        java.lang.Throwable[] throwableArray39 = underflow14.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow14);
        java.lang.String str41 = underflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DataStructures.Underflow" + "'", str41, "DataStructures.Underflow");
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isEmpty();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(3);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isFull();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr((int) (byte) 100);
        stackAr1.push((java.lang.Object) stackAr6);
        stackAr1.push((java.lang.Object) (-3L));
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj4);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        java.lang.Object obj14 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.String str4 = underflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "DataStructures.Underflow" + "'", str4, "DataStructures.Underflow");
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Overflow overflow8 = new DataStructures.Overflow();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        overflow8.addSuppressed((java.lang.Throwable) overflow9);
        underflow6.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) underflow13);
        underflow4.addSuppressed((java.lang.Throwable) overflow9);
        java.lang.Throwable[] throwableArray17 = overflow9.getSuppressed();
        java.lang.Class<?> wildcardClass18 = throwableArray17.getClass();
        stackAr1.push((java.lang.Object) throwableArray17);
        boolean boolean20 = stackAr1.isFull();
        DataStructures.StackAr stackAr22 = new DataStructures.StackAr(1);
        java.lang.Object obj23 = stackAr22.top();
        boolean boolean24 = stackAr22.isFull();
        stackAr22.makeEmpty();
        java.lang.Object obj26 = stackAr22.top();
        java.lang.Object obj27 = stackAr22.topAndPop();
        stackAr1.push(obj27);
        DataStructures.StackAr stackAr30 = new DataStructures.StackAr(3);
        java.lang.Object obj31 = stackAr30.topAndPop();
        boolean boolean32 = stackAr30.isEmpty();
        stackAr30.push((java.lang.Object) 100.0d);
        java.lang.Object obj35 = stackAr30.topAndPop();
        DataStructures.Underflow underflow36 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray37 = underflow36.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        overflow41.addSuppressed((java.lang.Throwable) underflow45);
        underflow36.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        DataStructures.Underflow underflow51 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray52 = underflow51.getSuppressed();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        overflow53.addSuppressed((java.lang.Throwable) overflow54);
        underflow51.addSuppressed((java.lang.Throwable) overflow54);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) underflow58);
        underflow49.addSuppressed((java.lang.Throwable) overflow54);
        overflow41.addSuppressed((java.lang.Throwable) underflow49);
        java.lang.Throwable[] throwableArray63 = underflow49.getSuppressed();
        stackAr30.push((java.lang.Object) throwableArray63);
        java.lang.Object obj65 = stackAr30.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr30);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(obj26);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertEquals("'" + obj35 + "' != '" + 100.0d + "'", obj35, 100.0d);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isEmpty();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow5.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        overflow5.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow32);
        overflow15.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Underflow underflow39 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray40 = underflow39.getSuppressed();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        overflow41.addSuppressed((java.lang.Throwable) overflow42);
        underflow39.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        DataStructures.Underflow underflow46 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray47 = underflow46.getSuppressed();
        overflow42.addSuppressed((java.lang.Throwable) underflow46);
        underflow37.addSuppressed((java.lang.Throwable) overflow42);
        java.lang.Throwable[] throwableArray50 = underflow37.getSuppressed();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        overflow51.addSuppressed((java.lang.Throwable) overflow52);
        java.lang.Throwable[] throwableArray54 = overflow52.getSuppressed();
        underflow37.addSuppressed((java.lang.Throwable) overflow52);
        overflow15.addSuppressed((java.lang.Throwable) underflow37);
        java.lang.Throwable[] throwableArray57 = overflow15.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow15);
        stackAr1.push((java.lang.Object) overflow15);
        boolean boolean60 = stackAr1.isFull();
        boolean boolean61 = stackAr1.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray47);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.top();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(2);
        boolean boolean9 = stackAr8.isFull();
        java.lang.Object obj10 = stackAr8.top();
        boolean boolean11 = stackAr8.isFull();
        java.lang.Object obj12 = stackAr8.top();
        boolean boolean13 = stackAr8.isFull();
        stackAr8.makeEmpty();
        java.lang.Class<?> wildcardClass15 = stackAr8.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(obj12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        java.lang.Object obj2 = stackAr1.top();
        DataStructures.StackAr stackAr4 = new DataStructures.StackAr(1);
        java.lang.Object obj5 = stackAr4.top();
        boolean boolean6 = stackAr4.isFull();
        stackAr4.makeEmpty();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(0);
        java.lang.Object obj10 = stackAr9.top();
        boolean boolean11 = stackAr9.isFull();
        boolean boolean12 = stackAr9.isFull();
        stackAr4.push((java.lang.Object) stackAr9);
        boolean boolean14 = stackAr4.isEmpty();
        java.lang.Object obj15 = stackAr4.top();
        java.lang.Object obj16 = stackAr4.topAndPop();
        stackAr1.push((java.lang.Object) stackAr4);
        boolean boolean18 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        boolean boolean6 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        underflow32.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray38 = overflow35.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow35);
        DataStructures.Underflow underflow40 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray41 = underflow40.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        DataStructures.Underflow underflow49 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray50 = underflow49.getSuppressed();
        overflow45.addSuppressed((java.lang.Throwable) underflow49);
        underflow40.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray53 = overflow45.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray55 = overflow35.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray57 = overflow35.getSuppressed();
        DataStructures.Overflow overflow58 = new DataStructures.Overflow();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        overflow58.addSuppressed((java.lang.Throwable) overflow59);
        java.lang.Throwable[] throwableArray61 = overflow58.getSuppressed();
        java.lang.Throwable[] throwableArray62 = overflow58.getSuppressed();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        DataStructures.Overflow overflow64 = new DataStructures.Overflow();
        overflow63.addSuppressed((java.lang.Throwable) overflow64);
        overflow58.addSuppressed((java.lang.Throwable) overflow63);
        DataStructures.Overflow overflow67 = new DataStructures.Overflow();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        overflow67.addSuppressed((java.lang.Throwable) overflow68);
        java.lang.Throwable[] throwableArray70 = overflow67.getSuppressed();
        DataStructures.Underflow underflow71 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray72 = underflow71.getSuppressed();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        DataStructures.Overflow overflow74 = new DataStructures.Overflow();
        overflow73.addSuppressed((java.lang.Throwable) overflow74);
        underflow71.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray77 = overflow74.getSuppressed();
        overflow67.addSuppressed((java.lang.Throwable) overflow74);
        overflow63.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray80 = overflow74.getSuppressed();
        overflow35.addSuppressed((java.lang.Throwable) overflow74);
        java.lang.Throwable[] throwableArray82 = overflow35.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        stackAr1.push((java.lang.Object) 1.0f);
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + obj7 + "' != '" + 1.0f + "'", obj7, 1.0f);
        org.junit.Assert.assertEquals("'" + obj8 + "' != '" + 1.0f + "'", obj8, 1.0f);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        java.lang.Throwable[] throwableArray28 = overflow24.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        overflow24.addSuppressed((java.lang.Throwable) overflow29);
        overflow20.addSuppressed((java.lang.Throwable) overflow29);
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray42 = overflow38.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow34.addSuppressed((java.lang.Throwable) overflow43);
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        overflow48.addSuppressed((java.lang.Throwable) overflow49);
        overflow34.addSuppressed((java.lang.Throwable) overflow49);
        overflow20.addSuppressed((java.lang.Throwable) overflow34);
        overflow15.addSuppressed((java.lang.Throwable) overflow34);
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.Throwable[] throwableArray62 = overflow60.getSuppressed();
        DataStructures.Underflow underflow63 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray64 = underflow63.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        underflow63.addSuppressed((java.lang.Throwable) overflow66);
        overflow60.addSuppressed((java.lang.Throwable) overflow66);
        overflow54.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray71 = overflow66.getSuppressed();
        overflow15.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable throwable73 = null;
        // The following exception was thrown during execution in test generation
        try {
            overflow15.addSuppressed(throwable73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray71);
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray9 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        java.lang.Throwable[] throwableArray11 = overflow5.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray14 = underflow0.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray11);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray14);
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        boolean boolean5 = stackAr1.isFull();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        boolean boolean7 = stackAr1.isFull();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        DataStructures.Underflow underflow1 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray2 = underflow1.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) underflow1);
        java.lang.Throwable[] throwableArray4 = underflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        java.lang.Throwable[] throwableArray13 = overflow9.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow14.getSuppressed();
        DataStructures.Underflow underflow18 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray19 = underflow18.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        underflow18.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray24 = overflow21.getSuppressed();
        overflow14.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        overflow21.addSuppressed((java.lang.Throwable) overflow26);
        overflow9.addSuppressed((java.lang.Throwable) overflow26);
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Underflow underflow43 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray44 = underflow43.getSuppressed();
        DataStructures.Underflow underflow45 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray46 = underflow45.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        underflow45.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray51 = overflow48.getSuppressed();
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        overflow48.addSuppressed((java.lang.Throwable) underflow52);
        underflow43.addSuppressed((java.lang.Throwable) overflow48);
        java.lang.Throwable[] throwableArray56 = overflow48.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow48);
        overflow26.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray59 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray60 = overflow38.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow62 = new DataStructures.Overflow();
        DataStructures.Overflow overflow63 = new DataStructures.Overflow();
        overflow62.addSuppressed((java.lang.Throwable) overflow63);
        java.lang.Throwable[] throwableArray65 = overflow62.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        overflow62.addSuppressed((java.lang.Throwable) overflow69);
        DataStructures.Underflow underflow74 = new DataStructures.Underflow();
        overflow62.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Throwable[] throwableArray76 = underflow74.getSuppressed();
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        java.lang.Throwable[] throwableArray80 = overflow77.getSuppressed();
        DataStructures.Underflow underflow81 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray82 = underflow81.getSuppressed();
        DataStructures.Overflow overflow83 = new DataStructures.Overflow();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        overflow83.addSuppressed((java.lang.Throwable) overflow84);
        underflow81.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray87 = overflow84.getSuppressed();
        overflow77.addSuppressed((java.lang.Throwable) overflow84);
        DataStructures.Overflow overflow89 = new DataStructures.Overflow();
        DataStructures.Overflow overflow90 = new DataStructures.Overflow();
        overflow89.addSuppressed((java.lang.Throwable) overflow90);
        overflow84.addSuppressed((java.lang.Throwable) overflow89);
        underflow74.addSuppressed((java.lang.Throwable) overflow84);
        java.lang.Throwable[] throwableArray94 = underflow74.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow74);
        java.lang.Class<?> wildcardClass96 = overflow5.getClass();
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray24);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray87);
        org.junit.Assert.assertNotNull(throwableArray94);
        org.junit.Assert.assertNotNull(wildcardClass96);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        java.lang.Throwable[] throwableArray2 = underflow0.getSuppressed();
        DataStructures.Overflow overflow3 = new DataStructures.Overflow();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        overflow3.addSuppressed((java.lang.Throwable) overflow4);
        java.lang.Throwable[] throwableArray6 = overflow3.getSuppressed();
        DataStructures.Underflow underflow7 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray8 = underflow7.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        underflow7.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray13 = overflow10.getSuppressed();
        overflow3.addSuppressed((java.lang.Throwable) overflow10);
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        overflow3.addSuppressed((java.lang.Throwable) underflow15);
        java.lang.Throwable[] throwableArray17 = underflow15.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        underflow15.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray35 = underflow15.getSuppressed();
        java.lang.Throwable[] throwableArray36 = underflow15.getSuppressed();
        java.lang.Throwable[] throwableArray37 = underflow15.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        underflow15.addSuppressed((java.lang.Throwable) overflow38);
        underflow0.addSuppressed((java.lang.Throwable) underflow15);
        java.lang.String str43 = underflow0.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray2);
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "DataStructures.Underflow" + "'", str43, "DataStructures.Underflow");
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean6 = stackAr1.isFull();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(10);
        boolean boolean9 = stackAr8.isEmpty();
        java.lang.Object obj10 = stackAr8.top();
        java.lang.Object obj11 = stackAr8.top();
        DataStructures.StackAr stackAr13 = new DataStructures.StackAr(0);
        boolean boolean14 = stackAr13.isFull();
        stackAr13.makeEmpty();
        java.lang.Object obj16 = stackAr13.topAndPop();
        stackAr13.makeEmpty();
        boolean boolean18 = stackAr13.isFull();
        boolean boolean19 = stackAr13.isEmpty();
        java.lang.Object obj20 = stackAr13.topAndPop();
        java.lang.Object obj21 = stackAr13.top();
        stackAr8.push((java.lang.Object) stackAr13);
        boolean boolean23 = stackAr8.isFull();
        java.lang.Object obj24 = stackAr8.top();
        stackAr1.push((java.lang.Object) stackAr8);
        boolean boolean26 = stackAr8.isFull();
        java.lang.Class<?> wildcardClass27 = stackAr8.getClass();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(obj20);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        boolean boolean8 = stackAr1.isFull();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        overflow13.addSuppressed((java.lang.Throwable) overflow14);
        java.lang.Throwable[] throwableArray16 = overflow13.getSuppressed();
        java.lang.Throwable[] throwableArray17 = overflow13.getSuppressed();
        DataStructures.Overflow overflow18 = new DataStructures.Overflow();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        overflow18.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Throwable[] throwableArray21 = overflow18.getSuppressed();
        DataStructures.Underflow underflow22 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray23 = underflow22.getSuppressed();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        DataStructures.Overflow overflow25 = new DataStructures.Overflow();
        overflow24.addSuppressed((java.lang.Throwable) overflow25);
        underflow22.addSuppressed((java.lang.Throwable) overflow25);
        java.lang.Throwable[] throwableArray28 = overflow25.getSuppressed();
        overflow18.addSuppressed((java.lang.Throwable) overflow25);
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        overflow30.addSuppressed((java.lang.Throwable) overflow31);
        overflow25.addSuppressed((java.lang.Throwable) overflow30);
        overflow13.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Underflow underflow37 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray38 = underflow37.getSuppressed();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        overflow39.addSuppressed((java.lang.Throwable) overflow40);
        underflow37.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) underflow44);
        underflow35.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.Throwable[] throwableArray48 = underflow35.getSuppressed();
        DataStructures.Overflow overflow49 = new DataStructures.Overflow();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        overflow49.addSuppressed((java.lang.Throwable) overflow50);
        java.lang.Throwable[] throwableArray52 = overflow50.getSuppressed();
        underflow35.addSuppressed((java.lang.Throwable) overflow50);
        overflow13.addSuppressed((java.lang.Throwable) underflow35);
        overflow5.addSuppressed((java.lang.Throwable) overflow13);
        java.lang.Throwable[] throwableArray56 = overflow5.getSuppressed();
        java.lang.String str57 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "DataStructures.Overflow" + "'", str57, "DataStructures.Overflow");
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        java.lang.Throwable[] throwableArray12 = overflow9.getSuppressed();
        DataStructures.Underflow underflow13 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray14 = underflow13.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        underflow13.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        overflow9.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        overflow4.addSuppressed((java.lang.Throwable) overflow21);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow27.getSuppressed();
        DataStructures.Underflow underflow30 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray31 = underflow30.getSuppressed();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        underflow30.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow33);
        overflow4.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray38 = overflow4.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow4);
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray43 = overflow40.getSuppressed();
        DataStructures.Underflow underflow44 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray45 = underflow44.getSuppressed();
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        underflow44.addSuppressed((java.lang.Throwable) overflow47);
        java.lang.Throwable[] throwableArray50 = overflow47.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Underflow underflow52 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray53 = underflow52.getSuppressed();
        DataStructures.Underflow underflow54 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray55 = underflow54.getSuppressed();
        DataStructures.Overflow overflow56 = new DataStructures.Overflow();
        DataStructures.Overflow overflow57 = new DataStructures.Overflow();
        overflow56.addSuppressed((java.lang.Throwable) overflow57);
        underflow54.addSuppressed((java.lang.Throwable) overflow57);
        java.lang.Throwable[] throwableArray60 = overflow57.getSuppressed();
        DataStructures.Underflow underflow61 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray62 = underflow61.getSuppressed();
        overflow57.addSuppressed((java.lang.Throwable) underflow61);
        underflow52.addSuppressed((java.lang.Throwable) underflow61);
        java.lang.Throwable[] throwableArray65 = underflow61.getSuppressed();
        overflow40.addSuppressed((java.lang.Throwable) underflow61);
        overflow4.addSuppressed((java.lang.Throwable) overflow40);
        java.lang.String str68 = overflow4.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(throwableArray62);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "DataStructures.Overflow" + "'", str68, "DataStructures.Overflow");
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr9 = new DataStructures.StackAr(10);
        boolean boolean10 = stackAr9.isEmpty();
        DataStructures.StackAr stackAr12 = new DataStructures.StackAr(0);
        java.lang.Object obj13 = stackAr12.topAndPop();
        java.lang.Object obj14 = stackAr12.top();
        stackAr9.push((java.lang.Object) stackAr12);
        java.lang.Object obj16 = stackAr9.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr9);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNotNull(obj16);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray7 = overflow4.getSuppressed();
        java.lang.Throwable[] throwableArray8 = overflow4.getSuppressed();
        DataStructures.Overflow overflow9 = new DataStructures.Overflow();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        overflow9.addSuppressed((java.lang.Throwable) overflow10);
        overflow4.addSuppressed((java.lang.Throwable) overflow9);
        overflow0.addSuppressed((java.lang.Throwable) overflow9);
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        overflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        DataStructures.Overflow overflow19 = new DataStructures.Overflow();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        overflow19.addSuppressed((java.lang.Throwable) overflow20);
        java.lang.Throwable[] throwableArray22 = overflow19.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        DataStructures.Underflow underflow27 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray28 = underflow27.getSuppressed();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        underflow27.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray33 = overflow30.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow30);
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        overflow23.addSuppressed((java.lang.Throwable) underflow35);
        java.lang.Throwable[] throwableArray37 = underflow35.getSuppressed();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Underflow underflow42 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray43 = underflow42.getSuppressed();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        DataStructures.Overflow overflow45 = new DataStructures.Overflow();
        overflow44.addSuppressed((java.lang.Throwable) overflow45);
        underflow42.addSuppressed((java.lang.Throwable) overflow45);
        java.lang.Throwable[] throwableArray48 = overflow45.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow45);
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        overflow45.addSuppressed((java.lang.Throwable) overflow50);
        underflow35.addSuppressed((java.lang.Throwable) overflow45);
        overflow19.addSuppressed((java.lang.Throwable) overflow45);
        overflow15.addSuppressed((java.lang.Throwable) overflow19);
        java.lang.Class<?> wildcardClass57 = overflow19.getClass();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray28);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray43);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        boolean boolean12 = stackAr1.isFull();
        java.lang.Object obj13 = stackAr1.top();
        boolean boolean14 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        DataStructures.Underflow underflow6 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray7 = underflow6.getSuppressed();
        DataStructures.Underflow underflow8 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray9 = underflow8.getSuppressed();
        DataStructures.Overflow overflow10 = new DataStructures.Overflow();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        overflow10.addSuppressed((java.lang.Throwable) overflow11);
        underflow8.addSuppressed((java.lang.Throwable) overflow11);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Underflow underflow15 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray16 = underflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) underflow15);
        underflow6.addSuppressed((java.lang.Throwable) overflow11);
        DataStructures.Underflow underflow19 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray20 = underflow19.getSuppressed();
        DataStructures.Underflow underflow21 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray22 = underflow21.getSuppressed();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        DataStructures.Overflow overflow24 = new DataStructures.Overflow();
        overflow23.addSuppressed((java.lang.Throwable) overflow24);
        underflow21.addSuppressed((java.lang.Throwable) overflow24);
        java.lang.Throwable[] throwableArray27 = overflow24.getSuppressed();
        DataStructures.Underflow underflow28 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray29 = underflow28.getSuppressed();
        overflow24.addSuppressed((java.lang.Throwable) underflow28);
        underflow19.addSuppressed((java.lang.Throwable) overflow24);
        DataStructures.Underflow underflow32 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray33 = underflow32.getSuppressed();
        DataStructures.Underflow underflow34 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray35 = underflow34.getSuppressed();
        DataStructures.Overflow overflow36 = new DataStructures.Overflow();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        overflow36.addSuppressed((java.lang.Throwable) overflow37);
        underflow34.addSuppressed((java.lang.Throwable) overflow37);
        java.lang.Throwable[] throwableArray40 = overflow37.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        overflow37.addSuppressed((java.lang.Throwable) underflow41);
        underflow32.addSuppressed((java.lang.Throwable) overflow37);
        overflow24.addSuppressed((java.lang.Throwable) underflow32);
        underflow6.addSuppressed((java.lang.Throwable) underflow32);
        java.lang.Throwable[] throwableArray47 = underflow6.getSuppressed();
        stackAr1.push((java.lang.Object) underflow6);
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray47);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        java.lang.Object obj11 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass12 = obj11.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.top();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.topAndPop();
        DataStructures.StackAr stackAr8 = new DataStructures.StackAr(0);
        java.lang.Object obj9 = stackAr8.topAndPop();
        java.lang.Object obj10 = stackAr8.top();
        stackAr8.makeEmpty();
        boolean boolean12 = stackAr8.isEmpty();
        boolean boolean13 = stackAr8.isEmpty();
        java.lang.Object obj14 = stackAr8.top();
        java.lang.Object obj15 = stackAr8.topAndPop();
        boolean boolean16 = stackAr8.isFull();
        java.lang.Class<?> wildcardClass17 = stackAr8.getClass();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr8);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(9);
        java.lang.Object obj2 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        stackAr1.makeEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        boolean boolean4 = stackAr1.isFull();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isEmpty();
        boolean boolean12 = stackAr1.isEmpty();
        java.lang.Object obj13 = stackAr1.top();
        boolean boolean14 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 1);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass4 = obj3.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isFull();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isFull();
        java.lang.Object obj10 = null;
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push(obj10);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        boolean boolean7 = stackAr1.isEmpty();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        boolean boolean11 = stackAr1.isFull();
        boolean boolean12 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        java.lang.Object obj8 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj10 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj10);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        DataStructures.Underflow underflow11 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray12 = underflow11.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) underflow11);
        underflow2.addSuppressed((java.lang.Throwable) overflow7);
        underflow0.addSuppressed((java.lang.Throwable) underflow2);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow16.getSuppressed();
        java.lang.Throwable[] throwableArray20 = overflow16.getSuppressed();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        overflow21.addSuppressed((java.lang.Throwable) overflow22);
        overflow16.addSuppressed((java.lang.Throwable) overflow21);
        underflow2.addSuppressed((java.lang.Throwable) overflow16);
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray29 = overflow26.getSuppressed();
        java.lang.Throwable[] throwableArray30 = overflow26.getSuppressed();
        DataStructures.Overflow overflow31 = new DataStructures.Overflow();
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        overflow31.addSuppressed((java.lang.Throwable) overflow32);
        java.lang.Throwable[] throwableArray34 = overflow31.getSuppressed();
        DataStructures.Underflow underflow35 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray36 = underflow35.getSuppressed();
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        underflow35.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        overflow31.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow43);
        overflow26.addSuppressed((java.lang.Throwable) overflow43);
        underflow2.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray49 = overflow43.getSuppressed();
        DataStructures.Overflow overflow50 = new DataStructures.Overflow();
        DataStructures.Overflow overflow51 = new DataStructures.Overflow();
        overflow50.addSuppressed((java.lang.Throwable) overflow51);
        java.lang.Throwable[] throwableArray53 = overflow50.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow54.getSuppressed();
        DataStructures.Overflow overflow59 = new DataStructures.Overflow();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        overflow59.addSuppressed((java.lang.Throwable) overflow60);
        overflow54.addSuppressed((java.lang.Throwable) overflow59);
        overflow50.addSuppressed((java.lang.Throwable) overflow59);
        DataStructures.Underflow underflow64 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray65 = underflow64.getSuppressed();
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray67 = underflow66.getSuppressed();
        DataStructures.Overflow overflow68 = new DataStructures.Overflow();
        DataStructures.Overflow overflow69 = new DataStructures.Overflow();
        overflow68.addSuppressed((java.lang.Throwable) overflow69);
        underflow66.addSuppressed((java.lang.Throwable) overflow69);
        java.lang.Throwable[] throwableArray72 = overflow69.getSuppressed();
        DataStructures.Underflow underflow73 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray74 = underflow73.getSuppressed();
        overflow69.addSuppressed((java.lang.Throwable) underflow73);
        underflow64.addSuppressed((java.lang.Throwable) underflow73);
        java.lang.Throwable[] throwableArray77 = underflow73.getSuppressed();
        overflow59.addSuppressed((java.lang.Throwable) underflow73);
        overflow43.addSuppressed((java.lang.Throwable) underflow73);
        java.lang.String str80 = overflow43.toString();
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray12);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray20);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray65);
        org.junit.Assert.assertNotNull(throwableArray67);
        org.junit.Assert.assertNotNull(throwableArray72);
        org.junit.Assert.assertNotNull(throwableArray74);
        org.junit.Assert.assertNotNull(throwableArray77);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "DataStructures.Overflow" + "'", str80, "DataStructures.Overflow");
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        stackAr1.push((java.lang.Object) 0);
        stackAr1.pop();
        boolean boolean6 = stackAr1.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        java.lang.Throwable[] throwableArray4 = overflow0.getSuppressed();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        overflow5.addSuppressed((java.lang.Throwable) overflow6);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray10 = overflow5.getSuppressed();
        java.lang.String str11 = overflow5.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DataStructures.Overflow" + "'", str11, "DataStructures.Overflow");
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
        DataStructures.StackAr stackAr11 = new DataStructures.StackAr(1);
        boolean boolean12 = stackAr11.isFull();
        java.lang.Object obj13 = stackAr11.top();
        boolean boolean14 = stackAr11.isEmpty();
        boolean boolean15 = stackAr11.isFull();
        boolean boolean16 = stackAr11.isEmpty();
        boolean boolean17 = stackAr11.isEmpty();
        stackAr11.makeEmpty();
        stackAr11.makeEmpty();
        boolean boolean20 = stackAr11.isFull();
        boolean boolean21 = stackAr11.isEmpty();
        java.lang.Object obj22 = stackAr11.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) stackAr11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(obj22);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = null;
        stackAr1.push(obj3);
        java.lang.Object obj5 = stackAr1.top();
        stackAr1.pop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isFull();
        boolean boolean6 = stackAr1.isEmpty();
        boolean boolean7 = stackAr1.isFull();
        boolean boolean8 = stackAr1.isFull();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.topAndPop();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        boolean boolean5 = stackAr1.isFull();
        java.lang.Object obj6 = stackAr1.top();
        java.lang.Object obj7 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean9 = stackAr1.isFull();
        boolean boolean10 = stackAr1.isEmpty();
        DataStructures.Overflow overflow11 = new DataStructures.Overflow();
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        overflow11.addSuppressed((java.lang.Throwable) overflow12);
        java.lang.Throwable[] throwableArray14 = overflow11.getSuppressed();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        overflow15.addSuppressed((java.lang.Throwable) overflow16);
        java.lang.Throwable[] throwableArray18 = overflow15.getSuppressed();
        java.lang.Throwable[] throwableArray19 = overflow15.getSuppressed();
        DataStructures.Overflow overflow20 = new DataStructures.Overflow();
        DataStructures.Overflow overflow21 = new DataStructures.Overflow();
        overflow20.addSuppressed((java.lang.Throwable) overflow21);
        java.lang.Throwable[] throwableArray23 = overflow20.getSuppressed();
        DataStructures.Underflow underflow24 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray25 = underflow24.getSuppressed();
        DataStructures.Overflow overflow26 = new DataStructures.Overflow();
        DataStructures.Overflow overflow27 = new DataStructures.Overflow();
        overflow26.addSuppressed((java.lang.Throwable) overflow27);
        underflow24.addSuppressed((java.lang.Throwable) overflow27);
        java.lang.Throwable[] throwableArray30 = overflow27.getSuppressed();
        overflow20.addSuppressed((java.lang.Throwable) overflow27);
        DataStructures.Overflow overflow32 = new DataStructures.Overflow();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        overflow32.addSuppressed((java.lang.Throwable) overflow33);
        overflow27.addSuppressed((java.lang.Throwable) overflow32);
        overflow15.addSuppressed((java.lang.Throwable) overflow32);
        DataStructures.Overflow overflow37 = new DataStructures.Overflow();
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        overflow37.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray40 = overflow38.getSuppressed();
        DataStructures.Underflow underflow41 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray42 = underflow41.getSuppressed();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        DataStructures.Overflow overflow44 = new DataStructures.Overflow();
        overflow43.addSuppressed((java.lang.Throwable) overflow44);
        underflow41.addSuppressed((java.lang.Throwable) overflow44);
        overflow38.addSuppressed((java.lang.Throwable) overflow44);
        overflow15.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray49 = overflow15.getSuppressed();
        overflow11.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray51 = overflow11.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.push((java.lang.Object) overflow11);
            org.junit.Assert.fail("Expected exception of type DataStructures.Overflow; message: null");
        } catch (DataStructures.Overflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(throwableArray14);
        org.junit.Assert.assertNotNull(throwableArray18);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(throwableArray25);
        org.junit.Assert.assertNotNull(throwableArray30);
        org.junit.Assert.assertNotNull(throwableArray40);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray51);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(7);
        DataStructures.StackAr stackAr3 = new DataStructures.StackAr(0);
        java.lang.Object obj4 = stackAr3.topAndPop();
        java.lang.Object obj5 = stackAr3.top();
        java.lang.Object obj6 = stackAr3.top();
        java.lang.Object obj7 = stackAr3.top();
        java.lang.Object obj8 = stackAr3.top();
        stackAr1.push(obj8);
        boolean boolean10 = stackAr1.isFull();
        boolean boolean11 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) 'a');
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.topAndPop();
        java.lang.Object obj4 = stackAr1.topAndPop();
        java.lang.Object obj5 = stackAr1.topAndPop();
        java.lang.Object obj6 = stackAr1.topAndPop();
        java.lang.Object obj7 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(1);
        boolean boolean2 = stackAr1.isFull();
        boolean boolean3 = stackAr1.isFull();
        DataStructures.StackAr stackAr5 = new DataStructures.StackAr(0);
        java.lang.Object obj6 = stackAr5.topAndPop();
        java.lang.Object obj7 = stackAr5.top();
        stackAr5.makeEmpty();
        java.lang.Object obj9 = stackAr5.top();
        stackAr1.push((java.lang.Object) stackAr5);
        java.lang.Object obj11 = stackAr5.top();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(obj6);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNull(obj11);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj8 = stackAr1.top();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isEmpty();
        boolean boolean11 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        boolean boolean13 = stackAr1.isFull();
        java.lang.Object obj14 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(obj14);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isFull();
        java.lang.Class<?> wildcardClass9 = stackAr1.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        stackAr1.makeEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        boolean boolean4 = stackAr1.isEmpty();
        java.lang.Object obj5 = stackAr1.top();
        stackAr1.makeEmpty();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (short) 0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass6 = obj5.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr((int) (byte) 10);
        boolean boolean2 = stackAr1.isEmpty();
        boolean boolean3 = stackAr1.isEmpty();
        java.lang.Object obj4 = stackAr1.topAndPop();
        stackAr1.makeEmpty();
        java.lang.Object obj6 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertNull(obj6);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isFull();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        DataStructures.StackAr stackAr10 = new DataStructures.StackAr(1);
        boolean boolean11 = stackAr10.isFull();
        boolean boolean12 = stackAr10.isFull();
        DataStructures.StackAr stackAr14 = new DataStructures.StackAr(0);
        java.lang.Object obj15 = stackAr14.topAndPop();
        java.lang.Object obj16 = stackAr14.top();
        stackAr14.makeEmpty();
        java.lang.Object obj18 = stackAr14.top();
        stackAr10.push((java.lang.Object) stackAr14);
        stackAr1.push((java.lang.Object) stackAr14);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(obj15);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(obj18);
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(2);
        boolean boolean2 = stackAr1.isFull();
        java.lang.Object obj3 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(obj3);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        boolean boolean2 = stackAr1.isFull();
        stackAr1.makeEmpty();
        boolean boolean4 = stackAr1.isFull();
        java.lang.Object obj5 = stackAr1.top();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.top();
        java.lang.Object obj9 = stackAr1.top();
        stackAr1.makeEmpty();
        // The following exception was thrown during execution in test generation
        try {
            stackAr1.pop();
            org.junit.Assert.fail("Expected exception of type DataStructures.Underflow; message: null");
        } catch (DataStructures.Underflow e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNull(obj5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertNull(obj9);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        stackAr1.makeEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        boolean boolean6 = stackAr1.isEmpty();
        java.lang.Object obj7 = stackAr1.top();
        java.lang.Object obj8 = stackAr1.topAndPop();
        boolean boolean9 = stackAr1.isEmpty();
        boolean boolean10 = stackAr1.isFull();
        java.lang.Object obj11 = stackAr1.top();
        stackAr1.makeEmpty();
        java.lang.Object obj13 = stackAr1.topAndPop();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = obj13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertNull(obj8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(obj11);
        org.junit.Assert.assertNull(obj13);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(0);
        java.lang.Object obj2 = stackAr1.topAndPop();
        java.lang.Object obj3 = stackAr1.top();
        boolean boolean4 = stackAr1.isEmpty();
        boolean boolean5 = stackAr1.isEmpty();
        stackAr1.makeEmpty();
        java.lang.Object obj7 = stackAr1.topAndPop();
        boolean boolean8 = stackAr1.isEmpty();
        java.lang.Object obj9 = stackAr1.topAndPop();
        boolean boolean10 = stackAr1.isFull();
        org.junit.Assert.assertNull(obj2);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(obj7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        DataStructures.Underflow underflow0 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray1 = underflow0.getSuppressed();
        DataStructures.Underflow underflow2 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray3 = underflow2.getSuppressed();
        DataStructures.Overflow overflow4 = new DataStructures.Overflow();
        DataStructures.Overflow overflow5 = new DataStructures.Overflow();
        overflow4.addSuppressed((java.lang.Throwable) overflow5);
        underflow2.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray8 = overflow5.getSuppressed();
        DataStructures.Underflow underflow9 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray10 = underflow9.getSuppressed();
        overflow5.addSuppressed((java.lang.Throwable) underflow9);
        underflow0.addSuppressed((java.lang.Throwable) overflow5);
        java.lang.Throwable[] throwableArray13 = underflow0.getSuppressed();
        DataStructures.Overflow overflow14 = new DataStructures.Overflow();
        DataStructures.Overflow overflow15 = new DataStructures.Overflow();
        overflow14.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray17 = overflow15.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow15);
        java.lang.Throwable[] throwableArray19 = underflow0.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        java.lang.Throwable[] throwableArray26 = overflow23.getSuppressed();
        java.lang.Throwable[] throwableArray27 = overflow23.getSuppressed();
        underflow0.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        DataStructures.Overflow overflow30 = new DataStructures.Overflow();
        overflow29.addSuppressed((java.lang.Throwable) overflow30);
        java.lang.Throwable[] throwableArray32 = overflow29.getSuppressed();
        java.lang.Throwable[] throwableArray33 = overflow29.getSuppressed();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        DataStructures.Overflow overflow35 = new DataStructures.Overflow();
        overflow34.addSuppressed((java.lang.Throwable) overflow35);
        java.lang.Throwable[] throwableArray37 = overflow34.getSuppressed();
        DataStructures.Underflow underflow38 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray39 = underflow38.getSuppressed();
        DataStructures.Overflow overflow40 = new DataStructures.Overflow();
        DataStructures.Overflow overflow41 = new DataStructures.Overflow();
        overflow40.addSuppressed((java.lang.Throwable) overflow41);
        underflow38.addSuppressed((java.lang.Throwable) overflow41);
        java.lang.Throwable[] throwableArray44 = overflow41.getSuppressed();
        overflow34.addSuppressed((java.lang.Throwable) overflow41);
        DataStructures.Overflow overflow46 = new DataStructures.Overflow();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        overflow46.addSuppressed((java.lang.Throwable) overflow47);
        overflow41.addSuppressed((java.lang.Throwable) overflow46);
        overflow29.addSuppressed((java.lang.Throwable) overflow46);
        java.lang.Throwable[] throwableArray51 = overflow29.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray53 = overflow23.getSuppressed();
        DataStructures.Overflow overflow54 = new DataStructures.Overflow();
        DataStructures.Overflow overflow55 = new DataStructures.Overflow();
        overflow54.addSuppressed((java.lang.Throwable) overflow55);
        java.lang.Throwable[] throwableArray57 = overflow54.getSuppressed();
        DataStructures.Underflow underflow58 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray59 = underflow58.getSuppressed();
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        underflow58.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray64 = overflow61.getSuppressed();
        overflow54.addSuppressed((java.lang.Throwable) overflow61);
        DataStructures.Underflow underflow66 = new DataStructures.Underflow();
        overflow54.addSuppressed((java.lang.Throwable) underflow66);
        DataStructures.Underflow underflow68 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray69 = underflow68.getSuppressed();
        DataStructures.Underflow underflow70 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray71 = underflow70.getSuppressed();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        DataStructures.Overflow overflow73 = new DataStructures.Overflow();
        overflow72.addSuppressed((java.lang.Throwable) overflow73);
        underflow70.addSuppressed((java.lang.Throwable) overflow73);
        java.lang.Throwable[] throwableArray76 = overflow73.getSuppressed();
        DataStructures.Underflow underflow77 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray78 = underflow77.getSuppressed();
        overflow73.addSuppressed((java.lang.Throwable) underflow77);
        underflow68.addSuppressed((java.lang.Throwable) overflow73);
        underflow66.addSuppressed((java.lang.Throwable) overflow73);
        DataStructures.Underflow underflow82 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray83 = underflow82.getSuppressed();
        DataStructures.Overflow overflow84 = new DataStructures.Overflow();
        DataStructures.Overflow overflow85 = new DataStructures.Overflow();
        overflow84.addSuppressed((java.lang.Throwable) overflow85);
        underflow82.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray88 = overflow85.getSuppressed();
        DataStructures.Underflow underflow89 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray90 = underflow89.getSuppressed();
        overflow85.addSuppressed((java.lang.Throwable) underflow89);
        overflow73.addSuppressed((java.lang.Throwable) overflow85);
        java.lang.Throwable[] throwableArray93 = overflow85.getSuppressed();
        overflow23.addSuppressed((java.lang.Throwable) overflow85);
        org.junit.Assert.assertNotNull(throwableArray1);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray8);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray13);
        org.junit.Assert.assertNotNull(throwableArray17);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray26);
        org.junit.Assert.assertNotNull(throwableArray27);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray37);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray44);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray59);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray69);
        org.junit.Assert.assertNotNull(throwableArray71);
        org.junit.Assert.assertNotNull(throwableArray76);
        org.junit.Assert.assertNotNull(throwableArray78);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertNotNull(throwableArray88);
        org.junit.Assert.assertNotNull(throwableArray90);
        org.junit.Assert.assertNotNull(throwableArray93);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(8);
        stackAr1.makeEmpty();
        stackAr1.makeEmpty();
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        DataStructures.StackAr stackAr1 = new DataStructures.StackAr(10);
        boolean boolean2 = stackAr1.isEmpty();
        java.lang.Object obj3 = stackAr1.top();
        java.lang.Object obj4 = stackAr1.top();
        DataStructures.StackAr stackAr6 = new DataStructures.StackAr(0);
        boolean boolean7 = stackAr6.isFull();
        stackAr6.makeEmpty();
        java.lang.Object obj9 = stackAr6.topAndPop();
        stackAr6.makeEmpty();
        boolean boolean11 = stackAr6.isFull();
        boolean boolean12 = stackAr6.isEmpty();
        java.lang.Object obj13 = stackAr6.topAndPop();
        java.lang.Object obj14 = stackAr6.top();
        stackAr1.push((java.lang.Object) stackAr6);
        boolean boolean16 = stackAr1.isFull();
        boolean boolean17 = stackAr1.isEmpty();
        boolean boolean18 = stackAr1.isEmpty();
        java.lang.Object obj19 = stackAr1.topAndPop();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNull(obj3);
        org.junit.Assert.assertNull(obj4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(obj13);
        org.junit.Assert.assertNull(obj14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(obj19);
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        DataStructures.Overflow overflow0 = new DataStructures.Overflow();
        DataStructures.Overflow overflow1 = new DataStructures.Overflow();
        overflow0.addSuppressed((java.lang.Throwable) overflow1);
        java.lang.Throwable[] throwableArray3 = overflow0.getSuppressed();
        DataStructures.Underflow underflow4 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray5 = underflow4.getSuppressed();
        DataStructures.Overflow overflow6 = new DataStructures.Overflow();
        DataStructures.Overflow overflow7 = new DataStructures.Overflow();
        overflow6.addSuppressed((java.lang.Throwable) overflow7);
        underflow4.addSuppressed((java.lang.Throwable) overflow7);
        java.lang.Throwable[] throwableArray10 = overflow7.getSuppressed();
        overflow0.addSuppressed((java.lang.Throwable) overflow7);
        DataStructures.Overflow overflow12 = new DataStructures.Overflow();
        DataStructures.Overflow overflow13 = new DataStructures.Overflow();
        overflow12.addSuppressed((java.lang.Throwable) overflow13);
        overflow7.addSuppressed((java.lang.Throwable) overflow12);
        DataStructures.Overflow overflow16 = new DataStructures.Overflow();
        DataStructures.Overflow overflow17 = new DataStructures.Overflow();
        overflow16.addSuppressed((java.lang.Throwable) overflow17);
        java.lang.Throwable[] throwableArray19 = overflow17.getSuppressed();
        DataStructures.Underflow underflow20 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray21 = underflow20.getSuppressed();
        DataStructures.Overflow overflow22 = new DataStructures.Overflow();
        DataStructures.Overflow overflow23 = new DataStructures.Overflow();
        overflow22.addSuppressed((java.lang.Throwable) overflow23);
        underflow20.addSuppressed((java.lang.Throwable) overflow23);
        overflow17.addSuppressed((java.lang.Throwable) overflow23);
        overflow7.addSuppressed((java.lang.Throwable) overflow23);
        DataStructures.Overflow overflow28 = new DataStructures.Overflow();
        DataStructures.Overflow overflow29 = new DataStructures.Overflow();
        overflow28.addSuppressed((java.lang.Throwable) overflow29);
        java.lang.Throwable[] throwableArray31 = overflow28.getSuppressed();
        java.lang.Throwable[] throwableArray32 = overflow28.getSuppressed();
        DataStructures.Overflow overflow33 = new DataStructures.Overflow();
        DataStructures.Overflow overflow34 = new DataStructures.Overflow();
        overflow33.addSuppressed((java.lang.Throwable) overflow34);
        java.lang.Throwable[] throwableArray36 = overflow33.getSuppressed();
        overflow28.addSuppressed((java.lang.Throwable) overflow33);
        DataStructures.Overflow overflow38 = new DataStructures.Overflow();
        DataStructures.Overflow overflow39 = new DataStructures.Overflow();
        overflow38.addSuppressed((java.lang.Throwable) overflow39);
        java.lang.Throwable[] throwableArray41 = overflow38.getSuppressed();
        DataStructures.Overflow overflow42 = new DataStructures.Overflow();
        DataStructures.Overflow overflow43 = new DataStructures.Overflow();
        overflow42.addSuppressed((java.lang.Throwable) overflow43);
        java.lang.Throwable[] throwableArray45 = overflow42.getSuppressed();
        java.lang.Throwable[] throwableArray46 = overflow42.getSuppressed();
        DataStructures.Overflow overflow47 = new DataStructures.Overflow();
        DataStructures.Overflow overflow48 = new DataStructures.Overflow();
        overflow47.addSuppressed((java.lang.Throwable) overflow48);
        overflow42.addSuppressed((java.lang.Throwable) overflow47);
        overflow38.addSuppressed((java.lang.Throwable) overflow47);
        DataStructures.Overflow overflow52 = new DataStructures.Overflow();
        DataStructures.Overflow overflow53 = new DataStructures.Overflow();
        overflow52.addSuppressed((java.lang.Throwable) overflow53);
        overflow38.addSuppressed((java.lang.Throwable) overflow53);
        overflow28.addSuppressed((java.lang.Throwable) overflow38);
        java.lang.Throwable[] throwableArray57 = overflow38.getSuppressed();
        java.lang.Throwable[] throwableArray58 = overflow38.getSuppressed();
        overflow7.addSuppressed((java.lang.Throwable) overflow38);
        DataStructures.Overflow overflow60 = new DataStructures.Overflow();
        DataStructures.Overflow overflow61 = new DataStructures.Overflow();
        overflow60.addSuppressed((java.lang.Throwable) overflow61);
        java.lang.Throwable[] throwableArray63 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray64 = overflow60.getSuppressed();
        DataStructures.Overflow overflow65 = new DataStructures.Overflow();
        DataStructures.Overflow overflow66 = new DataStructures.Overflow();
        overflow65.addSuppressed((java.lang.Throwable) overflow66);
        java.lang.Throwable[] throwableArray68 = overflow65.getSuppressed();
        DataStructures.Underflow underflow69 = new DataStructures.Underflow();
        java.lang.Throwable[] throwableArray70 = underflow69.getSuppressed();
        DataStructures.Overflow overflow71 = new DataStructures.Overflow();
        DataStructures.Overflow overflow72 = new DataStructures.Overflow();
        overflow71.addSuppressed((java.lang.Throwable) overflow72);
        underflow69.addSuppressed((java.lang.Throwable) overflow72);
        java.lang.Throwable[] throwableArray75 = overflow72.getSuppressed();
        overflow65.addSuppressed((java.lang.Throwable) overflow72);
        DataStructures.Overflow overflow77 = new DataStructures.Overflow();
        DataStructures.Overflow overflow78 = new DataStructures.Overflow();
        overflow77.addSuppressed((java.lang.Throwable) overflow78);
        overflow72.addSuppressed((java.lang.Throwable) overflow77);
        overflow60.addSuppressed((java.lang.Throwable) overflow77);
        java.lang.Throwable[] throwableArray82 = overflow60.getSuppressed();
        java.lang.Throwable[] throwableArray83 = overflow60.getSuppressed();
        overflow38.addSuppressed((java.lang.Throwable) overflow60);
        java.lang.String str85 = overflow60.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray19);
        org.junit.Assert.assertNotNull(throwableArray21);
        org.junit.Assert.assertNotNull(throwableArray31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray41);
        org.junit.Assert.assertNotNull(throwableArray45);
        org.junit.Assert.assertNotNull(throwableArray46);
        org.junit.Assert.assertNotNull(throwableArray57);
        org.junit.Assert.assertNotNull(throwableArray58);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(throwableArray64);
        org.junit.Assert.assertNotNull(throwableArray68);
        org.junit.Assert.assertNotNull(throwableArray70);
        org.junit.Assert.assertNotNull(throwableArray75);
        org.junit.Assert.assertNotNull(throwableArray82);
        org.junit.Assert.assertNotNull(throwableArray83);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "DataStructures.Overflow" + "'", str85, "DataStructures.Overflow");
    }
}

